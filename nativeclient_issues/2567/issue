<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CkAFR347eCl7ImA9WhNSEk8.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/2567</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">The x86-64 sandbox requires both %rsp and %rbp to point within the untrusted address space.  However, the current ARM sandbox only requires sp to be within the untrusted address space, not fp (the frame pointer, a.k.a. r11).

This will make accessing local variables less efficient in functions with variable-sized stack frames (e.g. those using variable-sized arrays or alloca()).

For example:

#include &amp;lt;stdlib.h&amp;gt;
volatile void *p;
void foo(int size) {
  int x;
  p = &amp;amp;x; /* Force x to be stack allocated */
  x = 3456;
  x = 2345;
  p = alloca(size);
  x = 1234;
}

This generates code like this:

  44:	e3003929 	movw	r3, #2345	; 0x929
  48:	e3cbb103 	bic	fp, fp, #-1073741824	; 0xc0000000
  4c:	e50b3010 	str	r3, [fp, #-16]

rather than just:

  44:	e3003929 	movw	r3, #2345	; 0x929
  4c:	e50b3010 	str	r3, [fp, #-16]

We might consider constraining fp the same way sp is constrained.
</ns0:content><ns0:updated>2012-10-26T03:05:16.000Z</ns0:updated><ns0:published>2012-01-28T02:16:51.000Z</ns0:published><ns2:status>WontFix</ns2:status><ns2:cc>
			<ns2:uri>/u/108394971971967673680/</ns2:uri><ns2:username>s...@google.com</ns2:username></ns2:cc><ns2:state>closed</ns2:state><ns0:title>ARM sandbox: Consider constraining 'fp' as well as 'sp'</ns0:title><ns2:label>Type-Enhancement</ns2:label><ns2:label>Pri-3</ns2:label><ns2:label>Component-TCB</ns2:label><ns2:label>Component-TCB-Validator</ns2:label><ns2:label>Arch-ARM</ns2:label><ns2:label>Performance</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/2567/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2567" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/2567" rel="self" type="application/atom+xml" /><ns2:stars>1</ns2:stars><ns2:closedDate>2012-10-26T03:05:16.000Z</ns2:closedDate><ns2:id>2567</ns2:id></ns0:entry>