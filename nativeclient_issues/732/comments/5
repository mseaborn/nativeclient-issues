<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CUIMQH47eCl7ImA9Wx5TFEk.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/732/comments/full/5</ns0:id><ns0:author>
			<ns0:name>cbiffle@google.com</ns0:name><ns0:uri>/u/cbiffle@google.com/</ns0:uri></ns0:author><ns0:content type="html">Backtracking on my previous proposal: I've single-stepped through the execution of this test, and I'm about 80% confident that it's a toolchain bug, probably the linker.

Fun fact: the working binary has "bic sp, sp, #MASK" at the start of every function -- but if you replace these with NOPs it *still works.*  We're tickling some subtle alignment bug, and since it coincides with us switching to materializing function addresses with MOVW/MOVT, I suspect that we might be relocating the objects incorrectly.  I'll work through the intermodular references in the binary to check this.</ns0:content><ns0:updated>2010-07-29T22:46:21.000Z</ns0:updated><ns0:published>2010-07-29T22:46:21.000Z</ns0:published><ns2:updates /><ns0:title>Comment 5 by cbiffle@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=732#c5" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/732/comments/full/5" rel="self" type="application/atom+xml" /></ns0:entry>