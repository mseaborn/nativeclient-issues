<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;DUECRX47eCl7ImA9WhRVGEk.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/1388</ns0:id><ns0:author>
			<ns0:name>b...@google.com</ns0:name><ns0:uri>/u/105821748722532785568/</ns0:uri></ns0:author><ns0:content type="html">this is lowish priority, since the likelihood of the compiler(s) deciding the new home of a variable used in trusted code is in untrusted memory after a store of the variable's value to untrusted memory is low, especially if register pressure was low prior to the store but increased afterwards.  (parsed that?)  but we should do a quick scan/audit to add the volatile storage specifier as appropriate, so as to prevent the compiler(s) from doing bad things.</ns0:content><ns0:updated>2012-01-18T00:47:44.000Z</ns0:updated><ns0:published>2011-02-03T19:39:22.000Z</ns0:published><ns2:status>Fixed</ns2:status><ns2:owner>
			<ns2:uri>/u/105821748722532785568/</ns2:uri><ns2:username>b...@google.com</ns2:username></ns2:owner><ns2:state>closed</ns2:state><ns0:title>trusted code manipulation of untrusted memory should (often) include volatile</ns0:title><ns2:label>Type-Defect</ns2:label><ns2:label>Pri-2</ns2:label><ns2:label>Component-TCB</ns2:label><ns2:label>OS-All</ns2:label><ns2:label>Arch-All</ns2:label><ns2:label>Mstone-15</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/1388/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=1388" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/1388" rel="self" type="application/atom+xml" /><ns2:stars>2</ns2:stars><ns2:closedDate>2011-10-10T18:35:34.000Z</ns2:closedDate><ns2:id>1388</ns2:id></ns0:entry>