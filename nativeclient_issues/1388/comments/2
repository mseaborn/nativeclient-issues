<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CkIEQn47eCl7ImA9Wx9VF0o.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/1388/comments/full/2</ns0:id><ns0:author>
			<ns0:name>b...@google.com</ns0:name><ns0:uri>/u/105821748722532785568/</ns0:uri></ns0:author><ns0:content type="html">struct foo *foo_ptr = NaClUserToSysAddrRange(natp-&gt;nap, (uintptr_t) user_addr, sizeof *foo_ptr);
int trusted_var;
int i,j,k;

if (kNaClBadAddress == foo_ptr) { /* handle error case */ }
trusted_var = some_computation();
foo_ptr-&gt;member = trusted_var;
i = 0; j = 0; k = 0; /* variables are now live, increasing register pressure */
/* not enough registers to hold trusted_var.  foo_ptr is still in a register */
/* compiler notices that foo_ptr-&gt;member holds the value of trusted_var, and */
/* no aliases should occur -- -fstrict-aliasing is enabled.  so rather than */
/* saving trusted_var in the stack frame, the compiler decides that it could */
/* use foo_ptr-&gt;member instead */
trusted_computation(trusted_var);
/* oops.  we've picked up what we expect to be the value of trusted_var from */
/* untrusted memory that another untrusted user thread may have modified */
</ns0:content><ns0:updated>2011-02-03T22:01:43.000Z</ns0:updated><ns0:published>2011-02-03T22:01:43.000Z</ns0:published><ns2:updates /><ns0:title>Comment 2 by b...@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=1388#c2" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/1388/comments/full/2" rel="self" type="application/atom+xml" /></ns0:entry>