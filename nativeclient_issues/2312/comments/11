<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;AkQGQn47eCl7ImA9WhdUEUs.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/2312/comments/full/11</ns0:id><ns0:author>
			<ns0:name>pdox%goo...@gtempaccount.com</ns0:name><ns0:uri>/u/104735739662288482898/</ns0:uri></ns0:author><ns0:content type="html">The builds are conflated by necessity. And global variables (like directory paths) also need to be shared among all the different builds.

Doing anything out of order is dangerous, unless you know what to expect. This is why I encourage people to always do "utman.sh all", and avoid doing the components one-by-one, unless you've only made a tiny change and want to observe the effect of that tiny change on a single compile.

A) LLVM depends on binutils. (headers for gold plugin)

B) binutils depends on llvm-install (installs gold plugin into pkg/binutils)

C) llvm-gcc/libgcc_eh/libstdcpp depends on newlib (for headers), LLVM (for the bitcode backend), and binutils (for cross-target ar, nm).

E) libstdcpp/newlib/compilerrt/libgcc_eh depends on the frontend (llvm-gcc) and driver.

F) The sandboxed translator needs to use the SDK and everything else.

For GlibC, the picture is even worse, since building newlib requires libgcc_s.so, building libstdcpp requires newlib, and so on, which all depend on having built the startup functions in the SDK so that you can create shared objects.
</ns0:content><ns0:updated>2011-09-28T00:05:23.000Z</ns0:updated><ns0:published>2011-09-28T00:05:23.000Z</ns0:published><ns2:updates /><ns0:title>Comment 11 by pdox%goo...@gtempaccount.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2312#c11" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/2312/comments/full/11" rel="self" type="application/atom+xml" /></ns0:entry>