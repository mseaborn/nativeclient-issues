<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;DUYHRH47eCl7ImA9WhFSGUw.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/3450</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">Given code that uses C++ method pointers, pnacl-clang generates LLVM IR code that assumes that function pointers are 0 mod 2.  The default C++ ABI for method pointers assumes it can use lowest bit as a tag bit.

This is bad because having pexes containing this assumption would constrain future sandboxing models.  For example, a future sandbox might use function pointers that are indexes into a jump table.

This comment in clang/lib/CodeGen/ItaniumCXXABI.cpp explains:

/// In the Itanium and ARM ABIs, method pointers have the form:
///   struct { ptrdiff_t ptr; ptrdiff_t adj; } memptr;
///
/// In the Itanium ABI:
///  - method pointers are virtual if (memptr.ptr &amp;amp; 1) is nonzero
///  - the this-adjustment is (memptr.adj)
///  - the virtual offset is (memptr.ptr - 1)
///
/// In the ARM ABI:
///  - method pointers are virtual if (memptr.adj &amp;amp; 1) is nonzero
///  - the this-adjustment is (memptr.adj &amp;gt;&amp;gt; 1)
///  - the virtual offset is (memptr.ptr)
/// ARM uses 'adj' for the virtual flag because Thumb functions
/// may be only single-byte aligned.
///
/// If the member is virtual, the adjusted 'this' pointer points
/// to a vtable pointer from which the virtual offset is applied.
///
/// If the member is non-virtual, memptr.ptr is the address of
/// the function to call.

I discovered this by accident while looking at ItaniumCXXABI.cpp's use of struct types.

We should switch to the ARM format for C++ method pointers.
</ns0:content><ns0:updated>2013-06-22T16:05:35.000Z</ns0:updated><ns0:published>2013-05-26T16:26:10.000Z</ns0:published><ns2:status>Assigned</ns2:status><ns2:owner>
			<ns2:uri>/u/mseaborn@chromium.org/</ns2:uri><ns2:username>mseaborn@chromium.org</ns2:username></ns2:owner><ns2:state>open</ns2:state><ns0:title>pnacl-clang's C++ codegen assumes that function pointers are 0 modulo 2</ns0:title><ns2:label>Type-Defect</ns2:label><ns2:label>Pri-1</ns2:label><ns2:label>Component-PNaCl</ns2:label><ns2:label>OS-All</ns2:label><ns2:label>Arch-All</ns2:label><ns2:label>PNaClABI</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/3450/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=3450" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/3450" rel="self" type="application/atom+xml" /><ns2:stars>1</ns2:stars><ns2:id>3450</ns2:id></ns0:entry>