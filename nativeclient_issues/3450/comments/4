<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CEQGSH47eCl7ImA9WhFSFkU.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/3450/comments/full/4</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">Interestingly, Emscripten has a workaround for making C++ method pointers work, since the code it generates using Clang assumes the Itanium/X86 representation.  Emscripten ensures that all function pointer values are even, and it inserts dummy functions into the function table to ensure that.

The workaround was first added to runtime.js here:
https://github.com/kripken/emscripten/commit/fa7440b389910fefe7b3ea713a21b8a6b44daa6f - "add nonvirtual part to polymorph test; fails in clang"

The workaround has evolved into this line in modules.js:
        this.nextIndex += 2; // Need to have indexes be even numbers, see |polymorph| test

With my Clang fix applied, this workaround could be removed.</ns0:content><ns0:updated>2013-06-19T22:52:09.000Z</ns0:updated><ns0:published>2013-06-19T22:52:09.000Z</ns0:published><ns2:updates /><ns0:title>Comment 4 by mseaborn@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=3450#c4" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/3450/comments/full/4" rel="self" type="application/atom+xml" /></ns0:entry>