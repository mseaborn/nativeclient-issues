<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;DUIBQn47eCl7ImA9WhZRE0o.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/1633/comments/full/1</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">Another possibility that we discussed on Friday is:

 3) Patch KiUserExceptionDispatcher so that it behaves safely.
     * It could do "mov $0, %rsp; hlt" to terminate the process safely.  "mov $0, %rsp" should ensure that the kernel will not be able to write a new fault frame and re-enter KiUserExceptionDispatcher.
     * Carlos Pizano tells us that the Chrome Windows sandbox already patches NTDLL routines in order to handle file access during process startup.
     * This would depend on an unofficial Windows interface which may change in the future.
     * The Windows kernel will still write a fault frame into untrusted address space.  This will be visible to untrusted code in the presence of shared memory or multi-threading.  We would need to check that this fault frame does not reveal any sensitive information.
     * We would need to check that there are no other userland entry points that the Windows kernel will invoke with an untrusted %rsp.</ns0:content><ns0:updated>2011-04-09T19:32:33.000Z</ns0:updated><ns0:published>2011-04-09T19:32:33.000Z</ns0:published><ns2:updates /><ns0:title>Comment 1 by mseaborn@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=1633#c1" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/1633/comments/full/1" rel="self" type="application/atom+xml" /></ns0:entry>