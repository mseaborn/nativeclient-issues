<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CkUBQn47eCl7ImA9WxBSEEQ.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/199</ns0:id><ns0:author>
			<ns0:name>cbiffle@google.com</ns0:name><ns0:uri>/u/cbiffle@google.com/</ns0:uri></ns0:author><ns0:content type="html">Using the 2009-12-08 toolchain to compile libgcc, some constant pools are 
not being generated correctly.  This may not be a regression, since to my 
knowledge I'm the first one to really push on our VFP support.

Because the macro we use to align constant pools (and generate the pool 
header) can't look ahead, it doesn't handle constants of &amp;gt;4 bytes well.  An 
example (from _muldc3 in libgcc):

.align  2
  sfi_illegal_if_at_bundle_begining
.LCPI1_3:
  .zero 8

@ BB#37:
  .align  2
  sfi_illegal_if_at_bundle_begining
.LCPI1_0:
  .long 0   @ least significant word of double 1.000000e+00
  .long 1072693248  @ most significant word of double 1.000000e+00


This generates the following:
 3e0:   e1277777        bkpt    0x7777
 3e4:   00000000        .word 0
 3e8:   00000000        .word 0
 3ec:   00000000        .word 0
 3f0:   3ff00000        .word   0x3ff00000


One could look at this two different ways:
1. The bug is in LLVM, which is generating eight-byte constants using pairs 
of four-byte constant directives, and this breaks our macro.
2. The bug is in our macro, which doesn't know the size of the constant 
pool entry it's about to handle and doesn't know to pad out in advance.

Really the long-term fix is to move the padding and bundling logic into the 
code generator, which *does* know how big the CPEs are.</ns0:content><ns0:updated>2009-12-17T22:50:53.000Z</ns0:updated><ns0:published>2009-12-08T23:33:20.000Z</ns0:published><ns2:status>Fixed</ns2:status><ns2:owner>
			<ns2:uri>/u/108771824208521698652/</ns2:uri><ns2:username>robe...@google.com</ns2:username></ns2:owner><ns2:cc>
			<ns2:uri>/u/cbiffle@google.com/</ns2:uri><ns2:username>cbiffle@google.com</ns2:username></ns2:cc><ns2:state>closed</ns2:state><ns0:title>2009-12-08 ARM toolchain produces improperly aligned/boxed constant pools</ns0:title><ns2:label>Type-Defect</ns2:label><ns2:label>Arch-ARM</ns2:label><ns2:label>Milestone-ARM-Toolchain-Alpha</ns2:label><ns2:label>Pri-0</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/199/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=199" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/199" rel="self" type="application/atom+xml" /><ns2:stars>1</ns2:stars><ns2:blocking>
			<ns2:id>195</ns2:id></ns2:blocking><ns2:closedDate>2009-12-17T22:50:53.000Z</ns2:closedDate><ns2:id>199</ns2:id></ns0:entry>