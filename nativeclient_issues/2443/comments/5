<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CEMHQX47eCl7ImA9WhRSFEU.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/2443/comments/full/5</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">Further investigation shows that there are two changes to this test that make it pass:

 1) If address A is mapped with PROT_WRITE at the time the cacheflush syscall is called on it, the problem goes away.  (If it's PROT_NONE, PROT_READ or PROT_READ|PROT_EXEC, the problem remains.)

 2) If we read from address A before calling cacheflush on it, the problem goes away.  (This works if reading from address A is done before or after writing the code.  This works if address A is mapped read-only.)  This is presumably causing the kernel to fault the page into the page table.

So, cacheflush is sensitive to whether the page is writable and whether it has been faulted in.</ns0:content><ns0:updated>2011-11-16T22:27:10.000Z</ns0:updated><ns0:published>2011-11-16T22:27:10.000Z</ns0:published><ns2:updates>
			<ns2:status>Available</ns2:status></ns2:updates><ns0:title>Comment 5 by mseaborn@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2443#c5" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/2443/comments/full/5" rel="self" type="application/atom+xml" /></ns0:entry>