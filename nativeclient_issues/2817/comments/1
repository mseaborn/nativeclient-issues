<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CEEBSH47eCl7ImA9WhVbFEQ.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/2817/comments/full/1</ns0:id><ns0:author>
			<ns0:name>b...@google.com</ns0:name><ns0:uri>/u/105821748722532785568/</ns0:uri></ns0:author><ns0:content type="html">in the presence of HLE / RTM of TSX, we may have a problem if dynamic code uses a dynamic jump to code not in the dynamic region (so jump target is data dependent, at bundle boundary).  if one thread starts an HLE transaction in dynamic code, jumps out to normal code, and another thread deletes the dynamic code (first thread is suspended, but because its %rip is outside of the dynamic region it's considered safe), then the normal/static code can abort the HLE transaction to cause an implicit control flow transfer to the beginning of the HLE transaction -- except that this is now different code, and this transfer may land in the middle of a new instruction, which would allow an attacker to escape the control flow sandbox.

it is likely that suspending a thread -- or doing any syscalls -- will abort pending HLE transactions, but we haven't verified this w/ docs (definitely cannot do this experimentally, since afaik there's no Haswell parts available yet).  ideally, for syscalls if we explicitly abort any pending HLE (or RTM) transactions before actually entering trusted code (requiring changes to trampoline), then there's no problem with the existing check-in based scheme.

we don't support TSX yet, of course, but design changes that we make should keep in mind that we may want to in the future....</ns0:content><ns0:updated>2012-05-31T19:30:59.000Z</ns0:updated><ns0:published>2012-05-31T19:30:59.000Z</ns0:published><ns2:updates /><ns0:title>Comment 1 by b...@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2817#c1" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/2817/comments/full/1" rel="self" type="application/atom+xml" /></ns0:entry>