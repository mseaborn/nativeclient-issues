<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;C04ERn47eCl7ImA9WhBWF0U.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/3386/comments/full/3</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">x86 GCC lets you write inline assembly like this:

void foo(int *ptr) {
  __asm__("add{A|B|C|D} $1, %0" : : "m"(*ptr));
}

Normally it outputs "addA".  If you pass -masm=intel, it outputs "addB".  I'd guess that variants C and D won't ever get used.

This feature was added to LLVM/Clang under http://llvm.org/PR6780.  It's supposed to be fixed so that it doesn't break ARM.  I'd guess that PNaCl's Clang isn't returning the right value from hasNoAsmVariants() when we're compiling C code for ARM.</ns0:content><ns0:updated>2013-04-12T15:51:47.000Z</ns0:updated><ns0:published>2013-04-12T15:51:47.000Z</ns0:published><ns2:updates /><ns0:title>Comment 3 by mseaborn@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=3386#c3" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/3386/comments/full/3" rel="self" type="application/atom+xml" /></ns0:entry>