<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;DUMNSX47eCl7ImA9WhJTEUU.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/2859</ns0:id><ns0:author>
			<ns0:name>dmichael@google.com</ns0:name><ns0:uri>/u/dmichael@google.com/</ns0:uri></ns0:author><ns0:content type="html">What version of the SDK are you using?  gcc version 4.4.3 20120224 (Native Client r7898, Git Commit c69a5b7252d2f073d0f526800e4fca3b63cd1fab) (GCC) 

&lt;b&gt;What steps will reproduce the problem?&lt;/b&gt;
1. Build the attached file with -O2
2. Run it using sel_ldr

&lt;b&gt;What is the expected output? What do you see instead?&lt;/b&gt;
Expect something like:
0x10067a38::Foo()
0x10067a38::~Foo()

Instead, get:
0x10067a18::Foo()
0x10067a18::~Foo()
0x10067a18::~Foo()
And a crash, due to the double-free.

&lt;b&gt;Please provide any additional information below and attach any relevant&lt;/b&gt;
&lt;b&gt;source files.&lt;/b&gt;
The attached program mimics what Chromium's scoped_ptr does to support Pass(). When compiled with -O2 and the nacl toolchain, it yields something like the following:
0x10067a18::Foo()
0x10067a18::~Foo()
0x10067a18::~Foo()

Note that ~Foo gets invoked twice for 0x10067a18, so it crashes. Without optimization, we get:
0x10067a38::Foo()
0x10067a38::~Foo()

We get a similar (successful) result from normal GCC.

The program is invoking undefined behavior, because it is dereferencing an RValue pointer when the underlying type is actually FooPtr. By reinterpret_casting back to FooPtr (see commented out constructor in the code), you can get avoid the undefined behavior and get the expected result.

This may not be important, but I thought it was worth filing in case the difference affects valid code.

See also: http://codereview.chromium.org/10579030/</ns0:content><ns0:updated>2012-06-20T10:18:18.000Z</ns0:updated><ns0:published>2012-06-19T22:42:05.000Z</ns0:published><ns2:status>WontFix</ns2:status><ns2:state>closed</ns2:state><ns0:title>difference from GCC for undefined behavior: reinterpret_cast&lt;Derived&gt;&amp;(base_object).method_on_base()</ns0:title><ns2:label>Type-Defect</ns2:label><ns2:label>Mstone-</ns2:label><ns2:label>Pri-3</ns2:label><ns2:label>Component-GCC</ns2:label><ns2:label>OS-All</ns2:label><ns2:label>Arch-x86-32</ns2:label><ns2:label>Arch-x86-64</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/2859/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2859" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/2859" rel="self" type="application/atom+xml" /><ns2:stars>2</ns2:stars><ns2:closedDate>2012-06-20T10:18:18.000Z</ns2:closedDate><ns2:id>2859</ns2:id></ns0:entry>