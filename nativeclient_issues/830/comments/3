<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CkYCRn47eCl7ImA9Wx5REkg.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/830/comments/full/3</ns0:id><ns0:author>
			<ns0:name>davewr...@gmail.com</ns0:name><ns0:uri>/u/114290711107361128310/</ns0:uri></ns0:author><ns0:content type="html">Yep, that looks right.  I tracked down the source of the leak.  Turns out that NPObjectStubRpcServer::NPN_Invoke in src/shared/npruntime/npstub_rpc_impl.cc is allocating an array of NPVariants to hold the input bytes.  This is done via WireFormatToNPVariants in structure_translations.cc, which in turn calls DeserializeNPVariant.  This function allocates a memory buffer to copy in the bytes for a NPString.  However, in NPObjectStubRpcServer::NPN_Invoke, the values for these NPVariants are not released after the call to the NPObjectStub's invoke method (only the array is deleted).  A simple patch to iterate through the array of NPVariants to call NPN_ReleaseVariantValue on each one solves the memory leak problem.  This leak can be very problematic if NPN_Invoke is frequently called with large strings.</ns0:content><ns0:updated>2010-08-19T20:36:07.000Z</ns0:updated><ns0:published>2010-08-19T20:36:07.000Z</ns0:published><ns2:updates /><ns0:title>Comment 3 by davewr...@gmail.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=830#c3" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/830/comments/full/3" rel="self" type="application/atom+xml" /></ns0:entry>