<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;A04NRH47eCl7ImA9Wx5bEkg.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/1042/comments/full/3</ns0:id><ns0:author>
			<ns0:name>bugdroid1@gmail.com</ns0:name><ns0:uri>/u/bugdroid1@gmail.com/</ns0:uri></ns0:author><ns0:content type="html">Commit: 4427f5784b542fd69b6814b3f8f932467485b26b
 Email: mseaborn@chromium.org

malloc: Replace mprotect() calls with mmap() calls

In the multi-threaded case, glibc's malloc() expects to mmap arenas as
PROT_NONE and make pages accessible gradually with mprotect().
However, NaCl does not provide mprotect().  So, use mmap() + MAP_FIXED
instead.

Similarly, madvise() will be a no-op under NaCl.  Using mmap() instead
when shrinking a heap means memory should be reclaimed properly.

This code is portable, so we don't use any #ifs.  I doubt there is a
reason to prefer mprotect() over mmap() for this anyway.

BUG=http://code.google.com/p/nativeclient/issues/detail?id=1042
TEST=run_thread_test (with a test case added for large allocations)

Review URL: http://codereview.chromium.org/4135005

M	malloc/arena.c</ns0:content><ns0:updated>2010-10-28T09:59:55.000Z</ns0:updated><ns0:published>2010-10-28T09:59:55.000Z</ns0:published><ns2:updates /><ns0:title>Comment 3 by bugdroid1@gmail.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=1042#c3" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/1042/comments/full/3" rel="self" type="application/atom+xml" /></ns0:entry>