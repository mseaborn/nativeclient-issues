<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CUMCQX47eCl7ImA9WhNTEkk.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/3010/comments/full/3</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">I thought about this some more and I realised we do really need to restore the trap flag after a syscall returns.  Otherwise the program will mysteriously continue when the user single-steps through a syscall.

One way is to change nacl_switch_{32,64}.S to restore flags from NaClThreadContext.  However, I don't really want to add code to this code path in case it slows down syscall return.  An alternative is to set one of the parameters in NaClThreadContext so that nacl_switch*.S faults, e.g. set new_prog_ctr to point to a HLT.  We can catch the fault, set the trap flag, and continue.

However, since the trap flag is x86-specific, that does raise the question of how this should work for ARM.  I assume ARM GDB will be using software single-stepping.  It will disassemble instructions to determine where they will jump to, and insert breakpoints at jump targets.  I'm guessing it will attempt to insert breakpoints into trusted code as a result.

Two possible options for ARM are:

 1) Modify ARM GDB not to software-single-step into the trampolines.  Don't try to set breakpoints on trampolines.  But ARM GDB will need a way to be notified when a syscall has completed, and I'm not sure how to do that within the GDB protocol.  Also, I don't like putting knowledge of NaCl's trampoline area into GDB.

 2) Change the debug stub so that execution appears to skip past the trampoline from GDB's point of view.  We might have to lie about the contents of memory and tell GDB that the trampoline contains a syscall instruction.
</ns0:content><ns0:updated>2012-10-14T19:37:40.000Z</ns0:updated><ns0:published>2012-10-14T19:37:40.000Z</ns0:published><ns2:updates /><ns0:title>Comment 3 by mseaborn@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=3010#c3" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/3010/comments/full/3" rel="self" type="application/atom+xml" /></ns0:entry>