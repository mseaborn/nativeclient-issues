<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;DUADQH47eCl7ImA9WhNSFU8.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/3010</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">Currently, if you use the debug stub to single-step into a NaCl syscall, I think this will kill the process.  At some point, sel_ldr will receive a SIGTRAP (or the Mac/Windows equivalents) inside the syscall code path and treat it like any other trusted-code crash by killing the process (possibly invoking Breakpad first).

We should fix the debug stub to handle this gracefully, because single-stepping into a syscall is something that curious developers are likely to do.

There are two halves to this:

 1) Syscall entry: Handle the SIGTRAP gracefully.  We need to unset the trap flag and allow the syscall to continue.
 2) Syscall exit: Do we need to restore the trap flag?

What should happen from the debugger's point of view?

 a) One option is that the debug stub doesn't generate a reply packet until the syscall returns.
 b) Another option is that the debug stub produces a reply packet as soon as the syscall is entered.

One particular case of this occurs if a breakpoint is set on a CALL instruction that performs a syscall.  To continue past this breakpoint, GDB will want to remove the breakpoint temporarily and single-step through the CALL instruction.  This assumes that instructions being single-stepped complete promptly, which means that (b) would be the more useful option.

(b) also makes sense when you consider that the register state reported for a thread blocked in a syscall has prog_ctr set to the return address.  So, entering a syscall changes register state, and this should be reported as a single-step event.

I think (b) also saves us from having to restore the trap flag on syscall exit, because the trap flag is always reset when a debug event is delivered to the debugger.  This simplifies things.
</ns0:content><ns0:updated>2012-10-29T16:22:51.000Z</ns0:updated><ns0:published>2012-08-30T19:35:28.000Z</ns0:published><ns2:status>Assigned</ns2:status><ns2:owner>
			<ns2:uri>/u/mseaborn@chromium.org/</ns2:uri><ns2:username>mseaborn@chromium.org</ns2:username></ns2:owner><ns2:cc>
			<ns2:uri>/u/103360015124260446450/</ns2:uri><ns2:username>eaelt...@google.com</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/112856509894568708731/</ns2:uri><ns2:username>halya...@google.com</ns2:username></ns2:cc><ns2:state>open</ns2:state><ns0:title>Debug stub should gracefully handle single-stepping into a NaCl syscall</ns0:title><ns2:label>Type-Enhancement</ns2:label><ns2:label>Pri-2</ns2:label><ns2:label>Component-DebugStub</ns2:label><ns2:label>OS-All</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/3010/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=3010" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/3010" rel="self" type="application/atom+xml" /><ns2:stars>1</ns2:stars><ns2:id>3010</ns2:id></ns0:entry>