<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CkAARn47eCl7ImA9WhZTGE4.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/1016</ns0:id><ns0:author>
			<ns0:name>b...@google.com</ns0:name><ns0:uri>/u/105821748722532785568/</ns0:uri></ns0:author><ns0:content type="html">for shared code thatuses the NaClSrpcImcDescType abstraction which can either be a NaClDesc or an int (trusted or untrusted code), the interfaces can only take ownership of passed-in descriptors.  if/when we want an interface that want to share access, we would want to refcount the descriptor:  in trusted code, the wrapper class would eventually call NaClDescRef, but there is currently no equivalent way to get a new reference to an int descriptor short of sending the descriptor in a message via a &amp;quot;loop&amp;quot; connection.

this is especially obviously useful for descriptors that are naturally shared, like socket addresses aka connection capabilities, which are essentially connected socket factory objects and sharing would not introduce any interference.

the obvious solution is to add dup (and possibly dup2) as service runtime syscalls, and have the abstraction wrapper for untrusted code provide an AddRef method that either invokes NaClDescRef and keep the returned NaClDesc pointer or invokes dup and keep the returned descriptor.</ns0:content><ns0:updated>2011-03-22T21:52:27.000Z</ns0:updated><ns0:published>2010-10-12T20:12:47.000Z</ns0:published><ns2:status>Fixed</ns2:status><ns2:owner>
			<ns2:uri>/u/105821748722532785568/</ns2:uri><ns2:username>b...@google.com</ns2:username></ns2:owner><ns2:state>closed</ns2:state><ns0:title>dup and possibly dup2 syscall</ns0:title><ns2:label>Type-Enhancement</ns2:label><ns2:label>Pri-2</ns2:label><ns2:label>Component-TCB</ns2:label><ns2:label>OS-All</ns2:label><ns2:label>Arch-All</ns2:label><ns2:label>Milestone-Caviar</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/1016/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=1016" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/1016" rel="self" type="application/atom+xml" /><ns2:stars>2</ns2:stars><ns2:closedDate>2011-03-22T21:52:27.000Z</ns2:closedDate><ns2:id>1016</ns2:id></ns0:entry>