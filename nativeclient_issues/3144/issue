<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;A0ECRH47eCl7ImA9WhNXFkk.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/3144</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">Currently the ARM validator allows modifying the stack pointer (sp) with an instruction sequence like the following:

  mov sp, r0
  bic sp, sp, #0xc0000000

This means sp can temporarily point outside the bottom 1GB (the sandbox address space).

This is problematic because an asynchronous signal handler might be invoked while sp points outside the bottom 1GB.

Normally, on Linux, the signal handler will run on the stack we set up using sigaltstack().  However, there is a corner case.  Suppose we set address range X to Y as our sigaltstack() range.  Normally, Linux resets 'sp' to Y when invoking the signal handler, so the signal handler's stack starts at address Y.  However, if 'sp' points within the range X..Y when the signal occurs, Linux invokes the signal handler without modifying 'sp' rather than resetting 'sp' to Y.

This means untrusted code could cause the signal handler to run out of stack and crash.

We implement thread suspension using asynchronous signals on Linux.  In the future, we might expose thread suspension to untrusted code, which would expose this ARM sandbox problem.  This would allow untrusted code to probe trusted address space to determine where the signal stack is located.

A similar problem occurs with NaCl on x86-32 Linux: see issue 2397.  I would prefer not to replicate the problem on ARM, though, because it's avoidable on ARM.

I propose that we don't allow 'sp' to be temporarily set to values &amp;gt;1GB but instead use an instruction like this to set 'sp':

  bic sp, r0, #0xc0000000

(Note that the ARM validator already allows this.)

The main impact of this would be that sp adjustments in function prologues and epilogues would have to use a temporary register.  Instead of:

  sub sp, sp, #8
  bic sp, sp, #0xc0000000

you'd use:

  sub r12, sp, #8
  bic sp, r12, #0xc0000000

I suspect the impact of this will be low since scratch registers are readily available in function prologues and epilogues.

Currently PNaCl will generate the following epilogue for a function that uses alloca():

  sub sp, fp, #16
  bic sp, sp, #0xc0000000
  pop {r4, r5, r6, r7, fp}

This would have to change to something like:

  sub fp, fp, #16
  bic sp, fp, #0xc0000000
  pop {r4, r5, r6, r7, fp}

Aside from these cases, note that:

 * &amp;quot;ldr sp, [rN]&amp;quot; does not get generated in practice.
 * &amp;quot;pop {... sp ...}&amp;quot; is not allowed because it is &amp;quot;unpredictable&amp;quot;.
</ns0:content><ns0:updated>2012-12-04T19:34:25.000Z</ns0:updated><ns0:published>2012-11-14T20:34:57.000Z</ns0:published><ns2:status>New</ns2:status><ns2:cc>
			<ns2:uri>/u/109636895838879576326/</ns2:uri><ns2:username>j...@chromium.org</ns2:username></ns2:cc><ns2:state>open</ns2:state><ns0:title>ARM: Temporary "sp &gt; 1GB" condition can cause out-of-stack in Linux signal handler</ns0:title><ns2:label>Type-Defect</ns2:label><ns2:label>Pri-3</ns2:label><ns2:label>Component-TCB</ns2:label><ns2:label>Arch-ARM</ns2:label><ns2:label>OS-Linux</ns2:label><ns2:label>FaultHandler</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/3144/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=3144" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/3144" rel="self" type="application/atom+xml" /><ns2:stars>1</ns2:stars><ns2:id>3144</ns2:id></ns0:entry>