<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CkIFSX47eCl7ImA9WhRRF0o.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/2235/comments/full/2</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">Also, for x86-64 Windows, there should not be a problem, at least for the stack unwinding done by Windows Structured Exception Handling (SEH), which is used for C++ exceptions and hardware exceptions.  The stack unwinder uses runtime unwind info, and there is no fixed frame pointer register, so a register will only be treated as a frame pointer if specified as such in the unwind info.  Any problems here should have been fixed under issue 2414.
</ns0:content><ns0:updated>2011-12-01T20:15:18.000Z</ns0:updated><ns0:published>2011-12-01T20:15:18.000Z</ns0:published><ns2:updates /><ns0:title>Comment 2 by mseaborn@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2235#c2" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/2235/comments/full/2" rel="self" type="application/atom+xml" /></ns0:entry>