<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CkIFSX47eCl7ImA9WhRRF0o.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/2235</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">nacl_syscall_32.S and nacl_syscall_64.S save %ebp/%rbp, but they do not set it, which means that the trusted NaCl syscall code runs with a frame pointer supplied by untrusted code.

This could potentially cause a stack walker (such as the glibc code that generates a stack backtrace on a bad free() call) to read data in untrusted address space.  The stack walker might do something bad as a result.

This is probably not exploitable, but it doesn't seem like a good idea to have trusted code run with the untrusted frame pointer value.
</ns0:content><ns0:updated>2011-12-01T20:15:18.000Z</ns0:updated><ns0:published>2011-09-06T21:40:57.000Z</ns0:published><ns2:status>New</ns2:status><ns2:owner>
			<ns2:uri>/u/mseaborn@chromium.org/</ns2:uri><ns2:username>mseaborn@chromium.org</ns2:username></ns2:owner><ns2:state>open</ns2:state><ns0:title>Trusted syscall code runs with frame pointer from untrusted code</ns0:title><ns2:label>Type-Defect</ns2:label><ns2:label>Pri-2</ns2:label><ns2:label>Component-TCB</ns2:label><ns2:label>OS-All</ns2:label><ns2:label>Arch-x86-32</ns2:label><ns2:label>Arch-x86-64</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/2235/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2235" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/2235" rel="self" type="application/atom+xml" /><ns2:stars>1</ns2:stars><ns2:id>2235</ns2:id></ns0:entry>