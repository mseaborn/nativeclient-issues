<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;DkMESH47eCl7ImA9WhdXEE4.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/1084</ns0:id><ns0:author>
			<ns0:name>b...@google.com</ns0:name><ns0:uri>/u/105821748722532785568/</ns0:uri></ns0:author><ns0:content type="html">Classified for BalticSea assuming dynamic code will not be turned on until then.

NCCopyCode, which called from NaClCopyCode which is called from NaClTextSysDynCode_Modify, uses NCDecodeSegmentPair to ensure that the old and new instructions in a replacement instruction buffer are in-registration, that is, instructions extracted from the new and old buffers in turn have the same lengths.  Unfortunately, NCDecodeSegmentPair is a void function, and when it detects de-registration, just invokes ErrorSegmentation which in turn invokes an error handler through the global g_SegFault, which should be set via NCDecodeRegisterCallbacks.  the default value of g_SegFault is NullDecoderStats -- a statistic gathering function, not one that causes an abort.  So we're gathering a statistic that's not probably useful, since it's dynamically inserted code.  Worse, we're not actually doing anything with the error.

Luckily, after invoking ErrorSegmentation, NCDecodeSegmentPair just stops copying instructions, so there does not appear to be an actual security problem.  However, it's a usability problem:  the instructions are partially modified, without any error indication.  Granted, user code can just look at the destination instruction memory to be sure that the code modification has succeeded, but that's crufty, especially the syscall will have returned 0, indicating success.  (Granted, dynamic code generators should never have generated de-registered replacement code in the first place, and very few programmers will be affected since dynamic code modification is a rarely used interface.)</ns0:content><ns0:updated>2011-08-22T17:33:29.000Z</ns0:updated><ns0:published>2010-10-23T02:26:37.000Z</ns0:published><ns2:status>Available</ns2:status><ns2:owner>
			<ns2:uri>/u/elijahtaylor@google.com/</ns2:uri><ns2:username>elijahtaylor@google.com</ns2:username></ns2:owner><ns2:state>open</ns2:state><ns0:title>dynamic code modification does not report errors when instructions are de-registered, just silently stops</ns0:title><ns2:label>Type-Defect</ns2:label><ns2:label>Pri-2</ns2:label><ns2:label>Component-TCB</ns2:label><ns2:label>OS-All</ns2:label><ns2:label>Arch-x86-32</ns2:label><ns2:label>Mstone-16</ns2:label><ns2:label>CoreRuntime</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/1084/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=1084" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/1084" rel="self" type="application/atom+xml" /><ns2:stars>1</ns2:stars><ns2:id>1084</ns2:id></ns0:entry>