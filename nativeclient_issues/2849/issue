<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CE8DQn47eCl7ImA9WhVaFk0.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/2849</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">On Windows, we create some trusted memory mappings by doing the following:

 a) Call NaClFindAddressSpace() to allocate a virtual address range X..Y.  This works by mapping and unmapping a chunk of memory.
 b) Map memory into range X..Y in 64k-page-size chunks.

This is not thread-safe because the range X..Y is not kept reserved between steps (a) and (b).  Another thread might get allocated addresses in range X..Y.  This is not insecure, but it might be the source of some test flakiness that we're seeing.

For trusted memory mappings outside of the sandbox address space, step (b) does not need to use 64k chunks.
</ns0:content><ns0:updated>2012-06-13T15:54:33.000Z</ns0:updated><ns0:published>2012-06-13T15:54:33.000Z</ns0:published><ns2:status>Assigned</ns2:status><ns2:owner>
			<ns2:uri>/u/mseaborn@chromium.org/</ns2:uri><ns2:username>mseaborn@chromium.org</ns2:username></ns2:owner><ns2:state>open</ns2:state><ns0:title>Eliminate most calls to NaClFindAddressSpace()</ns0:title><ns2:label>Type-Enhancement</ns2:label><ns2:label>Pri-2</ns2:label><ns2:label>Component-TCB</ns2:label><ns2:label>OS-All</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/2849/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2849" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/2849" rel="self" type="application/atom+xml" /><ns2:stars>1</ns2:stars><ns2:id>2849</ns2:id></ns0:entry>