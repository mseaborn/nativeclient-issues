<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;DkABR347eCl7ImA9Wx9REE8.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/1033/comments/full/4</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">A month or so ago Bennet suggested to me that it would be better for a
NaCl untrusted process to receive arguments via IPC.  So the process
would start off with no args except a socket FD with a well-known
number, which it reads args from.

This seems like a nice idea because it does not overly constrain the
format of arguments, though obviously we can have a standard format
for the standard argc/argv/env/auxv info.  It also means we can
receive descriptors via this mechanism.

So this suggests that a cleaner solution is not to change the trusted
load_module call, but to set up argv via an IPC calling convention in
untrusted code.

Since the NaCl browser plugin does not provide a way to set argv from
Javascript, I am considering using IPC like this for setting up argv
in nacl-glibc in the browser.</ns0:content><ns0:updated>2010-12-10T23:45:56.000Z</ns0:updated><ns0:published>2010-12-10T23:45:56.000Z</ns0:published><ns2:updates>
			<ns2:label>ProcessArgsInit</ns2:label></ns2:updates><ns0:title>Comment 4 by mseaborn@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=1033#c4" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/1033/comments/full/4" rel="self" type="application/atom+xml" /></ns0:entry>