<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CEQGSH47eCl7ImA9WhBbGE4.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/3437/comments/full/2</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">The fault is on the following "vstr":

/s/git2/native_client/tests/spec2k/176.gcc/src/c-iterate.c:401
  128b14:       e320f000        nop     {0}
  128b18:       e320f000        nop     {0}
  128b1c:       ebfd28cb        bl      72e50 &lt;obstack_free&gt;
  128b20:       f2c00010        vmov.i32        d16, #0 ; 0x00000000
  128b24:       e2840075        add     r0, r4, #117    ; 0x75
/s/git2/native_client/tests/spec2k/176.gcc/src/c-iterate.c:403
  128b28:       e3c00103        bic     r0, r0, #-1073741824    ; 0xc0000000
  128b2c:       edc00b00        vstr    d16, [r0]    &lt;---- fault here
/s/git2/native_client/tests/spec2k/176.gcc/src/c-parse.c:2730
  128b30:       e320f000        nop     {0}
  128b34:       e320f000        nop     {0}
  128b38:       e320f000        nop     {0}
  128b3c:       ebffd197        bl      11d1a0 &lt;clear_momentary&gt;
  128b40:       ea0009c6        b       12b260 &lt;yyparse+0x8ba0&gt;
/s/git2/native_client/tests/spec2k/176.gcc/src/stmt.c:2130

This comes from this line in istack_sublevel_to_current():

  ISN_ZERO (sublevel_ixpansions);

where:
#define ISN_ZERO(X) (X).first=(X).last=0

This assigns to two 32-bit pointers, part of this global struct:

struct iter_stack_node
{
  struct ixpansion *first;	/* Head of list of ixpansions */
  struct ixpansion *last;	/* Last node in list  of ixpansions */
  struct iter_stack_node *next; /* Next level iterator stack node  */
};
struct iter_stack_node sublevel_ixpansions;

The front end's IR for this looks fine:
$ pnacl-dis 176.gcc/src/c-iterate.o3.bc
...
@sublevel_ixpansions = global %struct.iter_stack_node zeroinitializer, align 4
...
istack_sublevel_to_current.exit:                  ; preds = %if.else.i, %if.then7.i, %if.end2.i
  store %struct.ixpansion* null, %struct.ixpansion** getelementptr inbounds (%struct.iter_stack_node* @sublevel_ixpansions, i32 0, i32 1), align 4, !tbaa !0
  store %struct.ixpansion* null, %struct.ixpansion** getelementptr inbounds (%struct.iter_stack_node* @sublevel_ixpansions, i32 0, i32 0), align 4, !tbaa !0

In the pexe, the alignment attributes have disappeared from the globals (which is OK since the pointer type implies an alignment of 4), but not the stores:

@sublevel_ixpansions.0 = internal unnamed_addr global %struct.ixpansion* null
@sublevel_ixpansions.1 = internal unnamed_addr global %struct.ixpansion* null
...
  store %struct.ixpansion* null, %struct.ixpansion** @sublevel_ixpansions.1, align 4
  store %struct.ixpansion* null, %struct.ixpansion** @sublevel_ixpansions.0, align 4

The backend turns these two assignments into a single "vstr" of an 8-byte value.  "vstr" requires a 4-byte-aligned address.  The backend's behaviour seems to be valid, so it's FlattenGlobals that is at fault.
</ns0:content><ns0:updated>2013-05-17T23:12:09.000Z</ns0:updated><ns0:published>2013-05-17T23:12:09.000Z</ns0:published><ns2:updates>
			<ns2:status>Assigned</ns2:status><ns2:ownerUpdate>mseaborn@chromium.org</ns2:ownerUpdate></ns2:updates><ns0:title>Comment 2 by mseaborn@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=3437#c2" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/3437/comments/full/2" rel="self" type="application/atom+xml" /></ns0:entry>