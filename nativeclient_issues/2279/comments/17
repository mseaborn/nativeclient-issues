<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CkEARn47eCl7ImA9WhdUEE8.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/2279/comments/full/17</ns0:id><ns0:author>
			<ns0:name>pdox%goo...@gtempaccount.com</ns0:name><ns0:uri>/u/104735739662288482898/</ns0:uri></ns0:author><ns0:content type="html">Well, llvm-gcc is deprecated. So we should definitely switch to Clang if we can.

We can make DragonEgg and Clang ABI compatible, so there shouldn't be issues with incompatibilities.

If we want to support both Clang and DragonEgg going forward, it may make sense to run the tests with both, but only choose one to use for compiling the libraries. Duplicating the entire toolchain would guarantee better testing coverage for both compilers, but it would also increase our testing burden significantly, and possibly hide compatibility issues.</ns0:content><ns0:updated>2011-09-26T07:04:07.000Z</ns0:updated><ns0:published>2011-09-26T07:04:07.000Z</ns0:published><ns2:updates /><ns0:title>Comment 17 by pdox%goo...@gtempaccount.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2279#c17" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/2279/comments/full/17" rel="self" type="application/atom+xml" /></ns0:entry>