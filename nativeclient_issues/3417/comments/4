<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CUADR347eCl7ImA9WhBUFUw.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/3417/comments/full/4</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">I think it's OK for "unreachable" to have undefined behaviour.  This is similar to the undefined behaviour you get when using a bad pointer:  a bad memory access might wrap (under the ARM sandbox) and behave unpredictably, or produce a fail-safe fault, and bad function pointers could do anything.  While "unreachable" *could* fall through to another basic block (or function) that happens to let the program work, this seems unlikely to be predictable enough that developers will depend on it.

Maybe we could get the backend to output a HLT for "unreachable", rather than doing this in the IR, but not make this an ABI requirement?</ns0:content><ns0:updated>2013-05-02T16:56:16.000Z</ns0:updated><ns0:published>2013-05-02T16:56:16.000Z</ns0:published><ns2:updates /><ns0:title>Comment 4 by mseaborn@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=3417#c4" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/3417/comments/full/4" rel="self" type="application/atom+xml" /></ns0:entry>