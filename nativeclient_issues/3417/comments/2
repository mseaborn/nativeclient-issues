<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;Ck4BRX47eCl7ImA9WhBUE0s.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/3417/comments/full/2</ns0:id><ns0:author>
			<ns0:name>jvo...@google.com</ns0:name><ns0:uri>/u/102292187274959663599/</ns0:uri></ns0:author><ns0:content type="html">This can have some implications on the backend optimizations (http://nondot.org/sabre/LLVMNotes/UnreachableInstruction.txt):

"This new, simple, instruction can be used to solve the problems described
above.  In particular, a front-end or analysis that knows that a function
cannot return normally can place 'unreachable' instructions after any calls to 
the no-return function.  In the case of the loop above, the unreachable
instruction would replace the unconditional branch exiting the if condition, 
which would indicate to the natural loop analyzer that the if block is not 
actually part of the loop, and would lead to better register allocation."</ns0:content><ns0:updated>2013-04-30T22:29:14.000Z</ns0:updated><ns0:published>2013-04-30T22:29:14.000Z</ns0:published><ns2:updates /><ns0:title>Comment 2 by jvo...@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=3417#c2" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/3417/comments/full/2" rel="self" type="application/atom+xml" /></ns0:entry>