<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;Ck8GSH47eCl7ImA9Wx5TFEk.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/656</ns0:id><ns0:author>
			<ns0:name>euge...@google.com</ns0:name><ns0:uri>/u/101600367715055138223/</ns0:uri></ns0:author><ns0:content type="html">SVN r2580, Linux 2.6.24
nacl64-gcc (GCC) 4.4.3 20100601 (Native Client r2397)

The following issue was discovered when running NaCl tests under Valgrind.

When pthread_create is called to create a detachable thread, the child thread can exit before pthread_create gets control back from NACL_SYSCALL(thread_create). In that case, the child thread basic data is already deallocated in pthread_exit(), and new_basic_data-&amp;gt;thread_id at nc_thread.c:460 references an undefined memory location.

Also, pthread_exit() decremented __nc_running_threads_counter and, for some time until pthread_create increments it back, it is one less than the actual number of threads.

The following is the relevant part of a memcheck report for thread_test:

TestManyThreadsDetached:183:0: Start
==17989== Thread 2:
==17989== Invalid read of size 4
==17989==    at 0xB00028268: pthread_create /tmp/nativeclient/native_client/src/untrusted/pthread/nc_thread.c:460
==17989==    by 0xB0002437F: CreateDetached /tmp/nativeclient/native_client/tests/threads/thread_test.c:116
==17989==    by 0xB0002453F: TestManyThreadsDetached /tmp/nativeclient/native_client/tests/threads/thread_test.c:188
==17989==    by 0xB0002479F: main /tmp/nativeclient/native_client/tests/threads/thread_test.c:628
==17989==  Address 0xb00602dd8 is 0 bytes inside a block of size 36 free'd
==17989==    at 0xB0002B318: free /tmp/nativeclient/native_client/src/untrusted/valgrind/valgrind_interceptors.c:165
==17989==    by 0xB00027A9F: pthread_exit /tmp/nativeclient/native_client/src/untrusted/pthread/nc_thread.c:225
==17989==    by 0xB0002ADBF: nc_thread_starter /tmp/nativeclient/native_client/src/untrusted/valgrind/valgrind_interceptors.c:256
</ns0:content><ns0:updated>2010-07-29T22:00:29.000Z</ns0:updated><ns0:published>2010-06-29T07:03:18.000Z</ns0:published><ns2:status>Fixed</ns2:status><ns2:owner>
			<ns2:uri>/u/114685308157308201595/</ns2:uri><ns2:username>grego...@google.com</ns2:username></ns2:owner><ns2:cc>
			<ns2:uri>/u/101628056640429344673/</ns2:uri><ns2:username>pa...@google.com</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/101600367715055138223/</ns2:uri><ns2:username>euge...@google.com</ns2:username></ns2:cc><ns2:state>closed</ns2:state><ns0:title>Read after free in pthread_create (untrusted) for detachable threads, and possibly more</ns0:title><ns2:label>Type-Defect</ns2:label><ns2:label>Pri-2</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/656/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=656" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/656" rel="self" type="application/atom+xml" /><ns2:stars>3</ns2:stars><ns2:closedDate>2010-07-29T22:00:29.000Z</ns2:closedDate><ns2:id>656</ns2:id></ns0:entry>