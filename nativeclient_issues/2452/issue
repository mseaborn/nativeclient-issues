<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;A08MSX47eCl7ImA9WhVTEE4.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/2452</ns0:id><ns0:author>
			<ns0:name>pdox%goo...@gtempaccount.com</ns0:name><ns0:uri>/u/104735739662288482898/</ns0:uri></ns0:author><ns0:content type="html">The evidence is mounting that it was a mistake to make the newlib and glibc toolchains separate.

* There is only one sandboxed translator which is going to ship with Chrome. It doesn't make sense to build two different versions. The one built with the GLibC toolchain has never been tested, and is not going to be the version shipped (at least initially). It makes sense to run GlibC sandboxed-translator tests using the newlib-built translator.

* The two toolchains are identical in the most expensive (time-consuming) components: binutils, LLVM, Clang, and the sandboxed translator. The only significant difference between them are the libraries and the driver settings. This means that combining the two builds together would only marginally increase the build time above the newlib toolchain alone.

* Having separate builds makes it twice as expensive to build and test both toolchains locally. Nobody really wants/remembers to do this, so as a result, there are more failures detected post-commit.

** The proposal **

1) Combine both toolchains together into one base directory, e.g., toolchain/pnacl_linux_x86_64/

2) Create two subdirectories to contain the libraries and driver. The new layout inside the toolchain would look like:

newlib/bin/ [newlib-enabled driver]
newlib/lib  [bitcode]
newlib/lib-x86-32
newlib/lib-x86-64
newlib/lib-arm

glibc/bin/  [glibc-enabled driver]
glibc/lib  [bitcode]
glibc/lib-x86-32
glibc/lib-x86-64

3) Get rid of the GlibC PNaCl buildbot, and allocate the VM to the primary toolchain builder. (This will more than compensate for the added build time).

4) Optionally: bin/ (without a library-mode prefix) could be made to contain a &amp;quot;hybrid&amp;quot; driver, which uses newlib when -static is given, and GlibC otherwise. This is kind of unusual, but it also kind of makes sense. We won't be able to support GlibC static for a while (until we can compile GlibC to bitcode), and Newlib doesn't support shared/dynamic. Combined, they make a &amp;quot;complete&amp;quot; toolchain.
</ns0:content><ns0:updated>2012-02-23T23:31:28.000Z</ns0:updated><ns0:published>2011-11-17T10:08:26.000Z</ns0:published><ns2:status>Fixed</ns2:status><ns2:owner>
			<ns2:uri>/u/104735739662288482898/</ns2:uri><ns2:username>pdox%goo...@gtempaccount.com</ns2:username></ns2:owner><ns2:cc>
			<ns2:uri>/u/krasin@google.com/</ns2:uri><ns2:username>krasin@google.com</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/104270846665912603141/</ns2:uri><ns2:username>dsch...@google.com</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/102292187274959663599/</ns2:uri><ns2:username>jvo...@google.com</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/110605953789916471800/</ns2:uri><ns2:username>jasonw...@google.com</ns2:username></ns2:cc><ns2:state>closed</ns2:state><ns0:title>Integrate PNaCl newlib and GlibC toolchains</ns0:title><ns2:label>Type-Defect</ns2:label><ns2:label>Pri-2</ns2:label><ns2:label>Component-PNaCl</ns2:label><ns2:label>OS-All</ns2:label><ns2:label>Arch-All</ns2:label><ns2:label>Mstone-X</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/2452/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2452" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/2452" rel="self" type="application/atom+xml" /><ns2:stars>3</ns2:stars><ns2:closedDate>2012-02-23T23:31:28.000Z</ns2:closedDate><ns2:id>2452</ns2:id></ns0:entry>