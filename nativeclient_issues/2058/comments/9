<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;Ak4HQn47eCl7ImA9WhdSEks.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/2058/comments/full/9</ns0:id><ns0:author>
			<ns0:name>mcgra...@chromium.org</ns0:name><ns0:uri>/u/109286297231979736865/</ns0:uri></ns0:author><ns0:content type="html">Making the whole _reent structure per-thread is what I was calling "insane".
This morning I had a guess about what might have motivated, but evidently I was wrong.

It's incorrect (and perhaps insane ;-) to make stdin/stdout/stderr be per-thread.
However, it's correct that errno be per-thread.  So it occurred to me to suspect that this was the intent behind these changes.  So while it's almost certainly correct to change back to _reent having a single, shared instance for all threads, we don't want to regress on having a per-thread errno.  That is accomplished very simply by just having a plain __thread variable for errno, and making the __errno() function return its address.</ns0:content><ns0:updated>2011-07-21T17:22:13.000Z</ns0:updated><ns0:published>2011-07-21T17:22:13.000Z</ns0:published><ns2:updates /><ns0:title>Comment 9 by mcgra...@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2058#c9" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/2058/comments/full/9" rel="self" type="application/atom+xml" /></ns0:entry>