<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;C0UGRX47eCl7ImA9WhdSEko.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/2058/comments/full/13</ns0:id><ns0:author>
			<ns0:name>pa...@google.com</ns0:name><ns0:uri>/u/101628056640429344673/</ns0:uri></ns0:author><ns0:content type="html">I am not sure how deep the insanity is.  _REENT aka _impure_ptr is per-thread in newlib by design.

Extract from newlib porting guide:
=== begin ===
Reentrancy is achieved by providing a global reentrancy structure, struct _reent for each thread of control, which holds thread specific versions of global data structures, such as errno.

[...]

There are two ways in which the end user can be supported with these reentrancy functions. In the first it is up to the user to manage per thread reentrancy data structures and to call the reentrant functions explicitly.

However the more powerful solution is for the system to manage the reentrancy structure itself. The end user can call the standard functions, and they will be mapped to reentrant calls, passing in a reentrancy structure for the thread.
=== end ===
</ns0:content><ns0:updated>2011-07-21T18:00:24.000Z</ns0:updated><ns0:published>2011-07-21T18:00:24.000Z</ns0:published><ns2:updates /><ns0:title>Comment 13 by pa...@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2058#c13" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/2058/comments/full/13" rel="self" type="application/atom+xml" /></ns0:entry>