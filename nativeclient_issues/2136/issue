<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;A0UBQH47eCl7ImA9WhdQF0o.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/2136</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">This is a very similar problem to issue 1027.

Suppose we have a test program which repeatedly creates a thread and pthread_join()s it.

Suppose I insert a sleep into NaClSysCommonThreadSuicide() before NaClAppThreadDtor().

Then the test program will fail after 8192 threads (even on x86-64):

...
creating thread 8190
creating thread 8191
[9474,2411669248:10:12:05.050861] NaClAllocateThreadIdx: no more slots for a thread
[9474,2411669248:10:12:05.050890] NaClTlsAllocate: no more slots for a thread
[9474,2411669248:10:12:05.050899] No tls for thread, num_thread 1
[9474,2411669248:10:12:05.050908] NaClCreateAdditionalThread: could not allocate thread index.  Returning EAGAIN per POSIX specs.

The problem is that the untrusted pthread_join() returns before the trusted NaClAppThread is freed and NaClTlsFree() is called.

Part of the problem is that NaClCommonSysThreadExit() marks the untrusted thread as exited before NaClTlsFree() is called.  Due to differences in the nacl-newlib/nacl-glibc pthread implementations, this matters with nacl-glibc but not nacl-newlib.

We could address this by reordering the thread exit code, but I think it's better to fix all the exit/join race conditions by implementing syscalls for joinable threads (see issue 1027).
</ns0:content><ns0:updated>2011-08-19T18:40:51.000Z</ns0:updated><ns0:published>2011-08-05T18:58:09.000Z</ns0:published><ns2:status>Assigned</ns2:status><ns2:owner>
			<ns2:uri>/u/mseaborn@chromium.org/</ns2:uri><ns2:username>mseaborn@chromium.org</ns2:username></ns2:owner><ns2:state>open</ns2:state><ns0:title>Race condition in thread exit+join can exhaust TLS indexes</ns0:title><ns2:label>Type-Defect</ns2:label><ns2:label>Pri-2</ns2:label><ns2:label>Component-TCB</ns2:label><ns2:label>OS-All</ns2:label><ns2:label>Arch-All</ns2:label><ns2:label>ThreadJoinRace</ns2:label><ns2:label>Mstone-15</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/2136/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2136" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/2136" rel="self" type="application/atom+xml" /><ns2:stars>1</ns2:stars><ns2:id>2136</ns2:id></ns0:entry>