<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;AkQDQH47eCl7ImA9WhFTGEU.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/1244</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">This is split out from issue 562 to specify a particular solution.

To port glibc's libpthread we implemented a (partial) emulation for
Linux's futex() syscall in untrusted code.  This fixes the problem
that NaCl's old pthread_mutex() does a NaCl syscall even in the
uncontended case (issue 562).  So the futex emulation should perform
better in most cases.

However, it is not ideal for performance:

 * It uses a simple linked list of waiters that takes linear time to
   search so could be slow if there are many waiting threads.
   (This could be improved in untrusted code.)

 * It has to do 3 NaCl syscalls for every contended lock or unlock.
    * futex wait:  mutex_lock, cond_wait, mutex_unlock
    * futex wake:  mutex_lock, cond_signal, mutex_unlock

In the long term it would be good to put futex support into the TCB,
as described in issue 562.  This can improve performance:

 * lock/unlock involve fewer NaCl syscalls;
 * it can make better use of host OS facilities, such as Linux's
   futexes (provided we use FUTEX_PRIVATE to avoid interacting with
   MAP_SHARED which is hard to make portable).

It would let us remove the old syscalls eventually.</ns0:content><ns0:updated>2013-06-10T18:19:31.000Z</ns0:updated><ns0:published>2010-12-10T23:01:05.000Z</ns0:published><ns2:status>Available</ns2:status><ns2:cc>
			<ns2:uri>/u/112873510090665368075/</ns2:uri><ns2:username>k...@google.com</ns2:username></ns2:cc><ns2:state>open</ns2:state><ns0:title>Implement a futex syscall for Native Client</ns0:title><ns2:label>Type-Defect</ns2:label><ns2:label>Pri-3</ns2:label><ns2:label>Component-TCB</ns2:label><ns2:label>OS-All</ns2:label><ns2:label>Arch-All</ns2:label><ns2:label>Component-GLibC</ns2:label><ns2:label>Mstone-X</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/1244/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=1244" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/1244" rel="self" type="application/atom+xml" /><ns2:stars>4</ns2:stars><ns2:blockedOn>
			<ns2:id>3484</ns2:id><ns2:project>nativeclient</ns2:project></ns2:blockedOn><ns2:id>1244</ns2:id></ns0:entry>