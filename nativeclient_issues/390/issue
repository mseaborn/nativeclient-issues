<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;DEEMRn47eCl7ImA9WxFTEEg.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/390</ns0:id><ns0:author>
			<ns0:name>bradc...@google.com</ns0:name><ns0:uri>/u/110304265766688778552/</ns0:uri></ns0:author><ns0:content type="html">5. RIP-relative Addressing Vulnerability

File: trusted/validator_x86/nc_inst_trans.c
Function: NaClAppendMod00EffectiveAddress
Problem Type: Illegal Memory Access (Write)
Compromise Type: NaCL sandbox compromise
Severity: High

When decoding ModRM bytes that have no base, and just a 32-bit displacement
(ie. the mod field is 00 and the r/m field is 5), the effective address is
calculated as [RIP + disp32]. Such addresses are always considered legal by
the validator (by NaClIsValidMemOffset, which is called by
NaClStoreValidator), since they should always point within the Native
Client application's address space. However, if the address-size prefix
(0x67) is prepended to any store instruction using RIP-relative addressing,
the resultant effective address will be truncated to 32-bits. Since no
allowance is made for this prefix when parsing RIP-relative addresses, the
store will be considered valid and the application may store bytes at
arbitrary locations in the lowest 4G of memory in the address space.

6. RBP Base Register Vulnerability

File: trusted/validator_x86/nc_inst_trans.c
Function: NaClGetSibBase
Problem Type: Illegal Memory Access (Write)
Compromise Type: NaCL sandbox compromise
Severity: High

Certain ModRM/SIB encodings of instructions with the operand [rbp + &amp;lt;disp&amp;gt;]
and [r13 + &amp;lt;disp&amp;gt;] are vulnerable to a truncation issue similar to the
previously described RIP-relative addressing issue. Specifically, when a
ModRM byte indicates an SIB byte and a displacement follows (ie. the mod
field is 1 or 2 and the r/m field is 4), then the address calculated will
be RBP (or R13 if a REX prefix is present and REX.B is set) + &amp;lt;disp&amp;gt;. [RBP
+ disp] are considered legal stores by the validator since RBP is a
protected register. [R13 + disp] could also be legal if it was part of one
of the multi-sequences allowed by the store validator. However, when an
address-size operand prefix is used, this address will be truncated to
32-bits. Since NaClGetSibBase() manually sets the base to the 64-bit
RBP/R13 register, this truncation will be ignored. Since stores relative to
RBP are considered legal, this allows an application to write to arbitrary
locations in the lowest 4G of the process address space.</ns0:content><ns0:updated>2010-03-31T17:31:27.000Z</ns0:updated><ns0:published>2010-03-29T18:42:33.000Z</ns0:published><ns2:status>Fixed</ns2:status><ns2:owner>
			<ns2:uri>/u/108470876877739532758/</ns2:uri><ns2:username>kschi...@google.com</ns2:username></ns2:owner><ns2:cc>
			<ns2:uri>/u/105821748722532785568/</ns2:uri><ns2:username>b...@google.com</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/110304265766688778552/</ns2:uri><ns2:username>bradc...@google.com</ns2:username></ns2:cc><ns2:state>closed</ns2:state><ns0:title>[MD audit] Additional x86-64 Validator Defects</ns0:title><ns2:label>Type-Defect</ns2:label><ns2:label>Pri-0</ns2:label><ns2:label>OS-All</ns2:label><ns2:label>Milestone-Chromium-5</ns2:label><ns2:label>Component-TrustedRT</ns2:label><ns2:label>Arch-x86-64</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/390/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=390" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/390" rel="self" type="application/atom+xml" /><ns2:stars>2</ns2:stars><ns2:closedDate>2010-03-31T17:31:27.000Z</ns2:closedDate><ns2:id>390</ns2:id></ns0:entry>