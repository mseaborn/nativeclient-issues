<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CkEBRn47eCl7ImA9WhNXFUQ.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/3117</ns0:id><ns0:author>
			<ns0:name>j...@chromium.org</ns0:name><ns0:uri>/u/109636895838879576326/</ns0:uri></ns0:author><ns0:content type="html">We want to prevent the attacker from being able to guess where the TCB is mapped, especially since we only have 32-bits of address space on ARM, and currently only 0xC0000000 is trusted address space. There are currently two information leaks that are API-breaking than an attacker could use to guess where the TCB is located:

&lt;b&gt;1.&lt;/b&gt;
We allow (but currently never generate with PNaCl or GCC) loads and stores to be made conditional and preceded by a TST instruction that makes sure that they're not in trusted address space. This will insert addresses into the TLB for A7 and Apollo CPUs (but not A8/A9/A15, unknown for non-ARM chips e.g. Qualcomm), even if the TST fails and the load/store don't execute. An attacker could just loop over the entire trusted address space and time loop load/store from each page to see if a valid address was added to the TLB (in the case of unmapped trusted addresses the segfault gets squashed because the TST fails, so the speculative load/store doesn't fault and there's no address added to the TLB, forcing page table walks every time).

&lt;b&gt;2.&lt;/b&gt;
We don't force prefetch (PLD, PLDW, PLI) addresses to be masked with BIC, an attacker can observe cache timing after prefetching TCB addresses.


I would change the validator to disallow the TST+load/store sequence. PNaCl and GCC never generate these, and we can turn it back on later for PNaCl on ARM platform for which we know that there is no information leak.

I would change the validator to require prefetches' addresses to be masked (note: prefetches are always unconditional). I don't think that PNaCl or GCC generate them at the moment, but I'm not certain.</ns0:content><ns0:updated>2012-12-04T03:10:57.000Z</ns0:updated><ns0:published>2012-10-30T00:18:37.000Z</ns0:published><ns2:status>Fixed</ns2:status><ns2:owner>
			<ns2:uri>/u/109636895838879576326/</ns2:uri><ns2:username>j...@chromium.org</ns2:username></ns2:owner><ns2:cc>
			<ns2:uri>/u/105821748722532785568/</ns2:uri><ns2:username>b...@google.com</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/110547710856190289770/</ns2:uri><ns2:username>s...@chromium.org</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/dschuff@chromium.org/</ns2:uri><ns2:username>dschuff@chromium.org</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/108470876877739532758/</ns2:uri><ns2:username>kschi...@google.com</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/jvoung@chromium.org/</ns2:uri><ns2:username>jvoung@chromium.org</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/112264824292994369940/</ns2:uri><ns2:username>eli...@chromium.org</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/109286297231979736865/</ns2:uri><ns2:username>mcgra...@chromium.org</ns2:username></ns2:cc><ns2:state>closed</ns2:state><ns0:title>Prevent TCB address leak</ns0:title><ns2:label>Type-Defect</ns2:label><ns2:label>Mstone-25</ns2:label><ns2:label>Pri-1</ns2:label><ns2:label>Component-TCB-Validator</ns2:label><ns2:label>OS-All</ns2:label><ns2:label>Arch-ARM</ns2:label><ns2:label>Security</ns2:label><ns2:label>Component-GCC</ns2:label><ns2:label>Component-PNaCl</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/3117/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=3117" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/3117" rel="self" type="application/atom+xml" /><ns2:stars>2</ns2:stars><ns2:closedDate>2012-12-03T22:44:53.000Z</ns2:closedDate><ns2:id>3117</ns2:id></ns0:entry>