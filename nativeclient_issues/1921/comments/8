<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;A0QFSX47eCl7ImA9WhdSF0U.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/1921/comments/full/8</ns0:id><ns0:author>
			<ns0:name>b...@google.com</ns0:name><ns0:uri>/u/105821748722532785568/</ns0:uri></ns0:author><ns0:content type="html">we need to obtain a guarantee from the host environment that the file that serves as the backing store of the mmap is immutable.  otherwise a file access problem turns into a full-scale sandbox escape.

this should *not* be enabled/implemented unless we can obtain such a guarantee.

the current primary drivers for shared objects are for:

- reducing code download bandwidth / latency
- support for LGPL compliance

and while reducing memory pressure would also be nice, that's secondary to maintaining security.</ns0:content><ns0:updated>2011-07-27T17:55:18.000Z</ns0:updated><ns0:published>2011-07-27T17:55:18.000Z</ns0:published><ns2:updates /><ns0:title>Comment 8 by b...@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=1921#c8" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/1921/comments/full/8" rel="self" type="application/atom+xml" /></ns0:entry>