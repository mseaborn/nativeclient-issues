<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;AkYDRn47eCl7ImA9WhVWGEQ.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/2755/comments/full/4</ns0:id><ns0:author>
			<ns0:name>jvo...@google.com</ns0:name><ns0:uri>/u/102292187274959663599/</ns0:uri></ns0:author><ns0:content type="html">Looks like for i386 and le32, clang currently uses "byval" for transparent unions.  See the FIXME in:

clang/test/CodeGen/transparent-union.c

For x86_64 it does not use byval.

clang -target x86_64-unknown-unknown -emit-llvm -S pnacl/src/clang/test/CodeGen/transparent-union.c -o - | grep "call"

  call void @f0(i8* %4)

vs

clang -target le32-unknown-nacl -emit-llvm -S pnacl/src/clang/test/CodeGen/transparent-union.c -o - | grep "call"

  call void @f0(%union.transp_t0* byval %agg.tmp)
</ns0:content><ns0:updated>2012-05-01T18:49:37.000Z</ns0:updated><ns0:published>2012-05-01T18:49:37.000Z</ns0:published><ns2:updates /><ns0:title>Comment 4 by jvo...@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2755#c4" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/2755/comments/full/4" rel="self" type="application/atom+xml" /></ns0:entry>