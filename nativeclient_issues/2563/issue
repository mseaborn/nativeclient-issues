<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;Dk8GRH47eCl7ImA9WhJUGU8.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/2563</ns0:id><ns0:author>
			<ns0:name>ncb...@google.com</ns0:name><ns0:uri>/u/100032148147647801554/</ns0:uri></ns0:author><ns0:content type="html">The bug is confirmed for x86-64, and I am pretty sure it affects x86-32 too.

Dynamic code replacement only validates instructions that have changed, and remembers the instruction boundaries for instructions that have not changed.  Because unchanged instructions are not validated, the &amp;quot;internal&amp;quot; instructions of super instructions are not marked as invalid jump targets.  This means that a modified direct call can target any unmodified instruction, which in turn allows a jump to any address.  This is a NaCl sandbox escape.


A simple, non-executable example of an &amp;quot;unsafe&amp;quot; chunk of code that can be injected with dynamic code modification:

        .p2align 5
exploit_chunk_original:
exploit_ok:
        andl $0xffffffe0,%r11d
        addq %r15,%r11
        jmpq *%r11
        call exploit_ok
exploit_chunk_original_end:

        .p2align 5
exploit_chunk_modified:
        andl $0xffffffe0,%r11d
        addq %r15,%r11
exploit_awful:
        jmpq *%r11
        call exploit_awful
exploit_chunk_modified_end:
.text
</ns0:content><ns0:updated>2012-09-17T23:33:45.000Z</ns0:updated><ns0:published>2012-01-27T01:30:16.000Z</ns0:published><ns2:status>Fixed</ns2:status><ns2:owner>
			<ns2:uri>/u/100032148147647801554/</ns2:uri><ns2:username>ncb...@google.com</ns2:username></ns2:owner><ns2:cc>
			<ns2:uri>/u/100032148147647801554/</ns2:uri><ns2:username>ncb...@google.com</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/elijahtaylor@google.com/</ns2:uri><ns2:username>elijahtaylor@google.com</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/105821748722532785568/</ns2:uri><ns2:username>b...@google.com</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/mseaborn@google.com/</ns2:uri><ns2:username>mseaborn@google.com</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/110304265766688778552/</ns2:uri><ns2:username>bradc...@google.com</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/110000767299935247937/</ns2:uri><ns2:username>jsc...@google.com</ns2:username></ns2:cc><ns2:state>closed</ns2:state><ns0:title>Security: dynamic code modification allows direct calls inside existing super instructions.</ns0:title><ns2:label>Security</ns2:label><ns2:label>Pri-0</ns2:label><ns2:label>Mstone-18</ns2:label><ns2:label>Component-TCB-Validator</ns2:label><ns2:label>OS-All</ns2:label><ns2:label>Arch-x86-64</ns2:label><ns2:label>Arch-x86-32</ns2:label><ns2:label>CoreRuntime</ns2:label><ns2:label>merge-merged-1025</ns2:label><ns2:label>merge-merged-963</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/2563/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2563" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/2563" rel="self" type="application/atom+xml" /><ns2:stars>1</ns2:stars><ns2:closedDate>2012-02-14T01:09:38.000Z</ns2:closedDate><ns2:id>2563</ns2:id></ns0:entry>