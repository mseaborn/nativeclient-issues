<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;DkQHQ347eCl7ImA9WxFWFEo.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/535/comments/full/1</ns0:id><ns0:author>
			<ns0:name>pa...@google.com</ns0:name><ns0:uri>/u/101628056640429344673/</ns0:uri></ns0:author><ns0:content type="html">I don't see a big usecase in the x86-64 space. Though there are some.

1. Whenever an out-of-bounds address is used in a store.

All addresses are 32 bit, a program can suggest an out of bounds address only due to 
a compiler bug or a piece of assembly code.

1.1. Dereferencing a null pointer.

It actually might be useful to fire up a debugger in this case.

2. Whenever an indirect jump/call target is misaligned (including returns within 
untrusted code).

This will be rejected during validation step. Is that a wrong place to trigger such 
error? Maybe it would be useful to print a filename and line number of the point 
where this happened. That would be more useful than catching the same in runtime with 
a debugger.

3. Whenever the service runtime is called with a misaligned return address.

Again, how does debugging provide a better experience than reading validation errors?
Due to a compiler bug or a wrong assembly some indirect jump may become misaligned. 
It would be good to fire up a debugger in this case. But I doubt such cases can 
appear often.</ns0:content><ns0:updated>2010-06-02T10:25:32.000Z</ns0:updated><ns0:published>2010-06-02T10:25:32.000Z</ns0:published><ns2:updates /><ns0:title>Comment 1 by pa...@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=535#c1" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/535/comments/full/1" rel="self" type="application/atom+xml" /></ns0:entry>