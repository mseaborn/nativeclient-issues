<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;D0YMRn47eCl7ImA9WhJUEE4.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/3000/comments/full/4</ns0:id><ns0:author>
			<ns0:name>jvo...@google.com</ns0:name><ns0:uri>/u/102292187274959663599/</ns0:uri></ns0:author><ns0:content type="html">One idea was to encoding "Value IDs" as relative to the instruction number, when writing out and reading in the bitcode files.

E.g., instead of having

%n = cmp %n-1, %n-2, eq
br %bb1, %bb2, %n

you have

%n = cmp 1, 2, eq
br %bb1, %bb2, 1

That gives (a) smaller "ID" values (rather than counting up, you mostly sit around 1, 2), and (b) more duplicate instructions.

Problems: (a) forward references -- mostly with PHI nodes, and (b) common literals like "0" and "1" need to be handled better, (c) this breaks backward compatiblity with old bitcode files, so it's not clear how to upstream this.

Some rough experiments with this gave about 5% benefit to gold's arm.cc file, 13% to the validator_ragel_x86_64.c file, and 8% to dlmalloc.c when comparing the gzipped files. Will need to run experiments with &gt; 1 source file.

</ns0:content><ns0:updated>2012-09-07T16:26:27.000Z</ns0:updated><ns0:published>2012-09-07T16:26:27.000Z</ns0:published><ns2:updates /><ns0:title>Comment 4 by jvo...@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=3000#c4" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/3000/comments/full/4" rel="self" type="application/atom+xml" /></ns0:entry>