<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;A0YHSX47eCl7ImA9WhJVFE4.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/3000/comments/full/3</ns0:id><ns0:author>
			<ns0:name>jvo...@google.com</ns0:name><ns0:uri>/u/102292187274959663599/</ns0:uri></ns0:author><ns0:content type="html">The small nexe vs small pexe comparison, where pexe is better (smaller) than nexe is likely due to nexes having 64KB section padding.

I tried an experiment with Robert's synthetic code generator, which generates a sequence of very similar looking functions, so the opcode mix, and sequencing is exactly the same.

At N = 1, 100, 500, the pexe is still smaller than the nexe (but with a shrinking margin).  At 500, the pexe/nexe are slightly under 2MB.

However, once N = 1000 the pexe (~3.9MB) is bigger than the nexe (~3.4MB).  At N = 2000 the pexe is ~8MB and the nexe is ~7MB.
</ns0:content><ns0:updated>2012-08-31T18:52:18.000Z</ns0:updated><ns0:published>2012-08-31T18:52:18.000Z</ns0:published><ns2:updates /><ns0:title>Comment 3 by jvo...@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=3000#c3" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/3000/comments/full/3" rel="self" type="application/atom+xml" /></ns0:entry>