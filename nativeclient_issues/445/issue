<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CE8GRH47eCl7ImA9WxFREE4.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/445</ns0:id><ns0:author>
			<ns0:name>robe...@google.com</ns0:name><ns0:uri>/u/108771824208521698652/</ns0:uri></ns0:author><ns0:content type="html">some related emails below

====================

From Cliff L. Biffle

	
	
On Mon, Apr 19, 2010 at 12:21 PM, Robert Muth &amp;lt;robertm@google.com&amp;gt; wrote:
&amp;gt; I have the arm c++ stuff to a point where I can link some programs.
&amp;gt; Not surprisingly, I find a bunch of validation issues mostly in the
&amp;gt; exception handling runtime
&amp;gt; contained in libgcc.a.

That actually does surprise me, unless it's inline assembler.

My comments on the ones you didn't explain are below.

&amp;gt; 00047a70 &amp;lt;__gnu_Unwind_Restore_WMMXD&amp;gt;:
&amp;gt;   47a70:       ecf00102        ldfe    f0, [r0], #8    
&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; ????
&amp;gt;   47a74:       ecf01102        ldfe    f1, [r0], #8     &amp;lt;&amp;lt;&amp;lt;&amp;lt; ??
&amp;gt;   47a78:       ecf02102        ldfe    f2, [r0], #8     &amp;lt;&amp;lt;&amp;lt;&amp;lt; ??

In general it'd be helpful if you provided the full validator output.

These instructions manipulate an unknown coprocessor (CP1), and are
deliberately Forbidden.  We currently permit coprocessors 10 and 11
only (VFP/NEON), because I've taken the time to analyze their side
effects for safety.  I haven't put any equivalent effort into the
iWMMX stuff.

Out of curiosity, how did you even get this code produced?  Our
default compile options should skip iWMMX code.

&amp;gt; 00047ac0 &amp;lt;__gnu_Unwind_Save_WMMXD&amp;gt;:
&amp;gt;   47ac0:       ece00102        stfe    f0, [r0], #8    &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;
needs masking

Actually, check the validator reason -- this instruction should be
Forbidden for manipulating CP1.

&amp;gt; 00047b10 &amp;lt;__gnu_Unwind_Restore_WMMXC&amp;gt;:
&amp;gt;   47b10:       fcb08101        ldc2    1, cr8, [r0], #4    &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; ???

Same deal.

&amp;gt; 00047b30 &amp;lt;__gnu_Unwind_Save_WMMXC&amp;gt;:
&amp;gt;   47b30:       fca08101        stc2    1, cr8, [r0], #4    &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; need masking

Same deal.

&amp;gt;   47b68:       e59de040        ldr     lr, [sp, #64]
&amp;gt;   47b6c:       e28dd048        add     sp, sp, #72     ; 0x48           &amp;lt;&amp;lt;&amp;lt;
&amp;gt; kProblemUnsafeDataWrite ????
&amp;gt;   47b70:       e3cee2ff        bic     lr, lr, #-268435441     ; 0xf000000f
&amp;gt;   47b74:       e12fff1e        bx      lr

Any manipulation of SP that doesn't access memory must be followed by
a mask.  Add-immediate is included.

What toolchain generated this code?  This sequence should never be
generated by our backend.

--
Cliff L. Biffle
NaCl Team, Google, Inc.
Reply
	
 

==================================

	
From Robert Muth

Thanks for the clarifications.
(Not sure whether it helps much but the missing validator output is
shown below.)
The code was generated with a new toolchain creator script
based on dennis' c++ work, but the problems were already present in our old
libgcc.a version.

Luckily the  code seems to be constrained to  one file, file
src/llvm-gcc-4.2/gcc/config/arm/libunwind.S,
 which includes &amp;quot;lib1funcs.asm&amp;quot; and hence inherits the &amp;quot;RET macro from
there, which explains
why some functions appear to be partially sandboxed

Robert</ns0:content><ns0:updated>2010-04-23T14:27:05.000Z</ns0:updated><ns0:published>2010-04-21T16:26:41.000Z</ns0:published><ns2:status>Done</ns2:status><ns2:owner>
			<ns2:uri>/u/108771824208521698652/</ns2:uri><ns2:username>robe...@google.com</ns2:username></ns2:owner><ns2:state>closed</ns2:state><ns0:title>more libgcc validation issues</ns0:title><ns2:label>Type-Defect</ns2:label><ns2:label>Arch-ARM</ns2:label><ns2:label>Pri-0</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/445/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=445" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/445" rel="self" type="application/atom+xml" /><ns2:stars>1</ns2:stars><ns2:closedDate>2010-04-23T14:27:05.000Z</ns2:closedDate><ns2:id>445</ns2:id></ns0:entry>