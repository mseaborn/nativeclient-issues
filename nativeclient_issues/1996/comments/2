<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;D0MERX47eCl7ImA9WhdSE0o.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/1996/comments/full/2</ns0:id><ns0:author>
			<ns0:name>bugdro...@chromium.org</ns0:name><ns0:uri>/u/101788990881243245974/</ns0:uri></ns0:author><ns0:content type="html">Commit: 9cd1f7246cd644010b299ad0144365a35f37466d
 Email: bsy@google.com@fcba33aa-ac0c-11dd-b9e7-8d5594d729c2

change x86-64 trampoline to call code in a dispatch code thunk that lives in a dynamically allocated page.  the dispatch code simply jumps to the usual syscall handler address.  the intention of this change is to hide trusted code addresses from the untrusted code, preventing ASLR info leak.

currently we just mmap/VirtualAlloc the page that is used to hold the
dispatch code thunk, and no attempt is made to randomize its location,
so some partial information about the virtual address map is leaked.

there's no need for a functional test, since any existing test that
makes syscalls will exercise the dispatch thunk.  there is no negative
test to ensure that the information leak is closed off, since it is
rather obvious.

BUG= http://code.google.com/p/nativeclient/issues/detail?id=1996
TEST= any existing code that makes syscalls
Review URL: http://codereview.chromium.org/7484021

git-svn-id: svn://svn.chromium.org/native_client/trunk/src/native_client@6185 fcba33aa-ac0c-11dd-b9e7-8d5594d729c2

M	src/trusted/service_runtime/arch/x86_64/sel_ldr_x86_64.c
M	src/trusted/service_runtime/arch/x86_64/tramp_64.S
M	src/trusted/service_runtime/arch/x86_64/tramp_64.h
M	src/trusted/service_runtime/sel_ldr.c
M	src/trusted/service_runtime/sel_ldr.h</ns0:content><ns0:updated>2011-07-22T22:56:44.000Z</ns0:updated><ns0:published>2011-07-22T22:56:44.000Z</ns0:published><ns2:updates /><ns0:title>Comment 2 by bugdro...@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=1996#c2" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/1996/comments/full/2" rel="self" type="application/atom+xml" /></ns0:entry>