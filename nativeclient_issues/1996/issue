<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;DEIHRX47eCl7ImA9WhdSGUo.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/1996</ns0:id><ns0:author>
			<ns0:name>b...@google.com</ns0:name><ns0:uri>/u/105821748722532785568/</ns0:uri></ns0:author><ns0:content type="html">the current x86-64 trampoline code jumps directly to the service runtime syscall handler.  this means that untrusted code can, by reading the trampoline code in its address space, determine the location of the service runtime code.  this means that the x86-64 sandbox leaks information that can render ASLR less effective, so that ROP-style attacks (elsewhere) are easier.  the service runtime's x86-32 code already uses a code thunk to double trampoline so that the service runtime can be compiled as PIC, and the same strategy should be used for x86-64.
</ns0:content><ns0:updated>2011-07-29T21:55:34.000Z</ns0:updated><ns0:published>2011-07-11T20:37:25.000Z</ns0:published><ns2:status>Fixed</ns2:status><ns2:owner>
			<ns2:uri>/u/105821748722532785568/</ns2:uri><ns2:username>b...@google.com</ns2:username></ns2:owner><ns2:state>closed</ns2:state><ns0:title>x86-64 should use a code thunk to double trampoline</ns0:title><ns2:label>Type-Defect</ns2:label><ns2:label>Mstone-14</ns2:label><ns2:label>Pri-0</ns2:label><ns2:label>Component-TCB</ns2:label><ns2:label>OS-All</ns2:label><ns2:label>Arch-x86-64</ns2:label><ns2:label>Security</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/1996/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=1996" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/1996" rel="self" type="application/atom+xml" /><ns2:stars>3</ns2:stars><ns2:closedDate>2011-07-29T21:55:34.000Z</ns2:closedDate><ns2:id>1996</ns2:id></ns0:entry>