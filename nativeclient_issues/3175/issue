<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CkEBRX47eCl7ImA9WhNXEUk.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/3175</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">The &amp;quot;Windows mmap hole race condition problem&amp;quot; (from issue 140) is that NaCl's mmap() syscall temporarily opens a hole in the sandbox address space, and a stray memory allocation by another trusted thread might allocate pages inside this mmap hole.

Currently, we don't prevent this stray allocation from happening.  If a stray allocation happens, NaCl detects it and aborts.  As of issue 140, NaCl suspends untrusted threads while the mmap hole is opened up so that untrusted code cannot read or write a stray allocated page.

A more robust approach would be to prevent these stray allocations from happening in the first place.

We could attempt to do this by wrapping all of the NaCl trusted runtime's memory allocations.  (The wrapper would claim a mutex to prevent allocations while mmap holes are opened up.)  However, that could be a lot of work, and it won't fix memory allocations done by Chromium code or other trusted library code that runs in the same process.

I suggest that we patch the Windows DLL entry points that provide the Windows equivalents of mmap().  I'm not sure of the exact entry points we would need to patch, but it might be the following in NTDLL.DLL:

  NtAllocateVirtualMemory
  NtMapViewOfSection
  NtUnmapViewOfSection
  ZwMapViewOfSection
  ZwUnmapViewOfSection

Chrome's Windows sandbox already patches DLLs to work inside the sandbox; we could reuse this patching code.

Whether this is worthwhile depends on how often NaCl is aborting due to stray allocations in practice.  We don't have much data on this currently.
</ns0:content><ns0:updated>2012-11-28T22:10:54.000Z</ns0:updated><ns0:published>2012-11-28T20:59:50.000Z</ns0:published><ns2:status>New</ns2:status><ns2:cc>
			<ns2:uri>/u/105821748722532785568/</ns2:uri><ns2:username>b...@google.com</ns2:username></ns2:cc><ns2:state>open</ns2:state><ns0:title>Address Windows mmap hole problem by patching NTDLL's mmap calls to claim mutex</ns0:title><ns2:label>Type-Enhancement</ns2:label><ns2:label>Pri-2</ns2:label><ns2:label>Component-TCB</ns2:label><ns2:label>OS-Windows</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/3175/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=3175" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/3175" rel="self" type="application/atom+xml" /><ns2:stars>1</ns2:stars><ns2:id>3175</ns2:id></ns0:entry>