<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;DkcGQX47eCl7ImA9Wx9TFE4.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/940/comments/full/4</ns0:id><ns0:author>
			<ns0:name>bugdroid1@gmail.com</ns0:name><ns0:uri>/u/bugdroid1@gmail.com/</ns0:uri></ns0:author><ns0:content type="html">Commit: 66a8b414c639cc0f1ab9c57ed0e2b5ad5869e2e1
 Email: pasko@google.com

Enable HelloWorld in x86-64 NaCl.

This does *not* enable threading support, only make it buildable. The TLS
support was disabled by converting all thread local variables to globals
(in bss).

The change was supposed to only make runnable-ld.so print the help message, but
the requirement to have sources buildable pulled so many changes that actually
making HeloWorld run was a minor change.

   * elf/Makefile
     elf/Versions
     sysdeps/nacl/nacl_read_tp.c
       nacl_read_tp: TLS support for General Dynamic model

   * elf/dl-fini.c
       uninvestigated crasher commented out

   * elf/dl-reloc.c
     elf/rtld.c
     include/errno.h
     nptl/sysdeps/x86_64/tls.h
     sysdeps/unix/x86_64/sysdep.S
     sysdeps/x86_64/sysdep.h
       TLS_HACK: make thread-local variables global, disable TLS initialization

   * elf/dl-sysdep.c
       argc was pushed onto the stack via a 64bit push, take argv from a shifted
       place.

   * elf/nacl_fixup_ldso.py
       process ELF64 binaries as well

   * make_sysd_rules.py
       add more .c overrides

   * nacl/dyn-link/ldscripts/elf64_nacl.x
     nacl/dyn-link/ldscripts/elf64_nacl.xs
       linker scripts done in the most part by copying 32bit linker scripts

   * nptl/pthread_mutex_timedlock.c
       a temporary change that will have to be eliminated as deadcode when we
       integrate threading better

   * nptl/sysdeps/x86_64/pthreaddef.h
       tiny inline assembly fix

   * stdlib/llabs.c
     sysdeps/wordsize-64/labs.c
       imaxabs is equal to llabs since labs is smaller

   * sysdeps/generic/gmp-mparam.h
       make gmp work using chunks identical to the i386 case

   * sysdeps/generic/stdint.h
       long != long long, hence a huge change

   * sysdeps/nacl/mmap64.c
     sysdeps/nacl/open64.c
       glibc wants them supported for some reason, maybe we should kill them later

   * sysdeps/nacl/umount.c
       make-syscalls.sh failed to generate an unimplemented syscall stub for
       'umount', creating it by hand

   * sysdeps/nacl/write.c
     sysdeps/unix/sysv/linux/wordsize-64/fxstat.c

   * .../unix/sysv/linux/wordsize-64/posix_fadvise.c
       posix_fadvise commented out, should rather reuse the generic:
       sysdeps/unix/sysv/linux/posix_fadvise.c

   * sysdeps/unix/sysv/linux/x86_64/setcontext.S
       just make it compilable

   * sysdeps/unix/sysv/linux/x86_64/sysdep.h
       disable pointer mangling
       also TLS_HACK

   * sysdeps/x86_64/Makefile
     sysdeps/x86_64/fpu/bits/mathinline.h
     sysdeps/x86_64/fpu/s_nexttoward.c
       denote that we do not support long double in NaCl

   * sysdeps/x86_64/dl-machine.h
     sysdeps/x86_64/elf/initfini.c
       trivial fixes in _dl_start_user
       added support for relocation type R_X86_64_32 in dynamic linker

   * sysdeps/x86_64/dl-trampoline.S
       sandboxing fixes in assembly

BUG=http://code.google.com/p/nativeclient/issues/detail?id=940
TEST=make build-with-glibc CROSSARCH=nacl64 MULTILIB=no &amp;&amp; make nacl-check CROSSARCH=nacl64
(sel_ldr -s would refuse to run the test though, will report the issue as soon
 as this change gets committed)

Review URL: http://codereview.chromium.org/5059002

M	elf/Makefile
M	elf/Versions
M	elf/dl-fini.c
M	elf/dl-reloc.c
M	elf/dl-sysdep.c
M	elf/nacl_fixup_ldso.py
M	elf/rtld.c
M	include/errno.h
M	make_sysd_rules.py
A	nacl/dyn-link/ldscripts/elf64_nacl.x
A	nacl/dyn-link/ldscripts/elf64_nacl.xs
M	nptl/pthread_mutex_timedlock.c
M	nptl/sysdeps/x86_64/pthreaddef.h
M	nptl/sysdeps/x86_64/tls.h
M	stdlib/llabs.c
M	stdlib/setcontext.c
M	sysdeps/generic/gmp-mparam.h
M	sysdeps/generic/stdint.h
A	sysdeps/nacl/nacl_getdents_wrapper.c
A	sysdeps/nacl/nacl_read_tp.c
A	sysdeps/nacl/open64.c
M	sysdeps/nacl/readdir.c
A	sysdeps/nacl/readdir64.c
A	sysdeps/nacl/umount.c
M	sysdeps/nacl/write.c
M	sysdeps/unix/sysv/linux/wordsize-64/fxstat.c
M	sysdeps/unix/sysv/linux/x86_64/sysdep.h
M	sysdeps/unix/x86_64/sysdep.S
M	sysdeps/wordsize-64/labs.c
M	sysdeps/x86_64/Makefile
M	sysdeps/x86_64/dl-machine.h
M	sysdeps/x86_64/dl-trampoline.S
M	sysdeps/x86_64/elf/initfini.c
M	sysdeps/x86_64/fpu/bits/mathinline.h
M	sysdeps/x86_64/fpu/s_nexttoward.c
M	sysdeps/x86_64/sysdep.h</ns0:content><ns0:updated>2010-11-22T13:53:40.000Z</ns0:updated><ns0:published>2010-11-22T13:53:40.000Z</ns0:published><ns2:updates /><ns0:title>Comment 4 by bugdroid1@gmail.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=940#c4" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/940/comments/full/4" rel="self" type="application/atom+xml" /></ns0:entry>