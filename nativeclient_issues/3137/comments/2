<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;C0YHQ347eCl7ImA9WhNRFUw.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/3137/comments/full/2</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">The cause seems to be the following pattern in validator_arm/validator.cc:

  // Initialize the previous instruction so it always fails validation.
  DecodedInstruction pred(
      0,  // Virtual address 0, which will be in a different bundle;
      Instruction(nacl_arm_dec::kFailValidation),
      initial_decoder);  // and ensure that it decodes as Forbidden.

  for (uint32_t va = segment.begin_addr(); va &lt; segment.end_addr(); va += 4) {
    DecodedInstruction inst(va, segment[va],
                            decode_state_.decode(segment[va]));
    ...
    complete_success &amp;= apply_patterns(pred, inst, critical, out);
    if (!out-&gt;should_continue()) return false;
    ...
    pred.Copy(inst);
  }

It applies the sp fixup check to pairs (pred, inst) of instructions, but never with the segment's final instruction as the first of the pair.</ns0:content><ns0:updated>2012-11-10T01:32:12.000Z</ns0:updated><ns0:published>2012-11-10T01:32:12.000Z</ns0:published><ns2:updates /><ns0:title>Comment 2 by mseaborn@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=3137#c2" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/3137/comments/full/2" rel="self" type="application/atom+xml" /></ns0:entry>