<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;A08FSX47eCl7ImA9WhBVGU4.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/3069/comments/full/10</ns0:id><ns0:author>
			<ns0:name>eli...@chromium.org</ns0:name><ns0:uri>/u/112264824292994369940/</ns0:uri></ns0:author><ns0:content type="html">The proposed solution in #7 uses conditional linking of libgcc_eh instead of a dummy version. So I guess this won't do.

Currently libgcc_eh is native and partakes in the native link step. IIRC we discussing replacing it with a dummy, so I understood the dummy will be linked as native too. However, you're saying now that the dummy libgcc_eh should rather be in bitcode?

If we want to modify the bitcode linking process, perhaps we can create an alternative version of pnacl_abi instead that defines these functions strongly (instead of the current weak hack)? [this is probably equivalent to a bitcode-level libgcc_eh dummy, but the naming is different]
</ns0:content><ns0:updated>2013-04-26T01:30:18.000Z</ns0:updated><ns0:published>2013-04-26T01:30:18.000Z</ns0:published><ns2:updates /><ns0:title>Comment 10 by eli...@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=3069#c10" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/3069/comments/full/10" rel="self" type="application/atom+xml" /></ns0:entry>