<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;DUIMRX47eCl7ImA9WhBaFE4.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/3429/comments/full/13</ns0:id><ns0:author>
			<ns0:name>eli...@chromium.org</ns0:name><ns0:uri>/u/112264824292994369940/</ns0:uri></ns0:author><ns0:content type="html">Implementing the pass (replacing intrinsic calls by external function calls) mentioned in comment #9: a problem comes up with streaming the bitcode in llc:

* On one hand, such a pass needs to be a ModulePass since it adds external function declarations to the module.
* On the other hand, we need to run such passes per-function because of streaming.
* A pass running per-function (FunctionPass) should not modify a module according to LLVM's pass management rules

The proposed solution is to split this to two passes, similarly to the way the ABI verifier works:

1. A ModulePass - running after the ABI verifier module pass - adds the declarations of externals that may be needed by the bitcode to the module.
2. A FunctionPass - running after the ABI verifier function pass - looks for calls to specific intrinsics (such as llvm.nacl.longjmp) and replaces them by calls to equivalent external functions (such as longjmp). The declarations of these externals exists since they were inserted by (1).

One slight problem with this approach is that declarations will be added by (1) even if the code doesn't actually end up using those intrinsics. This is not a significant problem, however, since the total amount of such externals is rather limited and adding declarations to a module is a very quick and harmless operation.</ns0:content><ns0:updated>2013-05-24T23:19:44.000Z</ns0:updated><ns0:published>2013-05-24T23:19:44.000Z</ns0:published><ns2:updates /><ns0:title>Comment 13 by eli...@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=3429#c13" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/3429/comments/full/13" rel="self" type="application/atom+xml" /></ns0:entry>