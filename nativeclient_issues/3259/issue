<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;DE8HQH47eCl7ImA9WhNbE0s.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/3259</ns0:id><ns0:author>
			<ns0:name>eli...@chromium.org</ns0:name><ns0:uri>/u/112264824292994369940/</ns0:uri></ns0:author><ns0:content type="html">Since the Nacl-specific bundling implementation in LLVM MC has a high cost of memory usage, some memory optimizations can be applied. The role of this issue is to keep track of some ideas and their implementation.


* Easy for ARM: don't create a fragment per instruction because single instructions will never cross a bundle boundary. Just shove all instructions that are not in a locked group into a continuous fragment.

More sophisticated:

* Implement what David started - collecting data into a single fragment as long as we know the alignment. This happens after .align directives (which Nacl inserts into the beginning of functions) and also after .bundle_lock align_to_end groups, where we know that what comes after is at the beginning of a bundle.

Even more radical:
* There's no real need to keep all the sections and all their fragments in memory before starting to emit them. We can do the following:

  - Add a special directive the compiler can emit to say a section has ended and no more will be emitted into it
  - Then, emit each function into its own section, and use the directive from above to &amp;quot;end&amp;quot; it
  - Then, whenever a section ends we can perform layout for it, independent of other sections, write it to the output stream and delete all fragments for it. This should bring down memory usage considerably.


</ns0:content><ns0:updated>2013-01-16T20:07:11.000Z</ns0:updated><ns0:published>2013-01-16T20:07:11.000Z</ns0:published><ns2:status>New</ns2:status><ns2:cc>
			<ns2:uri>/u/110547710856190289770/</ns2:uri><ns2:username>s...@chromium.org</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/jvoung@chromium.org/</ns2:uri><ns2:username>jvoung@chromium.org</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/dschuff@chromium.org/</ns2:uri><ns2:username>dschuff@chromium.org</ns2:username></ns2:cc><ns2:state>open</ns2:state><ns0:title>LLVM MC bundling for Pnacl - memory usage improvements</ns0:title><ns2:label>Type-Enhancement</ns2:label><ns2:label>Pri-2</ns2:label><ns2:label>Component-</ns2:label><ns2:label>OS-All</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/3259/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=3259" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/3259" rel="self" type="application/atom+xml" /><ns2:stars>1</ns2:stars><ns2:id>3259</ns2:id></ns0:entry>