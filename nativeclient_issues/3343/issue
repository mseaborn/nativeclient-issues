<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;C04CQH47eCl7ImA9WhFTE0Q.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/3343</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">In order to simplify the language and make it easier to define a stable wire format for PNaCl, we should expand out usage of struct and array types in the LLVM IR.

Background:  The main use case for LLVM type information is to guide high-level optimisations and provide a sanity check for transforms.  This is generally not relevant at PNaCl translation time because the PNaCl translator will not be applying expensive high-level optimisations; this will be done by the user toolchain.

Another use case is to allow LLVM IR to be agnostic about pointer size, struct layout, etc.  But LLVM IR does not fully succeed in this goal, anyway -- C requires that offsetof() be a constant, so the C frontend must be able to expand it out.  PNaCl fixes a struct layout and assumes 32-bit pointers, so we don't need to retain struct types in the PNaCl wire format.


We will need to expand out the following features:

 * getelementptr instructions: replace with addition and multiplication on i32s (using inttoptr and ptrtoint)

 * Loads and stores of pointer values.
   e.g. &amp;quot;store %foo* %value, %foo** %ptr&amp;quot;
   becomes &amp;quot;store i32 %value, i32* %ptr&amp;quot;
   Pointer types are generally replaced with i32.

 * Loads and stores of struct values.
   e.g.
     %foo = type { i32, i32, i32, i32 }
     store %foo %value, %foo* %ptr
   This would be replaced with a memcpy intrinsic.

 * extractvalue and insertvalue

 * Struct arguments:  We can change the calling convention so that structs are passed by pointer.  This will affect PPAPI.  PNaCl already has PPAPI shims to convert between calling conventions; we can enable the shims on more architectures.

 * Struct return values:  We can change the calling convention here too, so that the caller passes a pointer to store the return value.  This doesn't affect PPAPI as far as I know.

 * Structs in global variable initializers:  this is covered by issue 3113.
</ns0:content><ns0:updated>2013-06-05T00:26:01.000Z</ns0:updated><ns0:published>2013-03-13T23:04:35.000Z</ns0:published><ns2:status>Fixed</ns2:status><ns2:owner>
			<ns2:uri>/u/mseaborn@chromium.org/</ns2:uri><ns2:username>mseaborn@chromium.org</ns2:username></ns2:owner><ns2:cc>
			<ns2:uri>/u/112264824292994369940/</ns2:uri><ns2:username>eli...@chromium.org</ns2:username></ns2:cc><ns2:state>closed</ns2:state><ns0:title>PNaCl: Eliminate struct types from the pexe wire format -- expand them out</ns0:title><ns2:label>Type-Enhancement</ns2:label><ns2:label>Pri-1</ns2:label><ns2:label>Component-PNaCl</ns2:label><ns2:label>OS-All</ns2:label><ns2:label>PNaClABI</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/3343/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=3343" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/3343" rel="self" type="application/atom+xml" /><ns2:stars>2</ns2:stars><ns2:blockedOn>
			<ns2:id>3374</ns2:id><ns2:project>nativeclient</ns2:project></ns2:blockedOn><ns2:closedDate>2013-06-04T17:31:42.000Z</ns2:closedDate><ns2:id>3343</ns2:id></ns0:entry>