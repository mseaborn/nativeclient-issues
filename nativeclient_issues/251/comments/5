<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;DU8FQ347eCl7ImA9WxBQFU0.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/251/comments/full/5</ns0:id><ns0:author>
			<ns0:name>b...@google.com</ns0:name><ns0:uri>/u/105821748722532785568/</ns0:uri></ns0:author><ns0:content type="html">since we are doing this to do addr space squatting and the page is zero-filled, if we 
want to allocate space -- say, due to the untrusted code doing sbrk or mmap -1 -- we 
could mmap on top of the existing allocation with anon memory again, but this time 
w/o the NORESERVE.  if this mmap fails, we can (presumably) return an error to the 
untrusted application.  this needs to be tested out, of course, but the theory sounds 
good.  cliff: want to write a little standalone test for linux?  we also need to 
verify that this works on other two OSes, of course -- i think the linux test can be 
adapted for osx easily; maybe you can ask ian for help w/ a windows test.  we already 
map in at 64K chunks, and i think this is a VirtualAlloc MEM_RESERVE for the 
squatting, and then another VirtualAlloc MEM_COMMIT to ensure that the memory is 
there.</ns0:content><ns0:updated>2010-01-14T22:23:32.000Z</ns0:updated><ns0:published>2010-01-14T22:23:32.000Z</ns0:published><ns2:updates /><ns0:title>Comment 5 by b...@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=251#c5" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/251/comments/full/5" rel="self" type="application/atom+xml" /></ns0:entry>