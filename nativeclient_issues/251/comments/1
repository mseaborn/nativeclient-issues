<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;AkAAR347eCl7ImA9WxBQFEQ.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/251/comments/full/1</ns0:id><ns0:author>
			<ns0:name>k...@google.com</ns0:name><ns0:uri>/u/112873510090665368075/</ns0:uri></ns0:author><ns0:content type="html">~MAP_NORESERVE will only guarantee something on a system with exactly one program or 
on system with overcommit disabled (not a default option). It's mostly convenience 
option. If you have system with 32MB of RAM then it's perfectly legal to allocate 
12MB of RAM by a single program without specifying MAP_NORESERVE by default (see __vm_enough_memory in mm/mmap.c in Linux kernel). If all three programs will actually 
try to use said memory one will get SIGSEGV for sure.

Since we can not gurantee that SIGSEGV in low-RAM situation does not happen we can 
gurantee this threat is accounted for anyway.

It's even worse for x86-64 - very few systems have enough swap to allow us to mmap 
84GB without MAP_NORESERVE flag.</ns0:content><ns0:updated>2010-01-14T19:52:26.000Z</ns0:updated><ns0:published>2010-01-14T19:52:26.000Z</ns0:published><ns2:updates /><ns0:title>Comment 1 by k...@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=251#c1" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/251/comments/full/1" rel="self" type="application/atom+xml" /></ns0:entry>