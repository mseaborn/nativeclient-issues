<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;C0MEQH47eCl7ImA9WxBQFUw.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/251/comments/full/7</ns0:id><ns0:author>
			<ns0:name>cbiffle@google.com</ns0:name><ns0:uri>/u/cbiffle@google.com/</ns0:uri></ns0:author><ns0:content type="html">Just went through the relevant allocator sources with bsy.  We're already using mmap-
over-mmap to allocate on *ix, so since my tests pass, we know ~NORESERVE over 
NORESERVE works.  The documentation strongly suggests that the second map attempt 
will fail when it reaches the limit, before getting SIGSEGV.  Third-party allocators 
may not use mmap, but would then use sbrk, which fails similarly.

On an overcommitted system, we could easily hit a race where our map succeeds and 
another process trips the limit, causing OOM kills.  We could ulimit the sel_ldr in 
the hope of tripping a local limit before anyone hits the global limit, but this 
feels cargo-cult to me.

The test sounds tricky, unless anyone has brilliant ideas for doing it without 
getting a Linux box into an overcommit state.</ns0:content><ns0:updated>2010-01-14T23:23:21.000Z</ns0:updated><ns0:published>2010-01-14T23:23:21.000Z</ns0:published><ns2:updates /><ns0:title>Comment 7 by cbiffle@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=251#c7" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/251/comments/full/7" rel="self" type="application/atom+xml" /></ns0:entry>