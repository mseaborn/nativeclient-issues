<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CkEBSH47eCl7ImA9WhBXGE8.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/2518</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">The x86 validators allow the LOCK (f0) and DATA16 (66) prefixes in any order.

For example, the x86-32 validator allows both of these:

       66 f0 83 00 01          lock addw $0x1,(%eax)
       f0 66 83 00 01          lock addw $0x1,(%eax)

Similarly, the x86-64 validator allows both of these:

       89 c0                   mov    %eax,%eax
       66 f0 41 83 04 07 01    lock addw $0x1,(%r15,%rax,1)

       89 c0                   mov    %eax,%eax
       f0 66 41 83 04 07 01    lock addw $0x1,(%r15,%rax,1)

(However, the same does not apply to REX prefixes.  REX must be the last prefix byte, and the x86-64 validator enforces that.)

This is not a bug as such, but it is an area where the validator could be tightened up.  Allowing just one prefix ordering would make verifying the validator simpler.  In practice, assemblers will only generate one prefix ordering, so there is more scope for CPU bugs in the other orderings.
</ns0:content><ns0:updated>2013-04-01T12:50:59.000Z</ns0:updated><ns0:published>2012-01-04T22:46:49.000Z</ns0:published><ns2:status>Accepted</ns2:status><ns2:owner>
			<ns2:uri>/u/108470876877739532758/</ns2:uri><ns2:username>kschi...@google.com</ns2:username></ns2:owner><ns2:cc>
			<ns2:uri>/u/108470876877739532758/</ns2:uri><ns2:username>kschi...@google.com</ns2:username></ns2:cc><ns2:state>open</ns2:state><ns0:title>x86 validators allow multiple prefix byte orderings</ns0:title><ns2:label>Type-Defect</ns2:label><ns2:label>Pri-2</ns2:label><ns2:label>Component-TCB-Validator</ns2:label><ns2:label>OS-All</ns2:label><ns2:label>Arch-x86-32</ns2:label><ns2:label>Arch-x86-64</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/2518/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2518" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/2518" rel="self" type="application/atom+xml" /><ns2:stars>3</ns2:stars><ns2:id>2518</ns2:id></ns0:entry>