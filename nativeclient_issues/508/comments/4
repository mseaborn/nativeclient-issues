<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;A0EMR347eCl7ImA9WxFXEkw.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/508/comments/full/4</ns0:id><ns0:author>
			<ns0:name>cbiffle@google.com</ns0:name><ns0:uri>/u/cbiffle@google.com/</ns0:uri></ns0:author><ns0:content type="html">&gt; OK.  So basically we want to avoid exposing the whole-system
&gt; randomisation info to untrusted code?

Precisely.  The concern is that a nexe could be used as a 'scouting party' to 
discover the system's address space layout, which could then be exploited by another 
attack (perhaps a browser heap corruption attack).

&gt; Does the existing x86-64 sandbox expose the location of the sandbox
&gt; in address space to untrusted code?

It does -- it has a register dedicated to this purpose.

&gt; If so, do we need to randomise the sandbox's location
&gt; ourselves in case the randomisation provided by Windows isn't
&gt; sufficient?

Unclear.  Windows 64's ASLR has significantly better entropy than 32's, but my 
initial math suggests it's still not that many bits, because certain DLLs seem to 
always be loaded in predictable low ranges.  Our sandbox location tells the observer 
where we could find 84GiB of heap, but that may not reveal that much compared to 
other mechanisms.

&gt; If this is a Windowsism, is it necessary to do read sandboxing on ARM?

Strictly speaking, no.  I consider Windows's ASLR design to be flawed.  Linux, when 
ASLR is present, does it better.

However...

&gt; (I wouldn't complain if we had read sandboxing just to be on the safe
&gt; side, though.)

This is pretty much where I'm coming from.  In the absence of an attack, I say let's 
give it a shot, see what the perf looks like.  If it's palatable, it may help prevent 
future attacks.

&gt; "Load" is a bit, um, overloaded (see? :-) ).

Fair enough.  "Read sandboxing" then?</ns0:content><ns0:updated>2010-05-18T21:54:46.000Z</ns0:updated><ns0:published>2010-05-18T21:54:46.000Z</ns0:published><ns2:updates /><ns0:title>Comment 4 by cbiffle@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=508#c4" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/508/comments/full/4" rel="self" type="application/atom+xml" /></ns0:entry>