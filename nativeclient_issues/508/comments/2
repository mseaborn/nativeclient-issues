<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;DEMFSX47eCl7ImA9WxFXEkw.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/508/comments/full/2</ns0:id><ns0:author>
			<ns0:name>cbiffle@google.com</ns0:name><ns0:uri>/u/cbiffle@google.com/</ns0:uri></ns0:author><ns0:content type="html">&gt; I'm curious, what systems have per-boot address space randomisation?

That'd be Windows.

&gt; BTW, I've been using the term "read sandboxing".  Can we settle on a term?
&gt; It's just that it makes it easier to search for it.

Well, how about 'load sandboxing' then, as an analog to 'store sandboxing' in the 
current design?  It's more precise than read/write imho.  But then, I work on a 
machine that calls these instructions 'load' and 'store,' so....</ns0:content><ns0:updated>2010-05-18T21:00:18.000Z</ns0:updated><ns0:published>2010-05-18T21:00:18.000Z</ns0:published><ns2:updates /><ns0:title>Comment 2 by cbiffle@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=508#c2" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/508/comments/full/2" rel="self" type="application/atom+xml" /></ns0:entry>