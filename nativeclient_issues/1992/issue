<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;D0MFRn47eCl7ImA9WhRaE04.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/1992</ns0:id><ns0:author>
			<ns0:name>b...@google.com</ns0:name><ns0:uri>/u/105821748722532785568/</ns0:uri></ns0:author><ns0:content type="html">FileDownloader contains the FileIO_Dev object.  when the PluginPpapi::UrlDidOpenForStreamAsFile is invoked, it stashes the FileDownloader in a scoped_ptr and extracts the I/O descriptor via GetPOSIXFileDescriptor, saving the descriptor and the URL in the url_fd_map_ member (std::map&amp;lt;nacl::string,int32&amp;gt;).  only when PluginPpapi::GetPOSIXFileDesc(nacl::string) is invoked with the same URL is the descriptor passed out to the relying code.

here are two bugs:

1)  the contract with chrome is that when the FileIO_Dev object is destroyed, the underlying file is no longer in use (and the descriptor is no longer in use).  chrome is free to unlink the file, to overwrite its contents with other stuff, etc.  (currently it does not seem to do either.)  if Chrome later does so, then the fd, which we are still hanging onto, will refer to invalid data.  worse, if the file is overwritten with data for another FileIO_Dev object but for another domain, we may have privacy violation (SECURITY label).  on Windows, if chrome attempts to unlink the file while a descriptor to it is still open, chrome will receive an (unexpected) error.

2) the obvious way for a NaCl module to open a file twice -- and to gain two independent file descriptors to it -- is to ask the plugin to invoke StreamAsFile and GetPOSIXFileDescriptor twice.  these are two read-only descriptors, so whether StreamAsFile created another copy of the file from the browser cache db is immaterial/unobservable.  however, because url_fd_map_ uses the URL as the key, we have a duplicate key problem.  the code currently just overwrites, so the descriptor from the first open/StreamAsFile-GetPOSIXFileDescriptor is lost.

we also need to have a close-file protocol, where the service runtime can tell the plugin that it is done with a file that originated from chrome, so that the plugin can only then destroy the FileIO_Dev objects.  this can be done via the existing reverse RPC channel.  the current shutdown protocol needs to be modified to include an extra step:  after telling sel_ldr to die via a hard_shutdown RPC or killing the process and waiting for all service threads to shutdown, the plugin must destroy the FileDownloader objects associated with file descriptors that were sent over to the sel_ldr.

NB: if the FileDownloader address is used as object proxy identifier, this exposes address space information about the plugin to the service runtime.  since we have read sandboxing and the untrusted code wouldn't be able to see this value unless the inner sandbox is compromised, this is not a big deal, but for defense-in-depth we may want to use something else.</ns0:content><ns0:updated>2012-02-15T19:50:17.000Z</ns0:updated><ns0:published>2011-07-08T23:02:17.000Z</ns0:published><ns2:status>Moved</ns2:status><ns2:cc>
			<ns2:uri>/u/108394971971967673680/</ns2:uri><ns2:username>s...@google.com</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/105821748722532785568/</ns2:uri><ns2:username>b...@google.com</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/113511172007743761909/</ns2:uri><ns2:username>cstefan...@google.com</ns2:username></ns2:cc><ns2:state>closed</ns2:state><ns0:title>ppapi plugin deletes FileDownloader before uses of associated descriptor are done, loses track of descriptors</ns0:title><ns2:label>Type-Defect</ns2:label><ns2:label>Mstone-19</ns2:label><ns2:label>Pri-1</ns2:label><ns2:label>Component-Pepper</ns2:label><ns2:label>OS-All</ns2:label><ns2:label>Arch-All</ns2:label><ns2:label>MigrateToChromium</ns2:label><ns2:label>Feature-NaCl</ns2:label><ns2:label>Feature-Plugins-Pepper</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/1992/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=1992" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/1992" rel="self" type="application/atom+xml" /><ns2:stars>3</ns2:stars><ns2:closedDate>2012-02-15T19:50:17.000Z</ns2:closedDate><ns2:id>1992</ns2:id></ns0:entry>