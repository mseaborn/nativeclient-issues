<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;AkQHQ347eCl7ImA9WhdSGEQ.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/578</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">In order to support the seccomp sandbox, we should make the x86 timestamp counter accessible via a syscall instead of via the RDTSC instruction.

This is because, on some systems, Linux's seccomp mechanism disables the RDTSC instruction.

On systems where RDTSC is allowed by seccomp, the syscall trampoline could contain RDTSC directly.  Otherwise, NaCl's RDTSC syscall would have to forward the request to a trusted thread (as implemented by the seccomp sandbox).

Virtualising RDTSC would also help in implementing deterministic execution: http://code.google.com/p/nativeclient/wiki/DeterministicExecution

I think we could handle RDTSC in a signal handler, but it would be slower than using a NaCl syscall.</ns0:content><ns0:updated>2011-07-29T00:12:12.000Z</ns0:updated><ns0:published>2010-06-09T01:01:14.000Z</ns0:published><ns2:status>Available</ns2:status><ns2:state>open</ns2:state><ns0:title>Need an RDTSC syscall</ns0:title><ns2:label>Type-Enhancement</ns2:label><ns2:label>Pri-2</ns2:label><ns2:label>OS-Linux</ns2:label><ns2:label>Seccomp</ns2:label><ns2:label>Component-TCB</ns2:label><ns2:label>Mstone-X</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/578/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=578" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/578" rel="self" type="application/atom+xml" /><ns2:stars>1</ns2:stars><ns2:blocking>
			<ns2:id>571</ns2:id><ns2:project>nativeclient</ns2:project></ns2:blocking><ns2:id>578</ns2:id></ns0:entry>