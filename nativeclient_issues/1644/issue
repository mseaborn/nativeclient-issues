<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CkIARH47eCl7ImA9WhZRGUw.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/1644</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">PluginUpcallCoreCallOnMainThread() implements PPAPI's CallOnMainThread() function in the non-main-thread case.  It calls:

 * AddCallback(): this uses a pthread_mutex internally (via CallbackTableCriticalSection)
 * PppUpcallRpcClient::PPB_Core_CallOnMainThread(), which calls NaClSrpcInvokeBySignature()

The latter does not use a lock internally, so this is probably not thread-safe.  At best, the SRPC reply messages will get mixed up.  At worst, this will be memory-unsafe.
</ns0:content><ns0:updated>2011-04-15T23:35:45.000Z</ns0:updated><ns0:published>2011-04-11T21:02:39.000Z</ns0:published><ns2:status>Fixed</ns2:status><ns2:owner>
			<ns2:uri>/u/118309011164612460950/</ns2:uri><ns2:username>nfulla...@google.com</ns2:username></ns2:owner><ns2:state>closed</ns2:state><ns0:title>ppapi_proxy's untrusted CallOnMainThread() implementation not thread-safe?</ns0:title><ns2:label>Type-Defect</ns2:label><ns2:label>Component-Pepper</ns2:label><ns2:label>OS-All</ns2:label><ns2:label>Arch-All</ns2:label><ns2:label>Milestone-Baltic-Brill</ns2:label><ns2:label>Pri-1</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/1644/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=1644" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/1644" rel="self" type="application/atom+xml" /><ns2:stars>1</ns2:stars><ns2:closedDate>2011-04-15T23:35:45.000Z</ns2:closedDate><ns2:id>1644</ns2:id></ns0:entry>