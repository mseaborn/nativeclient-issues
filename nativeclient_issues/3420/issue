<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;DUYHRX47eCl7ImA9WhBUFUk.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/3420</ns0:id><ns0:author>
			<ns0:name>noelal...@chromium.org</ns0:name><ns0:uri>/u/105463900101606224058/</ns0:uri></ns0:author><ns0:content type="html">Provided interfaces need documentation.  For example:

#define NACL_IRT_EXCEPTION_HANDLING_v0_1 \
  &amp;quot;nacl-irt-exception-handling-0.1&amp;quot;
typedef void (*NaClExceptionHandler)(struct NaClExceptionContext *context);
struct nacl_irt_exception_handling {
  int (*exception_handler)(NaClExceptionHandler handler,
                           NaClExceptionHandler *old_handler);
  int (*exception_stack)(void *stack, size_t size);
  int (*exception_clear_flag)(void);
};

Behavior for these functions must be specified somewhere.  In addition, we should not assume developers are POSIX savvy.  They may not realize these functions are similar to sigaction, sigaltstack, etc... </ns0:content><ns0:updated>2013-05-03T02:12:14.000Z</ns0:updated><ns0:published>2013-05-02T23:08:13.000Z</ns0:published><ns2:status>Available</ns2:status><ns2:state>open</ns2:state><ns0:title>Need comments for IRT interfaces</ns0:title><ns2:label>Type-Enhancement</ns2:label><ns2:label>Component-SDK</ns2:label><ns2:label>Component-IRT</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/3420/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=3420" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/3420" rel="self" type="application/atom+xml" /><ns2:stars>2</ns2:stars><ns2:id>3420</ns2:id></ns0:entry>