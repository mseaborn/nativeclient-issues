<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;D0QMQH47eCl7ImA9WxFXEEo.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/498/comments/full/2</ns0:id><ns0:author>
			<ns0:name>b...@google.com</ns0:name><ns0:uri>/u/105821748722532785568/</ns0:uri></ns0:author><ns0:content type="html">we should be able to use a variation of tools/set_abi_version.py around strip or 
other tools to read in and then reset the abi version number after the tool is done.  
this should be pretty simple.  perhaps usage would be something like:

hold_abi -f foo.nexe -- strip foo.nexe

for in-place modifications, and

hold_abi -i foo.nexe -o bar.nexe -- objcopy --strip-debug foo.nexe bar.nexe

for in-file, out-file kind of commands.  suggestions on command name / usage welcome.

khim: i see there's a TODO in src/trusted/service_runtime/elf_util.c where x86-64 
apparently is being more permissive in permitting ABI version to be 0, presumably 
because the x86-64 toolchain used to put in 0 for the ABI.  is this still the case 
for the toolchain?  i'd like to get rid of this while we're looking at this code, so 
we don't forget.</ns0:content><ns0:updated>2010-05-17T05:49:41.000Z</ns0:updated><ns0:published>2010-05-17T05:49:41.000Z</ns0:published><ns2:updates>
			<ns2:ccUpdate>k...@google.com</ns2:ccUpdate></ns2:updates><ns0:title>Comment 2 by b...@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=498#c2" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/498/comments/full/2" rel="self" type="application/atom+xml" /></ns0:entry>