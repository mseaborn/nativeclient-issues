<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;AkUBR347eCl7ImA9WhdWFEw.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/846</ns0:id><ns0:author>
			<ns0:name>robe...@google.com</ns0:name><ns0:uri>/u/108771824208521698652/</ns0:uri></ns0:author><ns0:content type="html">&lt;b&gt;[Please summarize the enhancement so it will be comprehensible to someone&lt;/b&gt;
&lt;b&gt;from outside the Native Client team. A good summary will include:]&lt;/b&gt;
&lt;b&gt;- Where are we today?&lt;/b&gt;
[e.g. &amp;quot;Currently each platform uses a different address space size.&amp;quot;]
&lt;b&gt;- Why is this a problem?&lt;/b&gt;
[e.g. &amp;quot;This can make portability complicated.&amp;quot;]
&lt;b&gt;- The proposed enhancement:&lt;/b&gt;
[e.g. &amp;quot;All platforms should move to 1GB untrusted space.&amp;quot;]
&lt;b&gt;- Exit criteria:&lt;/b&gt;
&lt;b&gt;[How do we know we're done?]&lt;/b&gt;
&lt;b&gt;- Anticipated impact:&lt;/b&gt;
&lt;b&gt;[for users as well as other parts of the system]&lt;/b&gt;
I looked into the sqrt problem some more and I am more puzzled than before:

cat  ~robertm/sqrt.c
===========================
#include &amp;lt;math.h&amp;gt;

float my_sqrt_f(float d) {
  return sqrt(d);
}


double my_sqrt_d(double d) {
  return sqrt(d);
}


float my_pow_f(float d1, float d2) {
  return pow(d1, d2);
}

float my_pow_d(double d1, double d2) {
  return pow(d1, d2);
}

====================================
The optimization that makes sqrt into sqrtf can be triggered by:

toolchain/linux_arm-untrusted/arm-none-linux-gnueabi/llvm-fake-sfigcc -emit-llvm -c -O3 -o m.ll  ~robertm/sqrt.c
llvm-dis -o -  m.ll 

so we could solve some of the spec issue by having a separate set of ..bc files for each .c file and not sharing these with the unoptimized version.

But here is where it gets weird, try this

toolchain/linux_arm-untrusted/arm-none-linux-gnueabi/llvm-fake-sfigcc -emit-llvm -c  -o m.ll  ~robertm/sqrt.c 
toolchain/linux_arm-untrusted/arm-none-linux-gnueabi/bin/opt  -f -O3 -std-compile-opts  m.ll -o n.ll
llvm-dis -o -  n.ll 


; ModuleID = 'n.ll'
target triple = &amp;quot;armv7-none-linux-gnueabi&amp;quot;

define float @my_sqrt_f(float %d) nounwind {
entry:
  %0 = fpext float %d to double                   ; &amp;lt;double&amp;gt; [#uses=1]
  %1 = tail call double @sqrt(double %0) nounwind ; &amp;lt;double&amp;gt; [#uses=0]
  %2 = tail call float @sqrtf(float %d) nounwind  ; &amp;lt;float&amp;gt; [#uses=1]
  ret float %2
}
....


NOTE, the two tailcalls. 

I know we did some doctoring on the tailcalls.
Is this something we introduced or an llvm bug or no bug at all.</ns0:content><ns0:updated>2011-09-07T17:57:36.000Z</ns0:updated><ns0:published>2010-08-24T17:19:37.000Z</ns0:published><ns2:status>Fixed</ns2:status><ns2:owner>
			<ns2:uri>/u/robertm@google.com/</ns2:uri><ns2:username>robertm@google.com</ns2:username></ns2:owner><ns2:state>closed</ns2:state><ns0:title>llvm mis -optimization:</ns0:title><ns2:label>Type-Enhancement</ns2:label><ns2:label>Pri-2</ns2:label><ns2:label>Component-PNaCl</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/846/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=846" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/846" rel="self" type="application/atom+xml" /><ns2:stars>1</ns2:stars><ns2:closedDate>2011-09-07T17:57:36.000Z</ns2:closedDate><ns2:id>846</ns2:id></ns0:entry>