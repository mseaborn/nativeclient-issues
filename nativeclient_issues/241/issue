<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CEUHQH47eCl7ImA9WhVTEEk.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/241</ns0:id><ns0:author>
			<ns0:name>cbiffle@google.com</ns0:name><ns0:uri>/u/cbiffle@google.com/</ns0:uri></ns0:author><ns0:content type="html">When untrusted code calls into trusted code, it passes the address where it 
wishes to be resumed -- on the stack on x86, in register for ARM.  Of 
course, we can't trust this value, so the trusted code sanitizes it (by 
zeroing some bits) before jumping to it.

On x86, this is done in sel_ldr.h's NaClSandboxAddr function.

On ARM, this is done in assembly code in the springboard.  NaClSandboxAddr 
is a stub.

This is vestigial and kind of silly.  We should centralize all this into 
sel_ldr.h, and ideally use the same C code for all architectures.  The 
compiler, after all, is our friend.</ns0:content><ns0:updated>2012-02-24T00:10:31.000Z</ns0:updated><ns0:published>2010-01-12T00:52:15.000Z</ns0:published><ns2:status>Available</ns2:status><ns2:state>open</ns2:state><ns0:title>The trusted-&gt;untrusted return address should be sanitized in the same place on all architectures</ns0:title><ns2:label>Type-Defect</ns2:label><ns2:label>Arch-ARM</ns2:label><ns2:label>Pri-3</ns2:label><ns2:label>Component-TCB</ns2:label><ns2:label>Mstone-X</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/241/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=241" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/241" rel="self" type="application/atom+xml" /><ns2:stars>2</ns2:stars><ns2:blocking>
			<ns2:id>242</ns2:id></ns2:blocking><ns2:id>241</ns2:id></ns0:entry>