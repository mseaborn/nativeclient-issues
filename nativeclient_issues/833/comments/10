<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;C0IEQH47eCl7ImA9WhdXEk4.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/833/comments/full/10</ns0:id><ns0:author>
			<ns0:name>robertm@google.com</ns0:name><ns0:uri>/u/robertm@google.com/</ns0:uri></ns0:author><ns0:content type="html">They come in via libstdc++/libsupc++  and one of the frontend #defines.
c.f. hg/upstream/llvm-gcc/libstdc++-v3/libsupc++/vec.cc 

I looked into this some more and realized that my assertion that llvm's llc  generated calls to 
libsupc++ was wrong. Many calls are actually generated by llvm-gcc.
The primitives that are handled by llc are:
 declare i8* @llvm.eh.exception() nounwind readonly
 declare i32 @llvm.eh.selector(i8*, i8*, ...) nounwind
 declare i32 @llvm.eh.typeid.for(i8*) nounwind
 
The __aeabi_vec_XXX functions still need some more investigation but they
are likely also frontend invoked.

Here is code snippet from eh_loop_many_noopt.c:



 invcont:                                          ; preds = %bb
   %13 = call i8* @__cxa_allocate_exception(i32 4) nounwind
   store i8* %13, i8** %2, align 4
   %14 = load i8** %2, align 4
   %15 = bitcast i8* %14 to i32*
   %16 = load i32* %i, align 4
   %17 = add nsw i32 %16, 666
   store i32 %17, i32* %15, align 4
   %18 = load i8** %2, align 4
   invoke void @__cxa_throw(i8* %18, i8* bitcast (%struct.__fundamental_type_info_pseu do* @_ZTIi to i8*), void (i8*)* null) noreturn
           to label %invcont1 unwind label %lpad
 
 invcont1:                                         ; preds = %invcont
   unreachable
 
 bb2:                                              ; preds = %ppad
   %eh_value = load i8** %eh_exception
   %19 = call i8* @__cxa_begin_catch(i8* %eh_value) nounwind
   %20 = bitcast i8* %19 to i32*
   store i32* %20, i32** %1, align 4
   %21 = load i32** %1, align 4
   %22 = load i32* %21, align 4
   store i32 %22, i32* %x, align 4
   %23 = load i32* %i, align 4
   %24 = add nsw i32 %23, 666
   %25 = load i32* %x, align 4
   %26 = icmp ne i32 %24, %25
   br i1 %26, label %bb3, label %bb5
 
 bb3:                                              ; preds = %bb2
   invoke void @abort() noreturn
           to label %invcont4 unwind label %lpad16
 
 invcont4:                                         ; preds = %bb3
   unreachable
 
 bb5:                                              ; preds = %bb2
   %27 = load i32* @STRIDE, align 4
   %28 = load i32* %i, align 4
   %29 = mul nsw i32 %28, %27
   %30 = add nsw i32 %29, 4
   invoke void @_Z9next_stepi(i32 %30)
           to label %invcont6 unwind label %lpad16
 
 invcont6:                                         ; preds = %bb5
   call void @__cxa_end_catch()
   %31 = load i32* @STRIDE, align 4
   %32 = load i32* %i, align 4
   %33 = mul nsw i32 %32, %31
   %34 = add nsw i32 %33, 5
   call void @_Z9next_stepi(i32 %34)
   %35 = load i32* %i, align 4
   %36 = add nsw i32 %35, 1
   store i32 %36, i32* %i, align 4
   br label %bb11
 
 bb7:                                              ; preds = %ppad24
   %eh_select = load i32* %eh_selector
   store i32 %eh_select, i32* %save_filt.11, align 4
   %eh_value8 = load i8** %eh_exception
   store i8* %eh_value8, i8** %save_eptr.10, align 4
   invoke void @__cxa_end_catch()
           to label %invcont9 unwind label %lpad20

...

 lpad16:                                           ; preds = %bb5, %bb3
   %eh_ptr17 = call i8* @llvm.eh.exception()
   store i8* %eh_ptr17, i8** %eh_exception
   %eh_ptr18 = load i8** %eh_exception
   %eh_select19 = call i32 (i8*, i8*, ...)* @llvm.eh.selector(i8* %eh_ptr18, i8* bitca st (i32 (...)* @__gxx_personality_v0 to i8*), i32 0)
   store i32 %eh_select19, i32* %eh_selector
   br label %ppad24
 



</ns0:content><ns0:updated>2011-08-25T00:18:21.000Z</ns0:updated><ns0:published>2011-08-25T00:18:21.000Z</ns0:published><ns2:updates /><ns0:title>Comment 10 by robertm@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=833#c10" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/833/comments/full/10" rel="self" type="application/atom+xml" /></ns0:entry>