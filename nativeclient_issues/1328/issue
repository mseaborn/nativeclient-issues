<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CUcCQn47eCl7ImA9Wx9UGUU.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/1328</ns0:id><ns0:author>
			<ns0:name>kschi...@google.com</ns0:name><ns0:uri>/u/108470876877739532758/</ns0:uri></ns0:author><ns0:content type="html">&lt;b&gt;[Please summarize the enhancement so it will be comprehensible to someone&lt;/b&gt;
&lt;b&gt;from outside the Native Client team. A good summary will include:]&lt;/b&gt;

&lt;b&gt;- Where are we today?&lt;/b&gt;
The current implementation has a single operand format string defined for each instruction.

&lt;b&gt;- Why is this a problem?&lt;/b&gt;
The representation is space wasteful for two reasons.

The first is that there are several thousand instructions modeled in the x86-64 validator, while it only models approximately 700 operands (since common operands are merged). Hence, the total number of pointers saved in the tables can be reduced by a few thousand.

The second is that each instruction format string is the concatenation of all operands. On the other hand, if we only store format directives associated each operand separately, there is a much larger chance that format strings can be shared between operands.

&lt;b&gt;- The proposed enhancement:&lt;/b&gt;

The instruction format strings are only used by the (internal) description printer to show how arguments will be printed.

Replace the instruction format strings with operand format strings, and have the (internal) description printer do the concatenation of operand format strings to regenerate the corresponding format strings defined on the instruction.

&lt;b&gt;- Exit criteria:&lt;/b&gt;

The test file testdata/64/modeled_insts.txt prints out the instruction format strings using the (internal) description printer. If that test passes with this enhancement, we can conclude that the change works.

&lt;b&gt;- Anticipated impact:&lt;/b&gt;

A quick test shows that we can remove about 46k of memory from the space used to model instructions.
</ns0:content><ns0:updated>2011-02-17T22:51:03.000Z</ns0:updated><ns0:published>2011-01-19T22:38:39.000Z</ns0:published><ns2:status>Fixed</ns2:status><ns2:owner>
			<ns2:uri>/u/108470876877739532758/</ns2:uri><ns2:username>kschi...@google.com</ns2:username></ns2:owner><ns2:state>closed</ns2:state><ns0:title>Remove wasted space in the way the x86-64 bit validator represents format strings</ns0:title><ns2:label>Type-Enhancement</ns2:label><ns2:label>Pri-2</ns2:label><ns2:label>Component-TCB-Validator</ns2:label><ns2:label>OS-All</ns2:label><ns2:label>Milestone-Baltic-Sea</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/1328/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=1328" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/1328" rel="self" type="application/atom+xml" /><ns2:stars>1</ns2:stars><ns2:closedDate>2011-01-24T20:36:31.000Z</ns2:closedDate><ns2:id>1328</ns2:id></ns0:entry>