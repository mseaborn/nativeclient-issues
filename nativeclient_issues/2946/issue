<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;DkEBQX47eCl7ImA9WhJXFEk.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/2946</ns0:id><ns0:author>
			<ns0:name>kschi...@google.com</ns0:name><ns0:uri>/u/108470876877739532758/</ns0:uri></ns0:author><ns0:content type="html">This problem was first brought up as part of the review of

https://chromiumcodereview.appspot.com/10826163

The problem is that the current x86-64 validator accepts prefix 66 on some x87 memory instructions, but the 66 is ignored, or does not disassemble. Since prefix 66 is ignored or doesn't disassemble, it should be removed as allowable. This should have no serious impact, but the rules should none the less be tightened up.

Example:

$ cat test.c
int main() {
  asm(&amp;quot;.byte 0x66, 0x48, 0x81, 0x04, 0x24, 0x78, 0x56, 0x34, 0x12&amp;quot;);
  asm(&amp;quot;.byte 0x66, 0xdf, 0x24, 0x24&amp;quot;);
  asm(&amp;quot;.byte 0x0f, 0xae, 0xe9&amp;quot;);
}

compiles as:

00000000000201e0 &amp;lt;main&amp;gt;:
   201e0:       55                      push   %rbp
   201e1:       48 89 e5                mov    %rsp,%rbp
   201e4:       66 48 81 04 24 78 56    addq   $0x12345678,(%rsp)
   201eb:       34 12 
   201ed:       66                      data16
   201ee:       df 24 24                fbld   (%rsp)
   201f1:       0f ae                   (bad)  
   201f3:       e9 41 5b 44 89          jmpq   ffffffff89465d39 &amp;lt;_end+0xffffffff79425799&amp;gt;
   201f8:       dd 4c 01 fd             fisttpll -0x3(%rcx,%rax,1)
   201fc:       41 5b                   pop    %r11
   201fe:       66 90                   xchg   %ax,%ax
   20200:       41 83 e3 e0             and    $0xffffffffffffffe0,%r11d
   20204:       4d 01 fb                add    %r15,%r11
   20207:       41 ff e3                jmpq   *%r11

This problem is caused because the corresponding validator syntax for these instructions appear to use &amp;quot;$M&amp;quot; when the manual implies that the operand size of the corresponding memory access is limited to a particular size. The fix is to update the rules for these x87 instructions to use more specific memory references that include the size.</ns0:content><ns0:updated>2012-08-08T16:50:50.000Z</ns0:updated><ns0:published>2012-08-06T21:45:42.000Z</ns0:published><ns2:status>Started</ns2:status><ns2:owner>
			<ns2:uri>/u/108470876877739532758/</ns2:uri><ns2:username>kschi...@google.com</ns2:username></ns2:owner><ns2:state>open</ns2:state><ns0:title>Some x86-64 instructions accept prefix 66 on x87 instructions when it shouldn't</ns0:title><ns2:label>Type-Defect</ns2:label><ns2:label>Mstone-23</ns2:label><ns2:label>Pri-2</ns2:label><ns2:label>Component-TCB-Validator</ns2:label><ns2:label>OS-All</ns2:label><ns2:label>Arch-x86-64</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/2946/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2946" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/2946" rel="self" type="application/atom+xml" /><ns2:stars>1</ns2:stars><ns2:id>2946</ns2:id></ns0:entry>