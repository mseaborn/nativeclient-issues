<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;Dk8DQn47eCl7ImA9WhdTFEU.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/1989/comments/full/1</ns0:id><ns0:author>
			<ns0:name>halya...@google.com</ns0:name><ns0:uri>/u/112856509894568708731/</ns0:uri></ns0:author><ns0:content type="html">I found the source of the bug. 
SerializeAllProcessors function allocates the page with valloc. Then it tries to revoke access to the page (here is another bug it should be written "static int prot = PROT_READ|PROT_WRITE|PROT_EXEC" there). Unfortunately, Mac OS memory manager can read last word of the allocated block. The result is checked afterwards so user data can't confuse memory manager. But since we revoke access to the whole block, program gets EXC_BAD_ACCESS and terminates.

Note, that we can't just change the start value of prot to fix the bug - since memory manager can be called from another thread when another thread is in between SerializeAllProcessors calls.

We can either allocate 2 pages instead of one or use system call to alloc the page memory manager doesn't know about.</ns0:content><ns0:updated>2011-07-12T15:34:33.000Z</ns0:updated><ns0:published>2011-07-12T15:34:33.000Z</ns0:published><ns2:updates>
			<ns2:label>-Pri-0</ns2:label><ns2:label>Pri-1</ns2:label></ns2:updates><ns0:title>Comment 1 by halya...@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=1989#c1" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/1989/comments/full/1" rel="self" type="application/atom+xml" /></ns0:entry>