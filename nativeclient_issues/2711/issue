<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;AkECR347eCl7ImA9WhVXEUs.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/2711</ns0:id><ns0:author>
			<ns0:name>dsch...@google.com</ns0:name><ns0:uri>/u/104270846665912603141/</ns0:uri></ns0:author><ns0:content type="html">LLVM has an optimization to try to omit generation of a cmp instruction by
reusing the FLAGS result of a previous instruction (e.g. an add) where possible.

pm_manifest_file_test has the following bitcode:
define fastcc void @Worker::ShouldExit()() align 2 {
entry:
  %0 = load i32* undef, align 4, !tbaa !1
  %dec.i = add nsw i32 %0, -1
  store i32 %dec.i, i32* undef, align 4, !tbaa !1
  tail call fastcc void @pthread_mutex_unlock() nounwind
  %tobool.not.i = icmp eq i32 %dec.i, 0
  br i1 %tobool.not.i, label %delete.notnull.i, label %_ZN6Worker5UnrefEv.exit

LLVM uses this optimization, but then is required to attempt to save and restore EFLAGS across the call, which requires pushf/popf, which are illegal in nacl.

The condition to enable this optimization is in X86ISelLowering.cpp::8048 and if you force it to be true (the optimization happens if the condition is false) a cmp instruction is generated before the branch and it works like normal. We could just disable this optimization entirely but it would be nice if we could figure out how to just disable it in cases like this. 

This is probably the right thing to do in this even outside of nacl because a register cmp is much less expensive than pushf/popf.</ns0:content><ns0:updated>2012-04-11T18:24:26.000Z</ns0:updated><ns0:published>2012-04-05T00:21:32.000Z</ns0:published><ns2:status>Fixed</ns2:status><ns2:state>closed</ns2:state><ns0:title>LLVM tries to preserve EFLAGS across calls</ns0:title><ns2:label>Type-Defect</ns2:label><ns2:label>Mstone-X</ns2:label><ns2:label>Pri-1</ns2:label><ns2:label>Component-PNaCl</ns2:label><ns2:label>OS-All</ns2:label><ns2:label>Arch-x86-64</ns2:label><ns2:label>Arch-x86-32</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/2711/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2711" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/2711" rel="self" type="application/atom+xml" /><ns2:stars>2</ns2:stars><ns2:closedDate>2012-04-11T18:24:26.000Z</ns2:closedDate><ns2:id>2711</ns2:id></ns0:entry>