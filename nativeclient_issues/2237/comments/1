<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;D08FSX47eCl7ImA9WhdaFEU.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/2237/comments/full/1</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">I put together the following change to fix this issue: http://codereview.chromium.org/8226008/  However, I encountered a couple of problems with this change which mean I'll have to rethink it:

 1) The valgrind bot found a problem with it on x86-64 Linux.  It turns out that pthread_exit() unwinds the stack.  Before my change, NaClSyscallSeg calls NaClSyscallCSegHook(), but NaClSyscallSeg has no unwind info, so the unwinding stops there.  My change attempts to make it appear that NaClStartThreadInApp() calls NaClSyscallCSegHook(), but the latter is called with untrusted code's value of %rbp which causes unwinding the trusted stack to segfault (since gcc typically compiles NaClStartThreadInApp() to use a frame pointer).

 2) The change is not quite right for Windows either.  Although MSVC typically does not use a frame pointer when compiling NaClStartThreadInApp(), it is allowed to do so, which would fail because I'm not preserving %rbp when calling NaClSyscallCSegHook().  If I insert a call to _alloca() into NaClStartThreadInApp(), MSVC compiles it using a frame pointer, which causes my test to fail.

Ideally I'd like to tell the stack unwinder to stop at NaClSyscallCSegHook()'s frame.  I can do that on Linux (using the same declaration as glibc's sysdeps/unix/sysv/linux/x86_64/clone.S).  But I don't see any way to do that with Windows' unwind info.

Another way of doing this would be to save %rbp on the stack (plus other callee-saved registers, since the compiler may use any of these as a frame pointer), and add Windows unwind info to specify how to restore them.  But I am not sure whether the GNU assembler supports generating Windows x86-64 unwind info.

I think it might be simpler to add an explicit __try/__catch around NaClSyscallCSegHook() and run the SetUnhandledExceptionFilter() callback explicitly from the __catch block.</ns0:content><ns0:updated>2011-10-24T19:50:18.000Z</ns0:updated><ns0:published>2011-10-24T19:50:18.000Z</ns0:published><ns2:updates>
			<ns2:status>Started</ns2:status></ns2:updates><ns0:title>Comment 1 by mseaborn@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2237#c1" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/2237/comments/full/1" rel="self" type="application/atom+xml" /></ns0:entry>