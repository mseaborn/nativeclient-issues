<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;DEMDRX47eCl7ImA9WhZUFEs.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/1890/comments/full/5</ns0:id><ns0:author>
			<ns0:name>mcgra...@chromium.org</ns0:name><ns0:uri>/u/109286297231979736865/</ns0:uri></ns0:author><ns0:content type="html">&gt; 1. I don't see -lppapi in any of the logs I mentioned.

Look again.  In scons it is ${PPAPI_LIBS} or ${NON_PPAPI_BROWSER_LIBS}.

&gt; 2. How ppapi get the segment gap with static linking?  Is libppapi.a a linker
script?

Yes, though it's not actually the direct issue that it be a linker script.
What controls the linking magic is having something define the symbol
__nacl_rodata_start.

&gt; Leaving the naming behind, there is a pretty large area in libc functionality on
&gt; top of IRT that needs to be tested regularly, both on newlib and glibc.  This
&gt; includes threading, TLS, file access, other interfaces calling directly to IRT.

Indeed.  My point was that there is also merit to the status quo of testing
those things independent of the IRT, so that we distinguish the testing of
those things themselves from testing the whole IRT setup.

&gt; Earlier I did not consider the tests for IRT very useful.  Okay, good.  Now
&gt; since we have the (overengineered?) system with more than one libc/libstdc++
&gt; layer, we should test each layer separately and deal with the build/test
&gt; complication.

Agreed.
</ns0:content><ns0:updated>2011-06-07T17:07:54.000Z</ns0:updated><ns0:published>2011-06-07T17:07:54.000Z</ns0:published><ns2:updates /><ns0:title>Comment 5 by mcgra...@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=1890#c5" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/1890/comments/full/5" rel="self" type="application/atom+xml" /></ns0:entry>