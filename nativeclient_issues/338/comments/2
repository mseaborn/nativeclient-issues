<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;C0EMRH47eCl7ImA9WxBUFk4.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/338/comments/full/2</ns0:id><ns0:author>
			<ns0:name>ile...@google.com</ns0:name><ns0:uri>/u/104834035110555747685/</ns0:uri></ns0:author><ns0:content type="html">My current code modifies breakpad to use Vectored Exception Handling rather than SEH. 
This allows us to safely intercept exceptions from untrusted code. VEH is available 
in all supported versions of Windows.

VEH is invoked pre-SEH, and does not involve stack unwinding. Our VEH handler aborts 
after calling the Breakpad crash report functionality.

Therefore I do not think it likely that an attacker could exploit stack unwinding. To 
do so, the attacker would need to uninstall our VEH handler. This would require a 
syscall or direct surgery on the TEB. Syscalls should be disallowed by our sandbox, 
and direct TEB writes are disallowed by both our sandbox and the Windows kernel.

</ns0:content><ns0:updated>2010-03-03T15:54:45.000Z</ns0:updated><ns0:published>2010-03-03T15:54:45.000Z</ns0:published><ns2:updates /><ns0:title>Comment 2 by ile...@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=338#c2" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/338/comments/full/2" rel="self" type="application/atom+xml" /></ns0:entry>