<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;C0cFRX47eCl7ImA9WxBSFkw.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/230/comments/full/2</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">My earlier statement was wrong: PLT entries can be used as indirect jump targets due to a 
corner case in ELF.

If the process's executable contains a PLT entry for a function foo(), any library that 
takes the address of foo() will get the address of the PLT entry.

This is so that
1) foo() appears to have the same address for all ELF objects, and
2) code generated for the executable's object files does not have to get foo()'s address 
from a GOT entry.

Example:

library.so is built from:
void foo() { printf("%p\n", foo); }

executable is built from:
int main() { printf("%p\n", foo); foo(); return 0; }

This prints the fixed address of the PLT entry inside the executable, twice.
</ns0:content><ns0:updated>2009-12-23T23:30:14.000Z</ns0:updated><ns0:published>2009-12-23T23:30:14.000Z</ns0:published><ns2:updates /><ns0:title>Comment 2 by mseaborn@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=230#c2" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/230/comments/full/2" rel="self" type="application/atom+xml" /></ns0:entry>