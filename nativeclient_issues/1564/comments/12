<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CEIBQ347eCl7ImA9WhZSE0g.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/1564/comments/full/12</ns0:id><ns0:author>
			<ns0:name>pdox%goo...@gtempaccount.com</ns0:name><ns0:uri>/u/104735739662288482898/</ns0:uri></ns0:author><ns0:content type="html">The miscompile is occurring in TerminatorInst::getSuccessor().

Stack trace:

return getSuccessorV(idx); // in TerminatorInst::getSuccessor()
return Term-&gt;getSuccessor(idx); // in SuccIterator&lt;TerminatorInst*, BasicBlock&gt;::operator*
NodeType *Next = *It++; // in df_iterator::toNext()
toNext(); // in df_iterator::operator++()
++NI; // in LoopInfoBase::Calculate()
LI.Calculate(XYZ); // in LoopInfo::runOnFunction()
LI = &amp;getAnalysis&lt;LoopInfo&gt;();  // in LoopSimplify::runOnLoop()

Unfortunately, these functions are inlined into each other and appear multiple times due to unrolling and flattening of branches. Not all instances of these functions are broken, the bug is triggered the first time the conditional:

if (Next &amp;&amp; !this-&gt;Visited.count(Next)) { // in df_iterator::toNext()

is false, causing a branch into a different path.
</ns0:content><ns0:updated>2011-03-28T22:49:12.000Z</ns0:updated><ns0:published>2011-03-28T22:49:12.000Z</ns0:published><ns2:updates /><ns0:title>Comment 12 by pdox%goo...@gtempaccount.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=1564#c12" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/1564/comments/full/12" rel="self" type="application/atom+xml" /></ns0:entry>