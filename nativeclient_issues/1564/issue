<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CEYESH47eCl7ImA9WhZSFkU.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/1564</ns0:id><ns0:author>
			<ns0:name>pdox%goo...@gtempaccount.com</ns0:name><ns0:uri>/u/104735739662288482898/</ns0:uri></ns0:author><ns0:content type="html">In the LLVM self-build, llc (supporting all 3 targets) is compiled into a pexe:
  toolchain/linux_arm-untrusted/tools-sb/universal/srpc/bin/llc.pexe

This pexe is then translated 3 times:
  pnacl-translate -arch x86-32 llc.pexe -o llc.x8632.nexe
  pnacl-translate -arch x86-64 llc.pexe -o llc.x8664.nexe
  pnacl-translate -arch arm llc.pexe -o llc.arm.nexe

The translation is done using the non-sandboxed LLVM build. 

The resulting X86-32 nexe works correctly, and passes Spec2K.

However, both ARM and X86-64 do not pass Spec2K.

To demonstrate the problem with X86-64:

1) Copy the nexe into the sandboxed translator location:
cp toolchain/linux_arm-untrusted/tools-sb/universal/srpc/bin/llc.x8664.nexe \
toolchain/linux_arm-untrusted/tools-sb/x8664/srpc/bin/llc 

2) Run any Spec2K test:
tools/llvm/utman.sh test-spec &amp;lt;specdir&amp;gt; SetupPnaclTranslatorX8664Opt train 176.gcc

3) The result:

assertion &amp;quot;Chain.getNode() &amp;amp;&amp;amp; Chain.getValueType() == MVT::Other &amp;amp;&amp;amp; &amp;quot;LowerCall didn't return a valid chain!&amp;quot;&amp;quot; failed: file &amp;quot;/usr/local/google/dev5/native_client/hg/llvm/llvm-trunk/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp&amp;quot;, line 6157, function: std::pair&amp;lt;llvm::SDValue, llvm::SDValue&amp;gt; llvm::TargetLowering::LowerCallTo(llvm::SDValue, const llvm::Type*, bool, bool, bool, bool, unsigned int, llvm::CallingConv::ID, bool, bool, llvm::SDValue, std::vector&amp;lt;llvm::TargetLowering::ArgListEntry, std::allocator&amp;lt;llvm::TargetLowering::ArgListEntry&amp;gt; &amp;gt;&amp;amp;, llvm::SelectionDAG&amp;amp;, llvm::DebugLoc) const

4) In fact, this assertion happens even when trying to translate this hello world bitcode:

@.str = private constant [12 x i8] c&amp;quot;hello world\00&amp;quot;, align 4
define i32 @main() nounwind {
entry:
  %0 = call i32 @puts(i8* getelementptr inbounds ([12 x i8]* @.str, i32 0, i32 0)) nounwind
  ret i32 0
}
declare i32 @puts(i8*)
</ns0:content><ns0:updated>2011-04-01T18:21:49.000Z</ns0:updated><ns0:published>2011-03-22T08:33:52.000Z</ns0:published><ns2:status>Fixed</ns2:status><ns2:state>closed</ns2:state><ns0:title>X86-64 backend mis-compiles "llc.pexe"</ns0:title><ns2:label>Type-Defect</ns2:label><ns2:label>Pri-0</ns2:label><ns2:label>Component-PNaCl</ns2:label><ns2:label>OS-All</ns2:label><ns2:label>Arch-x86-64</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/1564/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=1564" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/1564" rel="self" type="application/atom+xml" /><ns2:stars>2</ns2:stars><ns2:blocking>
			<ns2:id>1542</ns2:id><ns2:project>nativeclient</ns2:project></ns2:blocking><ns2:closedDate>2011-04-01T18:21:49.000Z</ns2:closedDate><ns2:id>1564</ns2:id></ns0:entry>