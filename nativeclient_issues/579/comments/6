<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CkMDQn47eCl7ImA9Wx5UEUo.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/579/comments/full/6</ns0:id><ns0:author>
			<ns0:name>cbiffle@google.com</ns0:name><ns0:uri>/u/cbiffle@google.com/</ns0:uri></ns0:author><ns0:content type="html">Hm, so really what we've got here is a bug in a NaCl syscall that can cause it to try to manipulate inaccessible memory, under the control of an untrusted program.  This seems like it could spawn an interesting class of tests.

In particular, after talking it over with Noel, I see that this cannot be used to trick Breakpad into unwinding into the untrusted stack: it correctly identifies the fault in trusted code and stays there.  (Should've read this closer to begin with.)

I am inclined to agree with Noel here.  Mark, thoughts?  If you have no objections I'd like to reroute this as a service runtime bug.</ns0:content><ns0:updated>2010-10-15T19:21:13.000Z</ns0:updated><ns0:published>2010-10-15T19:21:13.000Z</ns0:published><ns2:updates>
			<ns2:label>-Pri-0</ns2:label><ns2:label>Pri-2</ns2:label></ns2:updates><ns0:title>Comment 6 by cbiffle@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=579#c6" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/579/comments/full/6" rel="self" type="application/atom+xml" /></ns0:entry>