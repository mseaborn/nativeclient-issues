<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;C0cBQn47eCl7ImA9WxFUE08.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/619/comments/full/1</ns0:id><ns0:author>
			<ns0:name>eaelt...@google.com</ns0:name><ns0:uri>/u/103360015124260446450/</ns0:uri></ns0:author><ns0:content type="html">As for standard linux gdb and standard linux ld.so, for me it worked out of the box. Ping me if you still have issues with this.

GDB sets hidden breakpoint in ld.so, which fires on every load/unload event. When that breakpoint fires, gdb scans tables of shared objects in ld.so (of type link_map from link.h) and processes all changes.

For nacl, the main problem is to deal with runtime ld.so and nacl dynamic loader at the same time. If we have a debug stub in the loader which will hide everything but nacl code from gdb, and if the dynamic linking machinery does not differ from the standard one, there should be no problems.

I hope we don't do anything non-standard in dynamic loading/linking mechanism! Otherwise we'll have a billion of tiny problems here and there...
</ns0:content><ns0:updated>2010-06-23T19:24:13.000Z</ns0:updated><ns0:published>2010-06-23T19:24:13.000Z</ns0:published><ns2:updates /><ns0:title>Comment 1 by eaelt...@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=619#c1" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/619/comments/full/1" rel="self" type="application/atom+xml" /></ns0:entry>