<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CkIFRH47eCl7ImA9WhBVF0U.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/3406/comments/full/1</ns0:id><ns0:author>
			<ns0:name>dsch...@google.com</ns0:name><ns0:uri>/u/104270846665912603141/</ns0:uri></ns0:author><ns0:content type="html">It would be fairly straightforward to just split the pexe into 2 modules on the developer side, fire off 2 translations into 2 native objects in the browser, and link them together in the final link stage. However this extra layer would complicate the wire format, either by having it be aware of 2 modules, or by having to add something (maybe at the current wrapper layer) to wrap 2 modules with the existing wire format. (and they would have to be interleaved for streamability).
It might be possible to only have 1 module in the pexe (when generated on the developer side and on the wire), but have the translator split it into 2 Module objects before doing the translation. For example (assuming the final wire format looks something like the current format), after reading all the module-level data but before reading the function bodies, the translator could somehow clone the module and do 2 separate translations. the symbols would have to be munged but it might be doable.</ns0:content><ns0:updated>2013-04-24T05:15:15.000Z</ns0:updated><ns0:published>2013-04-24T05:15:15.000Z</ns0:published><ns2:updates /><ns0:title>Comment 1 by dsch...@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=3406#c1" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/3406/comments/full/1" rel="self" type="application/atom+xml" /></ns0:entry>