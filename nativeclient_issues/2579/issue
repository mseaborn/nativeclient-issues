<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;D0YDRH47eCl7ImA9WhRbFUs.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/2579</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">There are a couple of things we might do to improve the suspension of untrusted threads that we do during mmap() calls on Windows:

1) From the comment in win/thread_suspension.c:

 * TODO(mseaborn): A possible refinement here would be to do
 * SuspendThread() and GetThreadContext() in separate loops
 * across the threads.  This might be faster, since we would not
 * be waiting for each thread to suspend one by one.  It would
 * take advantage of SuspendThread()'s asynchronous nature.

2) From issue 2569: &amp;quot;I suspect that using atomic operations and using (say) Windows event objects for wakeup [instead of mutexes and condvars] would have less overhead.&amp;quot;
</ns0:content><ns0:updated>2012-02-06T21:52:55.000Z</ns0:updated><ns0:published>2012-02-06T21:52:55.000Z</ns0:published><ns2:status>New</ns2:status><ns2:state>open</ns2:state><ns0:title>Improve performance of Windows thread suspension</ns0:title><ns2:label>Type-Enhancement</ns2:label><ns2:label>Pri-2</ns2:label><ns2:label>Component-TCB</ns2:label><ns2:label>OS-Windows</ns2:label><ns2:label>Performance</ns2:label><ns2:label>CoreRuntime</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/2579/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2579" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/2579" rel="self" type="application/atom+xml" /><ns2:stars>1</ns2:stars><ns2:id>2579</ns2:id></ns0:entry>