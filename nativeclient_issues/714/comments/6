<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;C0INSH47eCl7ImA9Wx5TE0w.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/714/comments/full/6</ns0:id><ns0:author>
			<ns0:name>mseaborn@google.com</ns0:name><ns0:uri>/u/mseaborn@google.com/</ns0:uri></ns0:author><ns0:content type="html">Good catch!  Now that you point this problem out, it seems rather obvious. :-/  If we had had a monotonically-advancing allocation pointer for dynamic code, we would not have had this problem.

Bennet's proposed fix of disallowing bundles containing only HLTs would work, but it does disallow some legitimate use cases, e.g. if a library is HLT-padded to a page boundary in anticipation of faster page-based loading.

There are a couple of alternative fixes:

1) Disallow direct jumps into HLT-filled bundles.  This disallows only marginal legitimate use cases.  However, it would require changing all three validators.

2) Whenever we get a HLT-filled bundle, "HLT HLT HLT ... HLT", rewrite it to "NOP HLT HLT ... HLT".  This avoids breaking the interface.
</ns0:content><ns0:updated>2010-07-28T10:06:39.000Z</ns0:updated><ns0:published>2010-07-28T10:06:39.000Z</ns0:published><ns2:updates>
			<ns2:ccUpdate>mseab...@chromium.org</ns2:ccUpdate></ns2:updates><ns0:title>Comment 6 by mseaborn@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=714#c6" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/714/comments/full/6" rel="self" type="application/atom+xml" /></ns0:entry>