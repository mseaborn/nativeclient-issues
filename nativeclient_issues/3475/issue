<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;DUcBRH47eCl7ImA9WhFTFkw.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/3475</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">LLVM provides the following atomic operations:

 * cmpxchg
 * atomicrmw, with 11 possible operation types (xchg, umax, ...)
 * load atomic
 * store atomic
 * fence (memory barrier) -- not itself an atomic, but it influences other instructions

Total: 11 + 3 = 14 operations (excluding &amp;quot;fence&amp;quot;).
If we include &amp;quot;volatile&amp;quot; variants, this increases to 14*2 = 28 operations.

These are multiplied by the following attributes:

 * Operand size:  i1, i8, i16, i32, i64, float, double (7 types)
 * Memory ordering:  unordered, monotonic, acquire, release, acq_rel, seq_cst (6 options)
 * Synchronization scope:  singlethread vs. crossthread (2 options)

This means there is a large interface surface area to support and test:
28 * 7 * 6 * 2 = 2352 operations (excluding &amp;quot;fence&amp;quot;)

This does not include additional possible interactions with the &amp;quot;align&amp;quot; attribute, which is allowed on &amp;quot;load atomic&amp;quot; and &amp;quot;store atomic&amp;quot;, but not on &amp;quot;cmpxchg&amp;quot; or &amp;quot;atomicrmw&amp;quot;.

To simplify the ABI, we should cut this down.


We could apply the following restrictions:

 1) Disallow orderings other than &amp;quot;seq_cst&amp;quot;.  While using &amp;quot;acquire&amp;quot; and &amp;quot;release&amp;quot; when appropriate might provide a performance boost on ARM, they will tend to behave the same as &amp;quot;seq_cst&amp;quot; on x86.  We can't necessarily trust developers to get this right and to test on ARM.

 2) Remove the &amp;quot;singlethread&amp;quot; attribute.  It appears to only be useful for interacting with signal handlers, which we won't be supporting in the first release of PNaCl.

 3) Disallow 64-bit atomics because not all architectures support true atomic 64-bit operations.  For example, MIPS doesn't.  If a program wants to use 64-bit atomics, it can use a global lock.  We can expand out 64-bit &amp;quot;load/atomic atomic&amp;quot;, &amp;quot;atomicrmw&amp;quot; etc. to code using a global lock in the pexe.

 4) Disallow 8-bit and 16-bit atomics.  These can be implemented in terms of 32-bit atomics in the pexe.

 5) Disallow 'float' as an atomic type, and require floats to be explicitly bitcast to i32 before being used in atomic operations.  (If we allow 64-bit atomics, we should similarly require 'double' to be bitcast to i64.)

 6) Disallow some of the more exotic &amp;quot;atomicrmw&amp;quot; operation types, such as {u,}{min,max}.  All of the atomicrmw operations can be reimplemented as cmpxchg loops.

    Providing atomicrmw is just an optimisation:  it allows the translator to generate &amp;quot;lock add&amp;quot; (for example) instead of a cmpxchg loop when the hardware supports &amp;quot;atomicrmw add&amp;quot; directly.  But I don't think there are CPUs that provide instructions for &amp;quot;atomicrmw umax&amp;quot;.
</ns0:content><ns0:updated>2013-06-07T14:57:35.000Z</ns0:updated><ns0:published>2013-06-06T21:21:02.000Z</ns0:published><ns2:status>Accepted</ns2:status><ns2:owner>
			<ns2:uri>/u/109636895838879576326/</ns2:uri><ns2:username>j...@chromium.org</ns2:username></ns2:owner><ns2:cc>
			<ns2:uri>/u/109636895838879576326/</ns2:uri><ns2:username>j...@chromium.org</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/dschuff@chromium.org/</ns2:uri><ns2:username>dschuff@chromium.org</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/jvoung@chromium.org/</ns2:uri><ns2:username>jvoung@chromium.org</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/112264824292994369940/</ns2:uri><ns2:username>eli...@chromium.org</ns2:username></ns2:cc><ns2:state>open</ns2:state><ns0:title>PNaCl: Define atomic operations allowed in the initial stable ABI</ns0:title><ns2:label>Type-Enhancement</ns2:label><ns2:label>Pri-1</ns2:label><ns2:label>Component-PNaCl</ns2:label><ns2:label>OS-All</ns2:label><ns2:label>PNaClABI</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/3475/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=3475" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/3475" rel="self" type="application/atom+xml" /><ns2:stars>2</ns2:stars><ns2:id>3475</ns2:id></ns0:entry>