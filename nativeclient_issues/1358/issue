<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CEMBQX47eCl7ImA9WhdXEk4.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/1358</ns0:id><ns0:author>
			<ns0:name>b...@google.com</ns0:name><ns0:uri>/u/105821748722532785568/</ns0:uri></ns0:author><ns0:content type="html">It would be nice if the log module did not require a module initializer.  This can trip up new users, esp if the use of the log module were indirect, via the nacl_check.h's CHECK macro.

Both trusted and untrusted code build/use the NaCl log module, in platform and google_nacl_platform libraries respectively.  For trusted code, platform_init is the module initializer that must be called before using any of the platform module's code, and it invokes the (sub-)module initializer for the log (sub-)module.  There is no corresponding module initializer code for untrusted use.

The module initializer for the log module currently must be invoked prior to the application going multithreaded.  This is a side-effect of the NaClMutex abstraction not having an equivalent of PTHREAD_MUTEX_INITIALIZER for static initialization.  In order for the log module to self-initialize on first use of any of the NaClLog* functions, we must do this in a thread-safe way, the equivalent of pthread_once.  We could expose AtomicInt32 and CompareAndSwap on all host OS platforms to do this, though this would require exposing it in nc_thread (it is static now) and renaming with the NaCl prefix to avoid namespace issues, so that the untrusted use of the log module would have the same semantics as the trusted uses.  (This is a toolchain change and DEPS bump.)  Or, we could create NaClThreadOnce, which uses pthread_once in untrusted code and use either AtomicInt32/CompareAndSwap or other, host-OS specific mechanisms.  Then, all NaClLog* functions must (grab a spin lock, run the module initializer if it hadn't already been run, and drop the spin lock) or (NaClThreadOnce the module initializer) prior to actually doing their real work.

NB:  the log module requires NaClTimeStampString from the time module, but that function does not require the time module's initializer to have run in order to work correctly.</ns0:content><ns0:updated>2011-08-25T00:34:10.000Z</ns0:updated><ns0:published>2011-01-26T18:49:02.000Z</ns0:published><ns2:status>Available</ns2:status><ns2:cc>
			<ns2:uri>/u/mseaborn@chromium.org/</ns2:uri><ns2:username>mseaborn@chromium.org</ns2:username></ns2:cc><ns2:state>open</ns2:state><ns0:title>Consider how/whether to have NaClLog module self initialize on first use</ns0:title><ns2:label>Type-Enhancement</ns2:label><ns2:label>Pri-3</ns2:label><ns2:label>Component-TCB</ns2:label><ns2:label>OS-All</ns2:label><ns2:label>Arch-All</ns2:label><ns2:label>Mstone-16</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/1358/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=1358" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/1358" rel="self" type="application/atom+xml" /><ns2:stars>1</ns2:stars><ns2:id>1358</ns2:id></ns0:entry>