<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;A0EGSH47eCl7ImA9WhBWFkw.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/2837</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">&lt;b&gt;- Where are we today?&lt;/b&gt;

Thread Local Storage (TLS) in the PNaCl static linking ABI is complicated.  Specifically:

 1) TLS variables are part of the bitcode format.
 2) The PNaCl translator is responsible for allocating TLS variable indexes.
 3) The layout of TLS varies between architectures.  On x86, TLS variables appear at negative offsets from the thread pointer.  On ARM, TLS variables appear at positive offsets from the thread pointer.  untrusted/nacl/tls_params.h uses LLVM/NaCl intrinsics to read the parameters that describe this layout, and untrusted/nacl/tls.c has to be careful to interpret these parameters.

&lt;b&gt;- Why is this a problem?&lt;/b&gt;

This can make portability complicated.

 * This adds complexity to the system ABI:  It adds to the set of features that the translator has to understand in its input format.
 * It adds complexity to the user threading library, which has to be prepared to handle multiple possible TLS layouts.  It would be easy to write a libpthread implementation that accidentally assumes an x86 TLS layout and doesn't work on ARM.  (I know because I did this at one point while implementing issue 2788.)

&lt;b&gt;- The proposed enhancement:&lt;/b&gt;

 * All architectures should use the same TLS layout.
 * The offsets of TLS variables from the thread pointer should be calculated when the bitcode object is created, and fixed into the bitcode object.

&lt;b&gt;- Exit criteria:&lt;/b&gt;

 * The only support for TLS in PNaCl's system ABI is IRT calls and/or LLVM/NaCl intrinsics for getting and setting the thread pointer.  It is then up to the user code what it does with that thread pointer.

&lt;b&gt;- Anticipated impact:&lt;/b&gt;

 * The PNaCl system ABI (the parts of PNaCl implemented by components included in Chromium) is simpler and has less surface area for us to maintain.
</ns0:content><ns0:updated>2013-04-10T18:47:09.000Z</ns0:updated><ns0:published>2012-06-06T22:21:17.000Z</ns0:published><ns2:status>Fixed</ns2:status><ns2:owner>
			<ns2:uri>/u/mseaborn@chromium.org/</ns2:uri><ns2:username>mseaborn@chromium.org</ns2:username></ns2:owner><ns2:cc>
			<ns2:uri>/u/108394971971967673680/</ns2:uri><ns2:username>s...@google.com</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/102292187274959663599/</ns2:uri><ns2:username>jvo...@google.com</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/dschuff@chromium.org/</ns2:uri><ns2:username>dschuff@chromium.org</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/112264824292994369940/</ns2:uri><ns2:username>eli...@chromium.org</ns2:username></ns2:cc><ns2:state>closed</ns2:state><ns0:title>PNaCl: Allocate TLS offsets at bitcode creation time instead of translation time</ns0:title><ns2:label>Type-Enhancement</ns2:label><ns2:label>Pri-1</ns2:label><ns2:label>Component-PNaCl</ns2:label><ns2:label>OS-All</ns2:label><ns2:label>PNaClABI</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/2837/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2837" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/2837" rel="self" type="application/atom+xml" /><ns2:stars>3</ns2:stars><ns2:blockedOn>
			<ns2:id>2309</ns2:id><ns2:project>nativeclient</ns2:project></ns2:blockedOn><ns2:closedDate>2013-04-10T18:47:09.000Z</ns2:closedDate><ns2:id>2837</ns2:id></ns0:entry>