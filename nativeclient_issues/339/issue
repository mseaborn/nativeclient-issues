<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;A08BRn47eCl7ImA9WxFVEUo.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/339</ns0:id><ns0:author>
			<ns0:name>cbiffle@google.com</ns0:name><ns0:uri>/u/cbiffle@google.com/</ns0:uri></ns0:author><ns0:content type="html">Our current ARM SFI sandbox destructively masks store/branch addresses to 
force them into the sandbox, e.g.
  bic rAddr, rAddr, #DATA_MASK
  str rVal, [rAddr]

This introduces a data dependence between the instruction producing the 
address (bic) and the instruction consuming it (here, str).  For 
simplicity, the current validator accepts no intervening instructions, even 
if they leave rAddr untouched.  (Even if we allowed some code motion, ARM 
bundles are very small at 16 bytes, and our CFG recovery pass would 
interfere.)  On modern high-frequency ARM cores such as the Cortex-A8, this 
forces a stall.

Testing back in November suggested that this alternative sandboxing 
sequence could slash overhead dramatically -- by half or more in some 
tests:
  tst rAddr, #DATA_MASK      @ Set Z if all bits in DATA_MASK are 0
  streq rVal, [rAddr]        @ Store only if rAddr is sandboxed

(A similar sequence uses CMP.)

Rather than a data dependence, we introduce a predicate dependence, which 
the chips are rather more prepared to handle: predicated instructions are 
often immediately after the instructions that govern them.  On the A8 and 
A9 this cuts overhead by half.

This has an interesting side effect: rather than coercing out-of-bounds 
addresses into the sandbox, we simply &amp;quot;blunt&amp;quot; the instructions that consume 
them, eliminating their side effects.  Since in general, NaCl does not 
guarantee any particular semantics for incorrect code (beyond it not 
escaping the sandbox), this is probably okay.  (Even predicated indirect 
jumps falling through isn't an SFI problem, since we don't pack data after 
them etc.)

Of course, when we need to sandbox a *predicated* store or branch, things 
become slightly more interesting.  Analysis of these cases to follow.

This will involve changes to the validator and code generator.  Once we 
start work on this we can create separate sub-bugs for those.</ns0:content><ns0:updated>2010-06-10T14:24:17.000Z</ns0:updated><ns0:published>2010-03-04T01:21:36.000Z</ns0:published><ns2:status>Fixed</ns2:status><ns2:owner>
			<ns2:uri>/u/cbiffle@google.com/</ns2:uri><ns2:username>cbiffle@google.com</ns2:username></ns2:owner><ns2:cc>
			<ns2:uri>/u/cbiffle@google.com/</ns2:uri><ns2:username>cbiffle@google.com</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/110304265766688778552/</ns2:uri><ns2:username>bradc...@google.com</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/108394971971967673680/</ns2:uri><ns2:username>s...@google.com</ns2:username></ns2:cc><ns2:state>closed</ns2:state><ns0:title>Switch ARM to TST-sandbox in all cases where it's possible</ns0:title><ns2:label>Type-Enhancement</ns2:label><ns2:label>Arch-ARM</ns2:label><ns2:label>Pri-1</ns2:label><ns2:label>Component-TrustedRT</ns2:label><ns2:label>Component-DevTools</ns2:label><ns2:label>Performance</ns2:label><ns2:label>Milestone-USENIX-Paper</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/339/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=339" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/339" rel="self" type="application/atom+xml" /><ns2:stars>4</ns2:stars><ns2:blocking>
			<ns2:id>456</ns2:id></ns2:blocking><ns2:closedDate>2010-06-10T14:24:17.000Z</ns2:closedDate><ns2:id>339</ns2:id></ns0:entry>