<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;DUYAQn47eCl7ImA9WhNQFUw.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/3160/comments/full/1</ns0:id><ns0:author>
			<ns0:name>j...@google.com</ns0:name><ns0:uri>/u/116152729282206039235/</ns0:uri></ns0:author><ns0:content type="html">Regarding the strength of TST+LDR/TST+STR sandboxing, see:
https://code.google.com/p/nativeclient/issues/detail?id=3117

We definitely want to use this type of sandboxing because it'll give us better performance than BIC+LDR/BIC+STR. The information leak is one issue that we need to fix (I have a pending CL to get most of the way there), and we obviously need proper liveness information to implement this in LLVM.

Regarding performance of TST sandboxing: ARM only has one architectural NZCV, but the current out-of-order implementations have up to 8 hardware NZCV that are used during renaming. Using BIC implies an address dependency, whereas using TST allows speculative execution and we expect all load/store to actually succeed, so speculative execution of load/store should always be correct.</ns0:content><ns0:updated>2012-11-21T16:59:03.000Z</ns0:updated><ns0:published>2012-11-21T16:59:03.000Z</ns0:published><ns2:updates /><ns0:title>Comment 1 by j...@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=3160#c1" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/3160/comments/full/1" rel="self" type="application/atom+xml" /></ns0:entry>