<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;DkQAQ347eCl7ImA9WhdUGUk.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/2275/comments/full/8</ns0:id><ns0:author>
			<ns0:name>mips3...@gmail.com</ns0:name><ns0:uri>/u/111365626334037991754/</ns0:uri></ns0:author><ns0:content type="html">Thank you very much for the initial feedback.

- the common trampoline code was previously part of each trampoline, then we moved it to a separate code space, but you are right, the correct place is inside of NaClSyscallSeg. We will change that.

- as of the overhead, we do not have sufficient information yet. Some benchmarks, such as Dhrystone, have been run so far, but we will let you know when more results become available.

- speaking of register t3, it does not contain 0x3ffffff0, it is a value that is set on the runtime by sel_ldr based on the address of data segment. We believe the expense of using two registers for sandboxing masks is not high, and initial results seem to say the same.

- the guard region is 32KB wide.</ns0:content><ns0:updated>2011-10-06T23:39:02.000Z</ns0:updated><ns0:published>2011-10-06T23:39:02.000Z</ns0:published><ns2:updates /><ns0:title>Comment 8 by mips3...@gmail.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2275#c8" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/2275/comments/full/8" rel="self" type="application/atom+xml" /></ns0:entry>