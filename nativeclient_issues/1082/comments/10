<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;D0IEQX47eCl7ImA9Wx5bE0U.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/1082/comments/full/10</ns0:id><ns0:author>
			<ns0:name>b...@google.com</ns0:name><ns0:uri>/u/105821748722532785568/</ns0:uri></ns0:author><ns0:content type="html">BSG requires a variation of address space squatting in the untrusted code.  imagine a user app that starts up, allocates some memory, then decides to invoke dlopen.  the memory allocation might have used up the corresponding data address space for the dynamic code region.  if there's no coordination, the dlopen's mmap MAP_FIXED will trash the user data that's already there, resulting in chaos.  one obvious way to ameliorate this is to pre-allocate the entire data memory region that corresponds to (big-gap away from) the dynamic code region.  however, since we do not have MAP_NORESERVE, we take a 2x hit on committed memory -- which is costly on no-swap devices.</ns0:content><ns0:updated>2010-10-29T20:51:40.000Z</ns0:updated><ns0:published>2010-10-29T20:51:40.000Z</ns0:published><ns2:updates /><ns0:title>Comment 10 by b...@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=1082#c10" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/1082/comments/full/10" rel="self" type="application/atom+xml" /></ns0:entry>