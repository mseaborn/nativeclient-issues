<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;C0QHRH47eCl7ImA9Wx5QGEs.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/826/comments/full/3</ns0:id><ns0:author>
			<ns0:name>pa...@google.com</ns0:name><ns0:uri>/u/101628056640429344673/</ns0:uri></ns0:author><ns0:content type="html">The code in http://codereview.chromium.org/3320011/show can be improved by:

1. instrumenting only loops that don't contain call instructions

2. instrumenting dominator backedges instead of DFS backedges (i.e. always instrument in the end of do{ ... }while() loops, while currently the head of the loop can be chosen for instrumentation)

3. inlining the flag test part of the __nacl_suspend_thread_if_needed ()

4. instrumenting only long-running loops

Additionally, some GCC builtins (or library functions) like strcpy, strcmp (written in assembly) are still lacking the instrumentation. This may result in long-to-suspend threads. This is easy to fix, but I would like to look at results of experiments with thread suspension in real apps before optimizing this.</ns0:content><ns0:updated>2010-09-07T12:08:55.000Z</ns0:updated><ns0:published>2010-09-07T12:08:55.000Z</ns0:published><ns2:updates /><ns0:title>Comment 3 by pa...@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=826#c3" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/826/comments/full/3" rel="self" type="application/atom+xml" /></ns0:entry>