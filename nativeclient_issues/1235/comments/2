<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;D0YMRH47eCl7ImA9Wx9SGU8.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/1235/comments/full/2</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">Hiding the base address in the x86-64 sandbox would be great, but its
exposure is built quite deeply into the current sandbox: It is exposed
via "callq", which pushes the full value of %rip onto the stack.

To address this, we could replace

  callq func

with

  lea   after_call(%rip), %rNd
  pushq %rN
  jmp   func
.align 32
after_call:

We could even change the "pushq" to a "pushl", which would save some
stack space.  (We are currently pushing 64-bit return values and using
only the bottom 32 bits.)  However, that would change the ABI.  The
x86-64 ABI's current 16-byte stack alignment wastes some stack anyway
-- stack is considered to be cheap.

It would be interesting to see how much more expensive this calling
sequence is.</ns0:content><ns0:updated>2010-12-09T20:06:25.000Z</ns0:updated><ns0:published>2010-12-09T20:06:25.000Z</ns0:published><ns2:updates /><ns0:title>Comment 2 by mseaborn@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=1235#c2" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/1235/comments/full/2" rel="self" type="application/atom+xml" /></ns0:entry>