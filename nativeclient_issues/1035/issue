<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;C0AARH47eCl7ImA9WhZTE0Q.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/1035</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">r3432 broke x86-32 signal handling so that it no longer correctly
handles faults from untrusted code.

The test for %cs in ExceptionCatch() in nacl_signal.c is wrong.  It
checks the *current* value of %cs rather than checking the value of
%cs from when the fault occurred.  This means &amp;quot;cs !=
NaClGetGlobalCs()&amp;quot; will never be true.  The signal handler will not
restore the proper value of %gs so it will probably crash when it
calls libc later.

This is probably exploitable.  Some builds of glibc use %gs to get the
address of a routine for performing syscalls.  If the correct value of
%gs is not restored, untrusted code can cause the signal handler to
jump to an address of its choice.  The only difficulty would be
finding an address containing known code to jump to, but this would be
trivial with the zero-address-based sandbox.

The test for handling faults in untrusted code was mostly disabled in
r3432 so that it no longer checks that sel_ldr produces the message
&amp;quot;** Fault in NaCl untrusted code&amp;quot;.  It's not surprising that if there
is no test for this functionality, the functionality no longer works.
So please do not disable tests!

I discovered this by accident when I noticed that crashing code was
not producing the fault message.</ns0:content><ns0:updated>2011-03-17T19:55:45.000Z</ns0:updated><ns0:published>2010-10-14T22:14:15.000Z</ns0:published><ns2:status>Fixed</ns2:status><ns2:cc>
			<ns2:uri>/u/113000403807150741221/</ns2:uri><ns2:username>noelal...@google.com</ns2:username></ns2:cc><ns2:state>closed</ns2:state><ns0:title>Signal handler broken on Linux x86-32; might be insecure</ns0:title><ns2:label>Type-Defect</ns2:label><ns2:label>Pri-0</ns2:label><ns2:label>Component-TCB</ns2:label><ns2:label>OS-Linux</ns2:label><ns2:label>Arch-x86-32</ns2:label><ns2:label>Security</ns2:label><ns2:label>Milestone-Arctic-Sea</ns2:label><ns2:label>FaultHandler</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/1035/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=1035" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/1035" rel="self" type="application/atom+xml" /><ns2:stars>1</ns2:stars><ns2:closedDate>2010-10-21T22:41:29.000Z</ns2:closedDate><ns2:id>1035</ns2:id></ns0:entry>