<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;Ak8DSX47eCl7ImA9Wx5UFUQ.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/562/comments/full/10</ns0:id><ns0:author>
			<ns0:name>k...@google.com</ns0:name><ns0:uri>/u/112873510090665368075/</ns0:uri></ns0:author><ns0:content type="html">I fail to see the problems with Linux implementation.

* Linux's futex only works on shared memory pages if you don't specify FUTEX_PRIVATE_FLAG flag
* My emulation of futex works with read-only pages too

Actually Linux offers few other unimplemented features (for example PriorityInversed mutexes) - but again, they are only available if TCB will not filter these bits.

Implementation of "reduced futex API" using native Linux futexes is pretty straightforward: just filter flags not supported by futex emulation. This exactly what we are doing for other syscalls (like read or mmap) so it's not clear why it's especially hard.

It's true that implementation of futexes using native Linux futexes will be subtly different from implementation of futexes using emulated mutexes and condvars - but these implementations are ALSO different because they use different OS-specific primitives so the only thing we are getting in exchange to our current approach is additional code in TCB and nothing else.</ns0:content><ns0:updated>2010-10-20T18:21:18.000Z</ns0:updated><ns0:published>2010-10-20T18:21:18.000Z</ns0:published><ns2:updates /><ns0:title>Comment 10 by k...@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=562#c10" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/562/comments/full/10" rel="self" type="application/atom+xml" /></ns0:entry>