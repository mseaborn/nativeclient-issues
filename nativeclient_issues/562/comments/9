<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;C0UFRH47eCl7ImA9Wx5UFUQ.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/562/comments/full/9</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">@khim: Actually, implementing NaCl futexes in terms of Linux futexes is not straightforward, because a naive implementation would create many differences between Windows/Mac and Linux implementation, and we are trying to avoid platform differences.  I mentioned some problems above.

Specifically:
 * Linux's futex() works on shared memory pages.  This can be useful, but is not needed by libpthread, and could be difficult to implement on Windows and Mac.
 * Linux's futex() can work on read-only pages too.  This creates a undesirable side channel between two processes that share read-only mappings to (for example) a library.  The two processes should not be able to communicate via this mapping, but futex() allows that.</ns0:content><ns0:updated>2010-10-20T16:13:35.000Z</ns0:updated><ns0:published>2010-10-20T16:13:35.000Z</ns0:published><ns2:updates /><ns0:title>Comment 9 by mseaborn@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=562#c9" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/562/comments/full/9" rel="self" type="application/atom+xml" /></ns0:entry>