<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;C04DQH47eCl7ImA9WxFWFko.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/562/comments/full/1</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">I think the problem is that we don't have lightweight locks.  Every
mutex operation -- create, lock, unlock, destroy -- involves a NaCl
syscall, even in the uncontended cases.

Contrast this with Linux-glibc's NPTL (New POSIX Thread Library).
Mutex creation happens in memory without a syscall, and lock/unlock
only involves a syscall (the futex() syscall) in the uncontended case.
I suspect NaCl should do something similar.

Requiring a syscall to create a mutex also makes it tricky to
implement PTHREAD_MUTEX_INITIALIZER (and it variants, such as
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP) -- although nc_mutex.c does
manage to do this, using a spinlock.

Implementing a futex()-like interface could be tricky when it comes to
its shared memory semantics, especially on Windows.  I suspect that we
do not want an interface exactly like futex(), because it is slightly
odd in the way it creates an additional communications channel based
on the identity of memory pages.
</ns0:content><ns0:updated>2010-06-04T17:19:31.000Z</ns0:updated><ns0:published>2010-06-04T17:19:31.000Z</ns0:published><ns2:updates /><ns0:title>Comment 1 by mseaborn@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=562#c1" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/562/comments/full/1" rel="self" type="application/atom+xml" /></ns0:entry>