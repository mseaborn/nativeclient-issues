<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;A0EBRX47eCl7ImA9WhdQF0o.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/2154/comments/full/9</ns0:id><ns0:author>
			<ns0:name>kschi...@google.com</ns0:name><ns0:uri>/u/108470876877739532758/</ns0:uri></ns0:author><ns0:content type="html">As long as one is using the compilers, this isn't an issue. The problem is that the rules for instruction forms we accept is not based on a mnemonic. Rather, in some cases, it is based on limitations to the partial decoder used by the x86-32 validator. This makes the set of instructions we allow (and their forms) unintuitive. If we switch to the new decoder, these problems go away.

The part that will change is that we will allow more instruction forms when we change to the new decoder. This has two benefits: (1) The rules get easier, and (2) we don't disallow anything we currently allow.

I don't think that the blocked issues are necessary for M15, unless we MUST clean up these corner cases (which is not needed if developers are using the compiler tools). The main effect of this change is in hand-coded assembly, which will be hard to tune to the arcane rules that currently exist for the x86-32 validator.

My understanding is that these effects will not effect M15 getting out the door.</ns0:content><ns0:updated>2011-08-19T18:47:34.000Z</ns0:updated><ns0:published>2011-08-19T18:47:34.000Z</ns0:published><ns2:updates /><ns0:title>Comment 9 by kschi...@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2154#c9" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/2154/comments/full/9" rel="self" type="application/atom+xml" /></ns0:entry>