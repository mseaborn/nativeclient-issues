<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;D0QCQ347eCl7ImA9WhJTE0U.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/2154</ns0:id><ns0:author>
			<ns0:name>kschi...@google.com</ns0:name><ns0:uri>/u/108470876877739532758/</ns0:uri></ns0:author><ns0:content type="html">There are many bugs filed about the x86-32 validator, where why the instruction is not even recognized, or why it prints out an instruction that is incorrect.

&lt;b&gt;- Where are we today?&lt;/b&gt;

There are two problems here.

(1) There are many (complex) assumptions about code validation that includes building assumptions into the decoder. One example is that if prefix 66 is used with a multibyte instruction, it must correspond to the corresponding instruction that is based on the 66 prefix. However, this assumption is not correct. There are (corresponding multi-byte) instructions that only use the prefix 66 to define data size, and are not defined under the 66 prefix. There are many more such rules that are too long to list here.

(2) The decoder makes assumptions about the parameters. For cases where prefix bytes are not specified, these assumptions are incorrect. As a result, the decoded instruction (via ncdis) is wrong in such cases. For the validator, this is a non-issue since (except for jump instructions) the validator does not even need to understand operands, and hence, does not have (correct) code to fully understand these issues.

&lt;b&gt;- Why is this a problem?&lt;/b&gt;
Many bugs have been filed about the x86-32 validator, claiming it can't handle instructions. Many of these cases are confusing because acceptance is based NOT on a rule (such as only only one prefix byte is allowed), since the decision also includes representation (and efficiency) issues for multi-byte instructions. The rules of acceptance are very confusing.

Further, the decoder does not make it clear that it doesn't understand the instruction. Hence, the user thinks that the ncdis tool is flaky.

&lt;b&gt;- The proposed enhancement:&lt;/b&gt;
Change the decoder for the x86-32 validator to use the decoder in
   native_client/src/trusted/validator/x86/decoder

This will provide:

(1) A full decoder that handles ncdis correctly.

(2) Better handles prefix bytes and multi-byte instructions.

(3) If simplifications are used to partially match instructions, the decoder
ncdis will explicitly show those assumptions.

&lt;b&gt;- Exit criteria:&lt;/b&gt;
When the x86-32 validator can be safely replace its decoder with the corresponding replacement decoder.

&lt;b&gt;- Anticipated impact:&lt;/b&gt;
&lt;b&gt;[for users as well as other parts of the system]&lt;/b&gt;
</ns0:content><ns0:updated>2012-06-22T17:16:02.000Z</ns0:updated><ns0:published>2011-08-16T18:56:21.000Z</ns0:published><ns2:status>WontFix</ns2:status><ns2:owner>
			<ns2:uri>/u/108470876877739532758/</ns2:uri><ns2:username>kschi...@google.com</ns2:username></ns2:owner><ns2:state>closed</ns2:state><ns0:title>Fix decoding issues in the x86-32 validator by using the new decoder.</ns0:title><ns2:label>Type-Enhancement</ns2:label><ns2:label>Pri-2</ns2:label><ns2:label>Component-TCB-Validator</ns2:label><ns2:label>OS-All</ns2:label><ns2:label>Arch-x86-32</ns2:label><ns2:label>Mstone-16</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/2154/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2154" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/2154" rel="self" type="application/atom+xml" /><ns2:stars>3</ns2:stars><ns2:blockedOn>
			<ns2:id>2171</ns2:id><ns2:project>nativeclient</ns2:project></ns2:blockedOn><ns2:blocking>
			<ns2:id>893</ns2:id><ns2:project>nativeclient</ns2:project></ns2:blocking><ns2:blocking>
			<ns2:id>1903</ns2:id><ns2:project>nativeclient</ns2:project></ns2:blocking><ns2:blocking>
			<ns2:id>1903</ns2:id><ns2:project>nativeclient</ns2:project></ns2:blocking><ns2:blocking>
			<ns2:id>1937</ns2:id><ns2:project>nativeclient</ns2:project></ns2:blocking><ns2:blocking>
			<ns2:id>1938</ns2:id><ns2:project>nativeclient</ns2:project></ns2:blocking><ns2:blocking>
			<ns2:id>1950</ns2:id><ns2:project>nativeclient</ns2:project></ns2:blocking><ns2:blocking>
			<ns2:id>1961</ns2:id><ns2:project>nativeclient</ns2:project></ns2:blocking><ns2:blocking>
			<ns2:id>2090</ns2:id><ns2:project>nativeclient</ns2:project></ns2:blocking><ns2:blocking>
			<ns2:id>2094</ns2:id><ns2:project>nativeclient</ns2:project></ns2:blocking><ns2:closedDate>2012-02-22T22:53:29.000Z</ns2:closedDate><ns2:id>2154</ns2:id></ns0:entry>