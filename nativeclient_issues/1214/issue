<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;AkQGQH47eCl7ImA9WhVVFk0.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/1214</ns0:id><ns0:author>
			<ns0:name>pa...@google.com</ns0:name><ns0:uri>/u/101628056640429344673/</ns0:uri></ns0:author><ns0:content type="html">The __WORDSIZE definition in glibc is coming from sysdeps/x86_64/bits/wordsize.h.  Currently it is defined as 64, which is unchanged from x86-64 glibc. Our changes touch sysdeps/generic/stdint.h to correctly define int64_t, int32_t and similar.


=== Arguments for __WORDSIZE == 32:

* nacl64-glibc has ILP32 model which makes a fair argument that __WORDSIZE should be defined the same way as for nacl32-glibc. Not-so-portable programs that check for __WORDSIZE would recompile smoothly for nacl64-glibc.


=== Arguments for __WORDSIZE == 64:

* portable programs should not use the __WORDSIZE macro anyway, instead they should use types with known size (int64_t, int32_t etc.) or use these macros: __x86_64__, _ILP32, __native_client__

* larger wordsize can be used effectively for optimizations (glibc itself uses such optimizations in stdio-common/printf_fp.c, stdio-common/_itoa.c, stdlib/strtod_l.c), however, there are not many optimizations applied in glibc, which can be handled case by case


=== Porting glibc

There are probably too many __WORDSIZE checks across the glibc codebase:
shell$ grep -R __WORDSIZE . | grep -v powerpc | grep -v sparc | wc -l
229

* __WORDSIZE is used to choose between versions of inline assembly (including choice made in C headers, where 64 means that the platform is x86-64), this was the main reason to choose for __WORDSIZE == 64 for porting glibc to x86-64. I.e. I aimed to minimize the amount of changes in the inline assembly choice.

* with __WORDSIZE == 64 glibc assumed long == long long, which had to be changed otherwise in NaCl

* some enums or structures are defined differently for different wordsizes (__ptrace_request, __pthread_mutex_t), this is particularly scary, esp. since at the moment NPTL is not ported to nacl64 yet.


=== __WORDSIZE == 32 outside _LIBC

It is possible to apply a hybrid solution: i.e. define wordsize as 64 internally for glibc and define it as 32 externally. There is a small problem with that since installed inttypes.h switches between gnu/stubs-32.h and gnu/stubs-64.h based on __WORDSIZE. The problem is: gnu/stubs-32.h is not present when glibc is installed for 64bit target.


=== Blockers

Currently src/shared/npruntime/npbridge.cc does not compile with __WORDSIZE == 64 because of the incorrect __PRI64_PREFIX defined in inttypes.h</ns0:content><ns0:updated>2012-05-10T00:05:21.000Z</ns0:updated><ns0:published>2010-12-02T17:33:28.000Z</ns0:published><ns2:status>Assigned</ns2:status><ns2:owner>
			<ns2:uri>/u/103360015124260446450/</ns2:uri><ns2:username>eaelt...@google.com</ns2:username></ns2:owner><ns2:cc>
			<ns2:uri>/u/mseaborn@chromium.org/</ns2:uri><ns2:username>mseaborn@chromium.org</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/103360015124260446450/</ns2:uri><ns2:username>eaelt...@google.com</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/112873510090665368075/</ns2:uri><ns2:username>k...@google.com</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/109286297231979736865/</ns2:uri><ns2:username>mcgra...@chromium.org</ns2:username></ns2:cc><ns2:state>open</ns2:state><ns0:title>__WORDSIZE is defined as 64 in x86-64 glibc headers</ns0:title><ns2:label>Type-Enhancement</ns2:label><ns2:label>Pri-2</ns2:label><ns2:label>Component-GLibC</ns2:label><ns2:label>OS-All</ns2:label><ns2:label>Arch-x86-64</ns2:label><ns2:label>Mstone-X</ns2:label><ns2:label>CoreRuntime</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/1214/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=1214" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/1214" rel="self" type="application/atom+xml" /><ns2:stars>3</ns2:stars><ns2:id>1214</ns2:id></ns0:entry>