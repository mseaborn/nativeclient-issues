<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CkENQn47eCl7ImA9WhNXEEs.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/3170/comments/full/1</ns0:id><ns0:author>
			<ns0:name>eli...@chromium.org</ns0:name><ns0:uri>/u/112264824292994369940/</ns0:uri></ns0:author><ns0:content type="html">The problem is that we have MDNodes with tag DW_TAG_compile_unit coming from two modules with the same file path, and thus a duplication is created. This is while DWARF emission logic requires some reliable way to generate an identifier that the MDNode can be mapped to. This capability is used to uniquely identify each compilation unit in a ".file" directive emitted to assembly (and maybe for other uses as well).

The MDNode structure for this tag is:

!0 = metadata !{
  i32,       ;; Tag = 17 + LLVMDebugVersion (DW_TAG_compile_unit)
  i32,       ;; Unused field.
  i32,       ;; DWARF language identifier (ex. DW_LANG_C89)
  metadata,  ;; Source file name
  metadata,  ;; Source file directory (includes trailing slash)
  metadata   ;; Producer (ex. "4.0.1 LLVM (LLVM research group)")
  i1,        ;; True if this is a main compile unit.
  i1,        ;; True if this is optimized.
  metadata,  ;; Flags
  i32        ;; Runtime version
  metadata   ;; List of enums types
  metadata   ;; List of retained types
  metadata   ;; List of subprograms
  metadata   ;; List of global variables
}

Jan's two proposals from the LLVM bug are:

1. Use extra information from the enums, retained types and subprograms/globals. Since the two compilation units have to differ in some respects, a unique ID can be generated. On the other hand, going through this information for large modules may be costly and this is a cost that will always be paid to cover for a need that arises rarely.

2. Use the MDNode pointer address for uniqueness. A possible problem with this approach is non-determinism. Depending on the address assigned by the memory allocator, DWARF output to assembly may be different.

An additional idea is:

3. The problem arises when two modules are linked together by the LLVM linker. Since the modules are fed to the linker in some deterministic order, this order can be used to take part in the unique ID. 

To implement (3) some change to the MDNode will be required; for example, adding another field that specifies a "link order" number. This will be filled in by the linker when the modules are merged, and can then be used by the DWARF emitter.

</ns0:content><ns0:updated>2012-11-27T23:58:13.000Z</ns0:updated><ns0:published>2012-11-27T23:58:13.000Z</ns0:published><ns2:updates /><ns0:title>Comment 1 by eli...@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=3170#c1" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/3170/comments/full/1" rel="self" type="application/atom+xml" /></ns0:entry>