<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;A0IMR347eCl7ImA9WhJaF0w.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/3062/comments/full/12</ns0:id><ns0:author>
			<ns0:name>robertm@google.com</ns0:name><ns0:uri>/u/robertm@google.com/</ns0:uri></ns0:author><ns0:content type="html">The problem is likely an accidental iterator invalidation in SemaInit.cpp

there is a loop  

for (llvm::tie(Con, ConEnd) = S.LookupConstructors(DestRecordDecl);
           Con != ConEnd; ++Con) {

this ultimately calls DeclContext::lookup()
which operates on a 
       mutable llvm::PointerIntPair&lt;StoredDeclsMap*, 1, bool&gt; LookupPtr;

but within the loop we call S.AddTemplateOverloadCandidate/S.AddOverloadCandidate
which seem to cause cause iterators bases on LookupPtr to be invalidated 

I am still tracing down the call chain to see where it happens exactly.</ns0:content><ns0:updated>2012-10-08T18:06:26.000Z</ns0:updated><ns0:published>2012-10-08T18:06:26.000Z</ns0:published><ns2:updates /><ns0:title>Comment 12 by robertm@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=3062#c12" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/3062/comments/full/12" rel="self" type="application/atom+xml" /></ns0:entry>