<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;Ak8DQ347eCl7ImA9WhRUFU8.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/2554/comments/full/6</ns0:id><ns0:author>
			<ns0:name>jvo...@google.com</ns0:name><ns0:uri>/u/102292187274959663599/</ns0:uri></ns0:author><ns0:content type="html">The difference that (3) makes is not in clang, gold, or llc, but in opt.

The way opt initializes the target is through the data-layout in the bitcode + the triple. If it does not have a data-layout in bitcode, then it runs passes without those assumptions, which could mean that it runs fewer passes.


In any case, it would be good to have a consistent data layout...

*) Clang works off of the built-in knowledge of the le32 target.

*) Gold linking works off of the target triple mentioned in the bitcode (which was ARM before having (2)). So this means it will look for the stub backend.

*) Opt works off of the data-layout mentioned in the bitcode, injected by clang (which was stripped before reverting the localmod mentioned for (3)). It also uses the triple mentioned in the bitcode for "TargetLibraryInfo" (which was again ARM before having (2)). This does not look for the stub backend.

*) LLC works off of the target triple mentioned on the commandline (which is whichever little endian ILP32 target you run on).

See attached logs of the various passes run with a bunch of printfs in the TargetData constructor, etc. for more detail.</ns0:content><ns0:updated>2012-01-25T22:01:12.000Z</ns0:updated><ns0:published>2012-01-25T22:01:12.000Z</ns0:published><ns2:updates /><ns0:title>Comment 6 by jvo...@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2554#c6" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/2554/comments/full/6" rel="self" type="application/atom+xml" /></ns0:entry>