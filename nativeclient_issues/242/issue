<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;AkcNQ347eCl7ImA9WhNRE0Q.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/242</ns0:id><ns0:author>
			<ns0:name>cbiffle@google.com</ns0:name><ns0:uri>/u/cbiffle@google.com/</ns0:uri></ns0:author><ns0:content type="html">On x86, when control returns from trusted to untrusted code, it does so 
through the Springboard.  This is important: when we restore the untrusted 
code segment register, it implies a jump into the untrusted memory region, 
so we need a &amp;quot;trusted ally&amp;quot; in this space to finish setting up the 
untrusted context and resume the program.

Neither NaCl/ARM nor NaCl/x86-64 use hardware segmentation.  A return from 
trusted to untrusted code could be effected entirely by C code, as in 
NaClSwitchToApp -- it involves setting up the caller's state, sanitizing 
the return address, and jumping.

On these architectures, enabling direct returns from trusted to untrusted 
code would bring a small performance benefit.  More importantly (from my 
perspective), however, it would simplify things.  The syscall entry/exit 
path is quite indirect, slightly different on each architecture (see issue 
241), and spans about half a dozen source files.  It is not 'obviously 
correct.'  So, removing one indirection would simplify things somewhat, at 
the cost of a deliberate deviation from 'NaCl Classic' on x86.</ns0:content><ns0:updated>2012-11-08T18:08:12.000Z</ns0:updated><ns0:published>2010-01-12T00:57:55.000Z</ns0:published><ns2:status>Fixed</ns2:status><ns2:owner>
			<ns2:uri>/u/mseaborn@chromium.org/</ns2:uri><ns2:username>mseaborn@chromium.org</ns2:username></ns2:owner><ns2:cc>
			<ns2:uri>/u/105821748722532785568/</ns2:uri><ns2:username>b...@google.com</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/cbiffle@google.com/</ns2:uri><ns2:username>cbiffle@google.com</ns2:username></ns2:cc><ns2:state>closed</ns2:state><ns0:title>ARM doesn't really need a springboard.  Maybe we shouldn't have one?</ns0:title><ns2:label>Type-Enhancement</ns2:label><ns2:label>Maintainability</ns2:label><ns2:label>Performance</ns2:label><ns2:label>Component-TCB</ns2:label><ns2:label>Pri-2</ns2:label><ns2:label>Mstone-X</ns2:label><ns2:label>Arch-ARM</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/242/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=242" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/242" rel="self" type="application/atom+xml" /><ns2:stars>4</ns2:stars><ns2:blockedOn>
			<ns2:id>241</ns2:id><ns2:project>nativeclient</ns2:project></ns2:blockedOn><ns2:closedDate>2012-09-04T22:52:48.000Z</ns2:closedDate><ns2:id>242</ns2:id></ns0:entry>