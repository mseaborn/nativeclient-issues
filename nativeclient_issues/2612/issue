<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;DkMCRn47eCl7ImA9WhVTFEs.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/2612</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">The trusted-code hardware exception handlers should be extended with some sanity checks for faults that come from untrusted code, such as:

 * x86-32: Check that %cs, %ds, %es and %ss are set correctly.

 * x86-64: Check that %r15 is set correctly.  Check that %rsp are %rbp are within the sandbox's address space, or (for asynchronous signals that interrupt superinstructions) in the bottom 4GB.

 * ARM: Check that sp is within the sandbox's address space.

Why:

 * Suppose we have a sandboxing bug in which untrusted code can execute a hypothetical instruction that sets %ds to a chosen value and %eip to zero.  Normally this would just crash.  With an exception handler that resets %eip without checking or resetting %ds, this would become exploitable.

 * What happens if a crash occurs in nacl_syscall_*.S or nacl_switch_*.S?  Since %cs, %ds and %gs are changed separately, there are corner cases, and we want to be sure these are handled safely.
</ns0:content><ns0:updated>2012-02-28T21:27:47.000Z</ns0:updated><ns0:published>2012-02-24T07:47:27.000Z</ns0:published><ns2:status>New</ns2:status><ns2:cc>
			<ns2:uri>/u/bradnelson@google.com/</ns2:uri><ns2:username>bradnelson@google.com</ns2:username></ns2:cc><ns2:state>open</ns2:state><ns0:title>Add more sanity checks to harden the trusted exception handlers</ns0:title><ns2:label>Type-Enhancement</ns2:label><ns2:label>Pri-2</ns2:label><ns2:label>Component-TCB</ns2:label><ns2:label>OS-All</ns2:label><ns2:label>Arch-All</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/2612/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2612" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/2612" rel="self" type="application/atom+xml" /><ns2:stars>1</ns2:stars><ns2:id>2612</ns2:id></ns0:entry>