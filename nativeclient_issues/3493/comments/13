<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;D0QERX47eCl7ImA9WhFSEk4.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/3493/comments/full/13</ns0:id><ns0:author>
			<ns0:name>eli...@chromium.org</ns0:name><ns0:uri>/u/112264824292994369940/</ns0:uri></ns0:author><ns0:content type="html">So the remaining options are:

(1) with Jan's proposal.
(3) with the addition that calls to memcpy get renamed to intrinsics in the pexe. This way memcpy doesn't become part of the ABI
(4)

(4) is the lowest effort &amp; risk, because it's just a change for some non-stable-ABI tests (the stable case works without modifications). (3) is the most complex but possibly the most "right" for the long term, because it means there's just one version of memcpy in the nexe - the one provided natively, and all calls to memcpy both in pexe and native libs get linked to it.

Another point to consider is optimizations - as seen earlier in the issue, the bitcode memcpy gets optimized for the newlib calls to it. Leaving these calls undefined prevents the optimization.</ns0:content><ns0:updated>2013-06-14T18:41:44.000Z</ns0:updated><ns0:published>2013-06-14T18:41:44.000Z</ns0:published><ns2:updates /><ns0:title>Comment 13 by eli...@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=3493#c13" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/3493/comments/full/13" rel="self" type="application/atom+xml" /></ns0:entry>