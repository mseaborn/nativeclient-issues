<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CUQGQn47eCl7ImA9WhFSEEs.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/3493/comments/full/3</ns0:id><ns0:author>
			<ns0:name>eli...@chromium.org</ns0:name><ns0:uri>/u/112264824292994369940/</ns0:uri></ns0:author><ns0:content type="html">How these intrinsics get generated by Clang:

When clang sees a call to memmove, it translates it internally to Builtin::BImemmove. This translates to LLVM's IRBuilder::CreateMemMove, which ends up calling Intrinsic::getDeclaration. This function actually creates the overloaded intrinsic name by looking at its arguments.

So for example, a call: memmove(&lt;some char*&gt;, &lt;some char*&gt;, int size) gets translated to:

  call void @llvm.memmove.p0i8.p0i8.i32(i8* %dst, i8* %srz, i32 %size, i32 1, i1 false)

The last two are LLVM intrinsic-special arguments: alignment and volatility.


</ns0:content><ns0:updated>2013-06-12T18:55:23.000Z</ns0:updated><ns0:published>2013-06-12T18:55:23.000Z</ns0:published><ns2:updates /><ns0:title>Comment 3 by eli...@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=3493#c3" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/3493/comments/full/3" rel="self" type="application/atom+xml" /></ns0:entry>