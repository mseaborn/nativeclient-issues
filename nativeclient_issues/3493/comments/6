<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;Ck4MSH47eCl7ImA9WhFSEUg.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/3493/comments/full/6</ns0:id><ns0:author>
			<ns0:name>eli...@chromium.org</ns0:name><ns0:uri>/u/112264824292994369940/</ns0:uri></ns0:author><ns0:content type="html">It's also worthwhile to note what happens for "stable" bitcode (the user scenario), such as the new memcpy tests added in https://codereview.chromium.org/16981002/, when the LLVM LTO bits that preserve mem* funcs are removed:

The nonfinal pexe (before pnacl-finalize), the user code has calls to @llvm.mem* intrinsics as expected (user code is not built with -fno-builtin). It also has calls to these functions as functions, coming from newlib (for example __sfvwrite_r). memcpy is defined thus (note that it's internal, LTO code that sets it external was disabled for this experiment):
 
  define internal void @memcpy(i32 %dst0, i32 %src0, i32 %len0) {
   ...
  }

After pnacl-finalize, we have the final pexe, in which the user code still calls the intrinsics, but now the function definition and calls disappear (internalized by stripping).

Now we get a link error in pnacl-translate, because when the backend resurrects the llvm.mem* intrinsics to function calls, the linker can't find them. These calls occur both from user code and libnacl support code. </ns0:content><ns0:updated>2013-06-13T19:16:29.000Z</ns0:updated><ns0:published>2013-06-13T19:16:29.000Z</ns0:published><ns2:updates /><ns0:title>Comment 6 by eli...@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=3493#c6" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/3493/comments/full/6" rel="self" type="application/atom+xml" /></ns0:entry>