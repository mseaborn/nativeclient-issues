<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CUcHSH47eCl7ImA9WhFSEUk.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/3493/comments/full/5</ns0:id><ns0:author>
			<ns0:name>eli...@chromium.org</ns0:name><ns0:uri>/u/112264824292994369940/</ns0:uri></ns0:author><ns0:content type="html">Some details on how the intrinsic is handled in the code generator:

* SelectionDAGBuilder::visitIntrinsicCall sees Intrinsic::memove and calls SelectionDAG::getMemmove.
* getMemmove tries to optimize the call if the size is a constant by converting it to loads &amp; stores.
* Otherwise, it asks the target whether it has some optimized method to implement that.
* If all else fails, it invokes a library call.

The library call is obtained by TargetLowering::getLibcallName, and this looks at a table initialized in TargetLoweringBase.cpp:

  Names[RTLIB::MEMCPY] = "memcpy";
  Names[RTLIB::MEMMOVE] = "memmove";
  Names[RTLIB::MEMSET] = "memset";

</ns0:content><ns0:updated>2013-06-13T17:03:59.000Z</ns0:updated><ns0:published>2013-06-13T17:03:59.000Z</ns0:published><ns2:updates /><ns0:title>Comment 5 by eli...@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=3493#c5" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/3493/comments/full/5" rel="self" type="application/atom+xml" /></ns0:entry>