<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CUQBQX47eCl7ImA9WhFSEUo.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/3493/comments/full/9</ns0:id><ns0:author>
			<ns0:name>eli...@chromium.org</ns0:name><ns0:uri>/u/112264824292994369940/</ns0:uri></ns0:author><ns0:content type="html">We have some options on how to solve this:

1. Teach the backend, when it revives intrinsic calls, not to point them to the existing memcpy in the module, but rather at some unresolved memcpy. Then the connection will be done by gold in the native linking stage to the native implementation we provide in libcrt_platform.a
2. Prevent the generation of memcpy in the pexe altogether. It's being generated because newlib is compiled with -fno-builtin, which means that memcpy calls in C are not translated to llvm.memcpy intrinsics by clang. There is a memcpy implementation in newlib, which the bitcode linker pulls in to satisfy these calls.
3. Remove memcpy from our bitcode newlib - any calls to it will be come external and will be satisfied by the native object linking in the native link step.
4. Intern the memcpy functions before generating the final pexe, similarly to the way it's being done in stable ABI by pnacl-finalize. This way, when the backend revives the intrinsic calls it has no memcpy to tie the call to, so it generates a reference to an external symbol.

Discussion:

Option (1) seems difficult to do. If there's already a symbol named memcpy in the object file, how can we create a call to memcpy without linking to that symbol. It's not clear whether this is possible on the assembler (MC) level at all without gross hacks.

Option (2) means a considerable LOCALMOD in newlib. It's not clear what the meaning of removing -fno-builtin for newlib would be, since it seems to be the default way to build.

Option (3) goes against the stable ABI, since it means the pexe will openly rely on memcpy, which makes it part of the ABI.

Option (4) is potentially the easiest and lowest-impact, because it only affects some of the scons tests. Stable bitcode already works, because pnacl-finalize internalizes memcpy and friends, making it harmless. The downside of (4) vs. (2) is that an implementation of these functions still ships in the stable pexes (because they're needed by newlib code), which makes the pexes slightly larger. Since we link in a native memcpy at translation time anyway, we don't really need it in the bitcode. This also means that newlib bitcode behaves more like user bitcode and calls the intrinsics.








</ns0:content><ns0:updated>2013-06-14T01:29:10.000Z</ns0:updated><ns0:published>2013-06-14T01:29:10.000Z</ns0:published><ns2:updates /><ns0:title>Comment 9 by eli...@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=3493#c9" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/3493/comments/full/9" rel="self" type="application/atom+xml" /></ns0:entry>