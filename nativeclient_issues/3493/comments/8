<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CEEEQn47eCl7ImA9WhFSEUo.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/3493/comments/full/8</ns0:id><ns0:author>
			<ns0:name>eli...@chromium.org</ns0:name><ns0:uri>/u/112264824292994369940/</ns0:uri></ns0:author><ns0:content type="html">Another curious fact about the .nexe created from EH tests with applying the change that cancels externalization of mem* functions and adds a native version:

$ nm scons-out/nacl-x86-32-pnacl-pexe-clang/obj/tests/toolchain/eh_virtual_dtor_opt_noframe.nexe|grep memcpy
00031860 t memcpy
00040dc0 T memcpy

$ readelf -s scons-out/nacl-x86-32-pnacl-pexe-clang/obj/tests/toolchain/eh_virtual_dtor_opt_noframe.nexe|grep memcpy
   193: 00031860   128 FUNC    LOCAL  DEFAULT    1 memcpy
   410: 00040dc0   128 FUNC    GLOBAL DEFAULT    1 memcpy

The local memcpy (at 31860) gets called in the code that comes from the .pexe (such as the TLS code mentioned above, and newlib). The global memcpy (40dc0) gets called from _Unwind_* code which gets linked in the native link (libgcc_eh.a)

So what happens becomes clearer:

* pnacl-translate first calls pnacl-llc with the .pexe, in which memcpy exists by its name and is internal. pnacl-llc "revives" llvm.memcpy intrinsic calls by pointing them at the memcpy it finds in the module (even though it's internal, it's internal *to the same module*). Unfortunately, there's a mismatch here because memcpy was already optimized according to the calls that existed to it on the dev side, without knowledge that later new calls will appear.
* pnacl-translate next calls gold, which links the object file coming from pnacl-llc with native code like libgcc_eh.a and libcrt_platform.a. My native implementation of memcpy is in the latter, and it gets added to the nexe because libgcc_eh needs it.

This is how we end up with two versions of memcpy in the final nexe, each called from a different place.

What we would want to happen, instead, is for the intrinsic calls to be revived into calls to some external unresolved (during compilation - in pnacl-llc) memcpy, and then gold would link them to the native memcpy.</ns0:content><ns0:updated>2013-06-14T01:16:43.000Z</ns0:updated><ns0:published>2013-06-14T01:16:43.000Z</ns0:published><ns2:updates>
			<ns2:status>Started</ns2:status></ns2:updates><ns0:title>Comment 8 by eli...@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=3493#c8" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/3493/comments/full/8" rel="self" type="application/atom+xml" /></ns0:entry>