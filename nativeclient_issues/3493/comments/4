<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CkUCRH47eCl7ImA9WhFSEUk.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/3493/comments/full/4</ns0:id><ns0:author>
			<ns0:name>eli...@chromium.org</ns0:name><ns0:uri>/u/112264824292994369940/</ns0:uri></ns0:author><ns0:content type="html">Having implemented an initial version of this, I'm running into segfaults in the calls to memcpy made by __nacl_tls_initialize_memory (src/untrusted/nacl/tls.c) in some EH tests.

Looking at the bitcode disassembly of scons-out/nacl-x86-32-pnacl-pexe-clang/obj/tests/toolchain/eh_virtual_dtor_opt_noframe.nonfinal.pexe -- there is a declaration of memcpy as a function, and calls to it in a couple of places (along with many calls to llvm.memcpy intrinsics). The declaration and calls are, however, fastcc:

   tail call fastcc void @memcpy(i8* %call.i, i8* %17, i32 %sub.ptr.sub) 

Intrinsics are not translated to fastcc calls, which may be the cause of the segfault.

Without my changes, there's no fastcc. This is probably because memcpy is kept "external" by the LTO code, so the compiler can't make it "internal fastcc".

The calls to memcpy as a function (rather than as intrinsic) come from newlib source; newlib is compiled with `pnacl-clang -fno-builtin`, which prevents the translation of memcpy calls to llvm.memcpy intrinsics.
</ns0:content><ns0:updated>2013-06-13T16:17:45.000Z</ns0:updated><ns0:published>2013-06-13T16:17:45.000Z</ns0:published><ns2:updates /><ns0:title>Comment 4 by eli...@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=3493#c4" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/3493/comments/full/4" rel="self" type="application/atom+xml" /></ns0:entry>