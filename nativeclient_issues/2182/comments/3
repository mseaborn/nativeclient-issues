<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;DEEMQn47eCl7ImA9WhdXFkU.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/2182/comments/full/3</ns0:id><ns0:author>
			<ns0:name>elijahtaylor@google.com</ns0:name><ns0:uri>/u/elijahtaylor@google.com/</ns0:uri></ns0:author><ns0:content type="html">Right now I'm less concerned with instrumenting parts of glibc and more concerned that libgc will work well with DSOs.  I have yet to really dig into the dynamic loading code in libgc, but AFAIK it's all about making sure all data roots are discoverable.  There is support in libgc for walking ELF headers for linux/glibc but I'm not certain what hooks we can have and if everything is in the same shape as for linux so it would Just Work.  Some pointers on DSOs and maybe being able to find/register data sections would be helpful, but I still need to look at the libgc code to comment further.

If you want to build mono, check out https://github.com/elijahtaylor/mono (instructions are in nacl/README).  There's a small out-of-browser test in nacl/test/ that currently doesn't do much (if any) GC but I can give you an example of one that does that should be easy to run in this setup.  I haven't compiled with glibc yet so I don't have an A/B comparison of something that works in newlib vs glibc.   We also don't have any large tests in the browser except for what external developers have (Unity, etc).

</ns0:content><ns0:updated>2011-08-30T06:44:43.000Z</ns0:updated><ns0:published>2011-08-30T06:44:43.000Z</ns0:published><ns2:updates /><ns0:title>Comment 3 by elijahtaylor@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2182#c3" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/2182/comments/full/3" rel="self" type="application/atom+xml" /></ns0:entry>