<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;AkIDRX47eCl7ImA9WxBSFEU.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/229/comments/full/1</ns0:id><ns0:author>
			<ns0:name>k...@google.com</ns0:name><ns0:uri>/u/112873510090665368075/</ns0:uri></ns0:author><ns0:content type="html">
On Tue, Dec 22, 2009 at 4:17 PM, Mark Seaborn &lt;mseaborn@google.com&gt; wrote:
Or gcc could just output the instruction using ".byte", because it's fixed, and omit 
the label. :-&gt;

We still need the label because without label we have no way to generate offsets!

So we must use both .byte AND .Label. Something like this:
.byte 0xe8, 0x00, 0x00, 0x00, 0x00
.Label:
pop %ecx

Validator should ONLY allow unaligned call to the VERY NEXT instruction. To allow 
random unaligned call we'll need some kind of flow-control in validator and we are 
trying to avoid this.

Note that it only works because pop %ecx is just one byte long! Two-byte instruction 
can lead to troubles with bundles (think about case where our 0xe8, 0x00, 0x00, 0x00, 
0x00 instruction starts at 27th byte in budle and ends at 32th byte), but "pop %ecx" 
is fine.

This also means that "new trick" without call alignment will not work - we'll need 
quite extensive changes in binutils to make it work.</ns0:content><ns0:updated>2009-12-22T13:29:34.000Z</ns0:updated><ns0:published>2009-12-22T13:29:34.000Z</ns0:published><ns2:updates /><ns0:title>Comment 1 by k...@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=229#c1" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/229/comments/full/1" rel="self" type="application/atom+xml" /></ns0:entry>