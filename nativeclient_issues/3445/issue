<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;Dk8GSX47eCl7ImA9WhFTEE8.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/3445</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">Consider the following C fragment:

struct S {
  int a;
  int b;
};
void fill_out(struct S *p) {
  p-&amp;gt;a = 0;
  p-&amp;gt;b = 0;
}

pnacl-clang currently generates stores with &amp;quot;align 4&amp;quot; attributes for this code:

$ pnacl-clang aligned_writes.c -S -o - -O1
...
  %a = getelementptr inbounds %struct.S* %p, i32 0, i32 0
  store i32 0, i32* %a, align 4, !tbaa !0
  %b = getelementptr inbounds %struct.S* %p, i32 0, i32 1
  store i32 0, i32* %b, align 4, !tbaa !0
...

On ARM, the PNaCl translator combines those two 32-bit stores into a single 64-bit store:

$ pnacl-clang aligned_writes.c -S -o - -O1 -arch arm --pnacl-allow-translate
...
	vmov.i32	d16, #0x0
	sfi_load_store_preamble r0, 
	vstr	d16, [r0]
...

However, ARM's &amp;quot;vstr&amp;quot; instruction faults when given a non-4-byte-aligned address.  (I learned this from issue 3437.)  This is problematic because:

 * The same code on x86 doesn't fault.  It's very likely that developers will test on x86 but not on ARM, so this will lead to non-portable pexes.
 * Although dereferencing an int* on an unaligned address might be non-standards-conforming C, it's common practice when serialising or unserialising data.  I don't think it's OK for PNaCl to break this use case.
 * The use of a faulting instruction depends on optimisations, so it's not very predictable.

Some options here are:

 1) Keep the status quo: misaligned faults for both ints and doubles can differ between architectures.
 2) Ensure that a misaligned access produces consistent behaviour on all architectures, so that it either succeeds everywhere (easier) or faults everywhere (harder).
 3) Somewhere inbetween:  Ensure that loads/stores of ints have consistent behaviour and never fault, but allow loads/stores of ints to fault on ARM but not x86.  This might be reasonable since programmers might be more aware that doubles have stricter alignment requirements than ints.

I think we should do (2).  We could implement it by stripping &amp;quot;align&amp;quot; attributes on loads/stores and replacing them with &amp;quot;align 1&amp;quot;.

Note that if you use &amp;quot;align 1&amp;quot; on double loads/stores, LLVM generates vld1.8 and vst1.8 instead of vldr and vstr:

$ cat unaligned.c
struct T {
  double a;
} __attribute__((packed));
void modify_double(struct T *p) {
  p-&amp;gt;a += 1;
}
$ pnacl-clang unaligned.c -S -o - -arch arm --pnacl-allow-translate -O1
...
	vmov.f64	d16, #1.000000e+00
	sfi_load_store_preamble r0, 
	vld1.8	{d17}, [r0]
	vadd.f64	d16, d17, d16
	sfi_load_store_preamble r0, 
	vst1.8	{d16}, [r0]
...</ns0:content><ns0:updated>2013-05-31T18:27:08.000Z</ns0:updated><ns0:published>2013-05-21T19:14:36.000Z</ns0:published><ns2:status>Assigned</ns2:status><ns2:owner>
			<ns2:uri>/u/mseaborn@chromium.org/</ns2:uri><ns2:username>mseaborn@chromium.org</ns2:username></ns2:owner><ns2:cc>
			<ns2:uri>/u/dschuff@chromium.org/</ns2:uri><ns2:username>dschuff@chromium.org</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/109636895838879576326/</ns2:uri><ns2:username>j...@chromium.org</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/112264824292994369940/</ns2:uri><ns2:username>eli...@chromium.org</ns2:username></ns2:cc><ns2:state>open</ns2:state><ns0:title>PNaCl: Misaligned access faults differ between x86 and ARM, for doubles and ints</ns0:title><ns2:label>Type-Defect</ns2:label><ns2:label>Pri-1</ns2:label><ns2:label>Component-PNaCl</ns2:label><ns2:label>PNaClABI</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/3445/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=3445" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/3445" rel="self" type="application/atom+xml" /><ns2:stars>2</ns2:stars><ns2:id>3445</ns2:id></ns0:entry>