<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;Dk8NSH47eCl7ImA9WhZQE0Q.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/1700/comments/full/2</ns0:id><ns0:author>
			<ns0:name>euge...@google.com</ns0:name><ns0:uri>/u/101600367715055138223/</ns0:uri></ns0:author><ns0:content type="html">Leak checking already works in both trusted and untrusted code (all in one run!).

The bot can tell you how to launch memcheck on sel_ldr:
http://build.chromium.org/p/client.nacl/builders/karmic64-valgrind/builds/1215/steps/memcheck/logs/stdio

./scons -k --verbose --mode=dbg-linux,nacl platform=x86-64 sdl=none buildbot=memcheck memcheck_bot_tests

http://code.google.com/p/nativeclient/wiki/ValgrindMemcheck#Running_Valgrind_manually

To get a detailed leak report, add --leak-check=full to valgrind invocation.

We are missing a test for leak checking functionality. I'll add one.

We don't have a handy way to run nexes in a browser under Valgrind. Wrapping sel_ldr invocation in valgrind should just work, but, AFAIK, there is no command line option for that.</ns0:content><ns0:updated>2011-04-21T14:08:19.000Z</ns0:updated><ns0:published>2011-04-21T14:08:19.000Z</ns0:published><ns2:updates>
			<ns2:status>Started</ns2:status><ns2:ownerUpdate>euge...@google.com</ns2:ownerUpdate></ns2:updates><ns0:title>Comment 2 by euge...@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=1700#c2" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/1700/comments/full/2" rel="self" type="application/atom+xml" /></ns0:entry>