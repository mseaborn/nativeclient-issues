<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;C0QAR347eCl7ImA9WxBbEk8.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/206/comments/full/10</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">From Victor:  "it is currently a requirement that the service runtime never link against any 
library code that cause asynchronous signals to be delivered (or to do so itself).  the reason 
is that our %rsp modifying pseudo-ops are only atomic wrt control flow transfers, and there is a 
timing window where %rsp points *outside* the sandbox, into the low 4G, and if an asynchronous 
signal is delivered in that timing window, trusted memory could get overwritten."

I'm not sure what point you're making.  Surely asynchrony of signals is not the issue?  Any 
signal handler *must* use a separate signal stack, in which case the value of %rsp/%esp at the 
time the signal occurs will be ignored.  We do not want the signal handler to run with %rsp/%esp 
pointing into untrusted memory either, because an untrusted thread could overwrite a return 
address and thereby take control of the trusted code's control flow.
</ns0:content><ns0:updated>2010-03-10T11:42:26.000Z</ns0:updated><ns0:published>2010-03-10T11:42:26.000Z</ns0:published><ns2:updates>
			<ns2:ccUpdate>k...@google.com</ns2:ccUpdate></ns2:updates><ns0:title>Comment 10 by mseaborn@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=206#c10" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/206/comments/full/10" rel="self" type="application/atom+xml" /></ns0:entry>