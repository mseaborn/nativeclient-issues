<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;A04FQH47eCl7ImA9WxBbGU8.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/206/comments/full/12</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">I have found an issue with signal stacks that I didn't fully
appreciate before.  sigaltstack() sets the signal stack for the
current thread; this is not inherited by child threads.  In contrast,
signal handlers are set on a whole-process basis.

This means that we must make sure we call sigaltstack() in any thread
that will run NaCl untrusted code, otherwise the signal handling will
be unsafe.

Ideally we would want sigaltstack() to be called on all new threads,
so that any failing thread runs its signal handler in an alternate
stack.  But this could be difficult to arrange: we'd have to find all
libraries that use pthread_create().

Breakpad's linux/handler/exception_handler.cc appears to be written
with the assumption that sigaltstack() affects the whole process,
which (if true) would not be safe because Breakpad also intends to
handle concurrent signal handlers.

It seems wasteful that we have to allocate a signal stack per thread,
especially since we don't actually *want* concurrent signal handlers
for crash reporting.  It would be safest for all threads to die at
once; the crash handler creates a small window in which things could
go wrong.

Since signal stacks will likely never be touched, we should try to
allocate them in pages separate from other allocations.  If 8k
mallocs() don't do this, maybe we should use mmap().
</ns0:content><ns0:updated>2010-03-18T16:31:51.000Z</ns0:updated><ns0:published>2010-03-18T16:31:51.000Z</ns0:published><ns2:updates /><ns0:title>Comment 12 by mseaborn@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=206#c12" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/206/comments/full/12" rel="self" type="application/atom+xml" /></ns0:entry>