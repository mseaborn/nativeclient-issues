<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;DE8GRn47eCl7ImA9WhNWEUo.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/842/comments/full/22</ns0:id><ns0:author>
			<ns0:name>dschuff@chromium.org</ns0:name><ns0:uri>/u/dschuff@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">The problem was as follows:
In newlib, expf(x) is implemented by a simple call to powf(2.0, x).
The LLVM libcall simplification pass has an optimization which turns calls of powf(2.0,x) to expf(x). For some reason it went without triggering for a long time, until it was moved to the instcombine pass in r167815, at which point it turned newlib's expf into an infinite recursion. Normally the C library is not visible to the optimizer (even when you build C libraries, you normally use -fno-builtin), so it's only our particular case of having the C library visible to the optimizer at LTO time that caused it. I fixed it locally by having the optimization bail out if the function we are optimizing is itself one of the known library functions (since this pass conveniently already has a list of such functions). I will probably land it upstream as well.

As for the rest of the stuff mentioned in this bug, it sounds like there are actually 2 (or more) different problems, including 1) optimizations can materialize calls to functions which may or may not be available in bitcode; 2) optimizations can throw away functions which may need to be called by things not visible to that optimization. it's probably best to file more specific bugs in the future which could refer to a specific instance of a problem that comes up, or (more likely) for cleanup of the code and/or bitcode ABI around these issues.</ns0:content><ns0:updated>2012-12-10T22:00:27.000Z</ns0:updated><ns0:published>2012-12-10T22:00:27.000Z</ns0:published><ns2:updates>
			<ns2:status>WontFix</ns2:status></ns2:updates><ns0:title>Comment 22 by dschuff@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=842#c22" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/842/comments/full/22" rel="self" type="application/atom+xml" /></ns0:entry>