<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;D0UHR347eCl7ImA9WhRTF0Q.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/2397/comments/full/1</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">We can do a workaround for this.  For the signal stack, we can allocate a block of size X.  Instead of passing sigaltstack() the full block of size X, we can pass it the top S bytes, where S is enough to hold a signal frame.

If %esp points within the top S bytes when the signal occurs, the signal frame may run outside the S bytes, but the signal handler will run within the full X bytes we have allocated.  We must ensure that the handler's signal mask is empty so that it does not get re-entered with %esp reset to the top of the stack.</ns0:content><ns0:updated>2011-11-08T23:33:56.000Z</ns0:updated><ns0:published>2011-11-08T23:33:56.000Z</ns0:published><ns2:updates /><ns0:title>Comment 1 by mseaborn@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2397#c1" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/2397/comments/full/1" rel="self" type="application/atom+xml" /></ns0:entry>