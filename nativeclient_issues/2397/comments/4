<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;D0UNSH47eCl7ImA9WhVTF0k.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/2397/comments/full/4</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">I implemented the workaround from comment 1 (http://codereview.chromium.org/9583030/), and it worked on my laptop and another test machine.  However, it failed on the trybots.  Recent kernels have the following check (in arch/x86/kernel/signal.c) to prevent the signal frame overrunning the bottom of the signal stack, which explains the failure:

        /*
         * If we are on the alternate signal stack and would overflow it, don't.
         * Return an always-bogus address instead so we will die with SIGSEGV.
         */
        if (onsigstack &amp;&amp; !likely(on_sig_stack(sp)))
                return (void __user *)-1L;

It is curious that my workaround worked on other systems.
</ns0:content><ns0:updated>2012-03-03T03:28:19.000Z</ns0:updated><ns0:published>2012-03-03T03:28:19.000Z</ns0:published><ns2:updates /><ns0:title>Comment 4 by mseaborn@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2397#c4" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/2397/comments/full/4" rel="self" type="application/atom+xml" /></ns0:entry>