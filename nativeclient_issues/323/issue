<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;AkENRX47eCl7ImA9WxBUFEo.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/323</ns0:id><ns0:author>
			<ns0:name>bradc...@google.com</ns0:name><ns0:uri>/u/110304265766688778552/</ns0:uri></ns0:author><ns0:content type="html">The 64-bit validator has these problems reported by Mark Dowd:

1. Bit Test and Reset Memory Corruption Vulnerability

File: trusted/validator_x86/ncdecode_0F.c
Function: N/A
Problem Type: Illegal Memory Access (Write)
Compromise Type: NaCL sandbox compromise
Severity: High

The BTR instruction modifies memory pointed to by the first operand (the
bit base) by modifying a bit in the bit string. Since the OpSet value isn't
used to indicate that memory is modified by this instruction, no validation
on the first operand is done, and thus memory at arbitrary locations may be
modified. (Note that only one variant of the instruction may be used - one
which takes an immediate byte value for the bit string index as the second
operand.)


2. Bit Test and Set Memory Corruption Vulnerability

File: trusted/validator_x86/ncdecode_0F.c
Function: N/A
Problem Type: Illegal Memory Access (Write)
Compromise Type: NaCL sandbox compromise
Severity: High

The BTS instruction has the same issue described for BTR.

3. Bit Test and Compliment Memory Corruption Vulnerability

File: trusted/validator_x86/ncdecode_0F.c
Function: N/A
Problem Type: Illegal Memory Access (Write)
Compromise Type: NaCL sandbox compromise
Severity: High

The BTC instruction has the same issue described for BTR.

4. Invalid Pop Validation

File: trusted/validator_x86/nc_protect_base.c
Function: NcBaseRegisterValidator
Problem Type: Illegal Memory Access (Write)
Compromise Type: NaCL sandbox compromise
Severity: High

The base register validator ensures that RSP and RBP can only be modified
to point to a writeable memory location, and that R15 may not be modified.
This is required since any modification to memory utilizing these registers
is assumed to be valid by NcStoreValidator(). When a modification to RSP is
detected, a check is made to see if the instruction used was a pop
instruction. If this is the case, the implicit modification of RSP is
considered to be valid and the validator returns without error. However, no
check is done to ensure that the operand for pop is not RSP, RBP, or R15.
Therefore, NACL binaries may have instructions such as:

    pop %rbp

This allows for illegal modification of protected registers, which can be
used to fully compromise the sandbox.

</ns0:content><ns0:updated>2010-03-01T21:24:54.000Z</ns0:updated><ns0:published>2010-03-01T16:27:24.000Z</ns0:published><ns2:status>Fixed</ns2:status><ns2:owner>
			<ns2:uri>/u/108470876877739532758/</ns2:uri><ns2:username>kschi...@google.com</ns2:username></ns2:owner><ns2:cc>
			<ns2:uri>/u/110304265766688778552/</ns2:uri><ns2:username>bradc...@google.com</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/105821748722532785568/</ns2:uri><ns2:username>b...@google.com</ns2:username></ns2:cc><ns2:state>closed</ns2:state><ns0:title>[MD audit] x86-64 Validator Errors</ns0:title><ns2:label>Type-Defect</ns2:label><ns2:label>Pri-0</ns2:label><ns2:label>Milestone-Chromium-5</ns2:label><ns2:label>OS-All</ns2:label><ns2:label>Component-TrustedRT</ns2:label><ns2:label>Arch-x86-64</ns2:label><ns2:label>Security</ns2:label><ns2:label>MDaudit</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/323/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=323" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/323" rel="self" type="application/atom+xml" /><ns2:stars>1</ns2:stars><ns2:closedDate>2010-03-01T21:24:54.000Z</ns2:closedDate><ns2:id>323</ns2:id></ns0:entry>