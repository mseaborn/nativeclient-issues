<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CUUGRX47eCl7ImA9WhJWF0s.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/2850/comments/full/5</ns0:id><ns0:author>
			<ns0:name>pa...@google.com</ns0:name><ns0:uri>/u/101628056640429344673/</ns0:uri></ns0:author><ns0:content type="html">Victor says:

It's always on. When validator detects error it calls user callback. If user callback returns FALSE then validation stops, if it returns TRUE then error is ignored. You can selectively ignore some errors and reject code with other errors (you can even accept code with "DFA can not recognize byte sequence" aka UNRECOGNIZED_INSTRUCTION error, but this will mean that you blindly accept unverified code). This is how StubOutCPUUnsupportedInstruction callback works: CPUID_UNSUPPORTED_INSTRUCTION error is ignored while instruction itself is replaced with HLTs. Other errors lead to validation error.

I was thinking that it probably makes sense to cover this arcane interface with a more convenient flag in the validator "public" interface (see src/trusted/validator/ncvalidate.h)</ns0:content><ns0:updated>2012-08-23T23:07:04.000Z</ns0:updated><ns0:published>2012-08-23T23:07:04.000Z</ns0:published><ns2:updates /><ns0:title>Comment 5 by pa...@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2850#c5" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/2850/comments/full/5" rel="self" type="application/atom+xml" /></ns0:entry>