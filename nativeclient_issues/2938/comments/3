<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;C0IEQn47eCl7ImA9WhJWF0k.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/2938/comments/full/3</ns0:id><ns0:author>
			<ns0:name>jvo...@google.com</ns0:name><ns0:uri>/u/102292187274959663599/</ns0:uri></ns0:author><ns0:content type="html">This does not work as is.  This was only made to work when a structure is big enough so that the structure occupies ALL of the registers (and thus the var-arg regsave area), along with some of the stack.  Clang only uses byval when the structure is 64 bytes or larger to ensure this.

Whoever looks at this will need to:

- Add some more test coverage.  Be sure to have tests that mix byvals and var-args, because the LLVM code for byvals and var-args is shared!

- Be sure to test int8_t and int16_t, since LLVM has lots of "4 byte" constants, and this trips up a particular signed/unsigned comparison.

- Make LLVM handle smaller structs.  With smaller structs, multiple structs may occupy the GPR portion of the arguments, and LLVM only handles a single struct occupying the GPRS plus stack.</ns0:content><ns0:updated>2012-08-23T17:05:03.000Z</ns0:updated><ns0:published>2012-08-23T17:05:03.000Z</ns0:published><ns2:updates /><ns0:title>Comment 3 by jvo...@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2938#c3" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/2938/comments/full/3" rel="self" type="application/atom+xml" /></ns0:entry>