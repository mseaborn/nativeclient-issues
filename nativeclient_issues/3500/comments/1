<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;DEMFQH47eCl7ImA9WhFSFk0.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/3500/comments/full/1</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">How broken is this without the fix?  This depends on the compiler and the hardware.

On x86 and ARM, 4-byte-aligned 32-bit store instructions get protections (1) and (3) automatically.

For ARM, adding a "dmb" memory barrier instruction before the store provides protection (2).  But this isn't necessary in nc_mutex.c (as commented), because there's an earlier __sync_fetch_and_sub() which implies a full memory barrier.

For x86, GCC and LLVM disagree about whether a memory barrier instruction is needed.  GCC adds an 'mfence' to implement __sync_lock_release(), but LLVM doesn't.  Either way, this is superfluous in nc_mutex.c because of the earlier __sync_fetch_and_sub().

For MIPS, GCC and LLVM generate code that diverges even more.  LLVM compiles __sync_lock_release() to a 'sync' + an ll+sc loop on MIPS.  GCC just generates a 'sync' (memory barrier) and a normal store.  So MIPS appears to be like x86 and ARM here, and presumably LLVM's MIPS atomics just aren't optimised yet.

However:

 * PNaCl might target other hardware in the future that provides weaker guarantees.

 * The compiler is technically allowed to break protections (1) and (3) in nc_mutex.c.  If it doesn't do this, the resulting x86/ARM/MIPS nexe will be OK.  But that doesn't help PNaCl, where the in-browser translator might change its behaviour and break pexes that make bad assumptions about the system's memory model.</ns0:content><ns0:updated>2013-06-19T01:46:51.000Z</ns0:updated><ns0:published>2013-06-19T01:46:51.000Z</ns0:published><ns2:updates /><ns0:title>Comment 1 by mseaborn@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=3500#c1" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/3500/comments/full/1" rel="self" type="application/atom+xml" /></ns0:entry>