<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;DEUFRX47eCl7ImA9WhdUEEg.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/737</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">To reproduce the problem, insert the following code into
NaClCommonSysImc_Recvmsg() in nacl_syscall_common.c:

   invalid_desc = (struct NaClDesc *) NaClDescInvalidMake();
+  printf(&amp;quot;n=%i\n&amp;quot;, invalid_desc-&amp;gt;ref_count);
   for (i = 0; i &amp;lt; num_user_desc; ++i) {

and run a test that repeatedly receives the special &amp;quot;invalid&amp;quot; FD.
e.g. Run test_special_invalid_fd() (from socket_transfer_test.c) in a
loop.

The number printed will increase each time.

This is dangerous because the refcount can overflow.  Luckily there is
an overflow check in NaClDescRef(), so it will just cause a fatal
error, rather than creating a dangling pointer if the object is
wrongly deallocated.

It is possible that a long-running process will trigger this fatal
error.
</ns0:content><ns0:updated>2011-09-26T16:56:54.000Z</ns0:updated><ns0:published>2010-07-30T15:43:16.000Z</ns0:published><ns2:status>Available</ns2:status><ns2:cc>
			<ns2:uri>/u/mseaborn@chromium.org/</ns2:uri><ns2:username>mseaborn@chromium.org</ns2:username></ns2:cc><ns2:state>open</ns2:state><ns0:title>Receiving the "invalid" FD causes a refcount leak</ns0:title><ns2:label>Type-Defect</ns2:label><ns2:label>Pri-3</ns2:label><ns2:label>Component-TCB</ns2:label><ns2:label>Mstone-16</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/737/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=737" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/737" rel="self" type="application/atom+xml" /><ns2:stars>1</ns2:stars><ns2:id>737</ns2:id></ns0:entry>