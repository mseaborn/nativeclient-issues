<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;D0MCQn47eCl7ImA9Wx5aFUs.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/1162/comments/full/1</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">In NaCl, pointers are 32-bit on all architectures.  NaCl's x86-64 sandbox exposes a 32-bit address space to user code.  This is partly for portability, but it's also a consequence of how the x86-64 sandbox works.  See the paper on the sandboxing scheme: http://nativeclient.googlecode.com/svn/data/site/NaCl_SFI.pdf

You could argue that this means we shouldn't #define __x86_64__, because NaCl-x86-64 is sufficiently different that it is effectively a separate architecture.  I have argued this before.  If predefining __x86_64__ is making it awkward to port code, we could change it.</ns0:content><ns0:updated>2010-11-12T12:37:43.000Z</ns0:updated><ns0:published>2010-11-12T12:37:43.000Z</ns0:published><ns2:updates>
			<ns2:status>Invalid</ns2:status></ns2:updates><ns0:title>Comment 1 by mseaborn@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=1162#c1" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/1162/comments/full/1" rel="self" type="application/atom+xml" /></ns0:entry>