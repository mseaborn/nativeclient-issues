<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;DUUDRX47eCl7ImA9WhVUFk4.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/2800</ns0:id><ns0:author>
			<ns0:name>b...@google.com</ns0:name><ns0:uri>/u/105821748722532785568/</ns0:uri></ns0:author><ns0:content type="html">our mutex implementation as exposed via service runtime syscalls permit untrusted code to cause POSIX mutexes (default variety, where the semantics of double locking from the same thread is formally undefined, where unlocking from a different thread than that which locked the mutex is undefined) and Windows CRITICAL_SECTION objects (roughly ditto) to reach undefined states.

the fix will be to replace user-exposed mutexes with more complex objects that keep track of which thread holds the lock, etc.  this will be more expensive, should be more efficient in the common case than the original event based Windows mutex implementation.

for undefined behavior, we should consider whether to simply crash the application or to return an error.  it is unclear even if/when newlib/glibc is modified to propagate such error codes back, if the user-level code is going to be able to handle the error, esp given it was buggy in the first place.</ns0:content><ns0:updated>2012-05-21T21:54:34.000Z</ns0:updated><ns0:published>2012-05-21T20:34:52.000Z</ns0:published><ns2:status>Invalid</ns2:status><ns2:owner>
			<ns2:uri>/u/105821748722532785568/</ns2:uri><ns2:username>b...@google.com</ns2:username></ns2:owner><ns2:state>closed</ns2:state><ns0:title>untrusted code can induce undefined behavior via mutex operations</ns0:title><ns2:label>Type-Defect</ns2:label><ns2:label>Mstone-22</ns2:label><ns2:label>Pri-2</ns2:label><ns2:label>Component-TCB</ns2:label><ns2:label>OS-All</ns2:label><ns2:label>Arch-All</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/2800/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2800" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/2800" rel="self" type="application/atom+xml" /><ns2:stars>1</ns2:stars><ns2:closedDate>2012-05-21T21:54:34.000Z</ns2:closedDate><ns2:id>2800</ns2:id></ns0:entry>