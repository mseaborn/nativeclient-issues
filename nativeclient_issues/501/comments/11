<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;D0YDRX47eCl7ImA9WxFaEk8.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/501/comments/full/11</ns0:id><ns0:author>
			<ns0:name>b...@google.com</ns0:name><ns0:uri>/u/105821748722532785568/</ns0:uri></ns0:author><ns0:content type="html">while experimental evidence is great, one concern is whether this behavior of never caching lines containing BKPT instructions is actually part of the architectural specification.  in particular, if not, then a future CPU model that is correct wrt the ARM specification may still cause correctness problems in this code.

does this also mean that data embedded in code containing the BKPT bit pattern as data will cause the entire line to never be cached?

also, while unlikely, the test program did not try to align the data, so the code in the data page may actually be split across cache lines, so that the call f(100) wouldn't actually cause the code starting at the instr symbol to get cached.</ns0:content><ns0:updated>2010-07-15T20:19:34.000Z</ns0:updated><ns0:published>2010-07-15T20:19:34.000Z</ns0:published><ns2:updates /><ns0:title>Comment 11 by b...@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=501#c11" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/501/comments/full/11" rel="self" type="application/atom+xml" /></ns0:entry>