<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;Ak4FRX47eCl7ImA9WxFQFkQ.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/490/comments/full/1</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">Using set_thread_area() would involve a change to the syscall trampoline code that 
returns to trusted code (nacl_syscall_32.S).  Currently, to find the trusted stack for 
the thread, it uses the segment selector %gs as an index into an array of threads.  
This works because the untrusted code's %gs value is different for each thread.

However, with set_thread_area(), the untrusted %gs value would be the same for each 
thread, just as the trusted %gs value is the same across all threads in modern 
glibc/pthreads versions.  (It's the LDT that is different between the threads, not the 
index into it.)

Reading from the %gs segment to restore the trusted stack wouldn't be safe because its 
contents are controlled by untrusted code.  We could use the %fs segment to restore 
the trusted stack instead.  (However, note that %fs is used by the seccomp sandbox.)
</ns0:content><ns0:updated>2010-05-12T21:15:14.000Z</ns0:updated><ns0:published>2010-05-12T21:15:14.000Z</ns0:published><ns2:updates /><ns0:title>Comment 1 by mseaborn@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=490#c1" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/490/comments/full/1" rel="self" type="application/atom+xml" /></ns0:entry>