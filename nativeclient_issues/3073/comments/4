<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CEMDQX47eCl7ImA9WhBQEk0.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/3073/comments/full/4</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">&gt; I think we will want to PNaCl toolchain to provide two builds of crtbegin.c:
&gt;
&gt;  1) One should use the IRT's tls_get() in order to follow the stable ABI.
&gt;  2) Another should call the tls_get syscall directly, because we run
&gt;     some NaCl tests without the IRT.

Coming back to this, it seems that trying to have IRT and non-IRT builds will complicate things a lot (and is why I didn't start working on this issue last year).

It would simplify things if crtbegin.c's __nacl_read_tp() uses the IRT's tls_get() if the IRT is present, but otherwise falls back to doing a direct syscall.  This is what nacl-glibc currently does.  It's not ideal, because we could accidentally be relying on the fallback case instead of the stable ABI, but it's not wrong either.

An alternative simplification could be for PNaCl-generated nexes to always require that the IRT is present.  The NaCl build creates non-IRT-based nexes for testing purposes, but we don't particularly need to repeat all of those non-IRT tests under PNaCl.</ns0:content><ns0:updated>2013-03-13T19:21:10.000Z</ns0:updated><ns0:published>2013-03-13T19:21:10.000Z</ns0:published><ns2:updates /><ns0:title>Comment 4 by mseaborn@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=3073#c4" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/3073/comments/full/4" rel="self" type="application/atom+xml" /></ns0:entry>