<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;A0cNR347eCl7ImA9WxFXGUo.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/156/comments/full/8</ns0:id><ns0:author>
			<ns0:name>cbiffle@google.com</ns0:name><ns0:uri>/u/cbiffle@google.com/</ns0:uri></ns0:author><ns0:content type="html">Victor, I'm pretty sure that was Mark's "option (i)."

I'd love to put ld.so at an absolute address at the top of RAM, to keep it out of the way -- but I'm not sure 
that's possible on the 32-bit sandbox without raising our minimum hardware bar to include NX.

On ARM, there is a small advantage to linking certain library code at the base of RAM: it brings the trampolines 
within reach of direct calls.  I can't imagine ld.so being very large, so giving it a wee chunk at 2^17 probably 
won't hurt perf.

So, could we go with option (iii), but require the ET_DYN object (which is presumably always going to be The 
Dynamic Linker) to have its first PT_LOAD at vaddr 2^17?  Relocation isn't rocket surgery, but if we can make 
the sel_ldr refuse to relocate ET_DYNs linked at 0, I would be happier.</ns0:content><ns0:updated>2010-05-27T16:51:36.000Z</ns0:updated><ns0:published>2010-05-27T16:51:36.000Z</ns0:published><ns2:updates>
			<ns2:ccUpdate>cbif...@google.com</ns2:ccUpdate></ns2:updates><ns0:title>Comment 8 by cbiffle@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=156#c8" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/156/comments/full/8" rel="self" type="application/atom+xml" /></ns0:entry>