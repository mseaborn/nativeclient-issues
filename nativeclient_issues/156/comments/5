<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;C0ANQn47eCl7ImA9WxFXGEo.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/156/comments/full/5</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">I posted a code review for this a while ago (http://codereview.chromium.org/463015) which changed sel_ldr to:
 1) Allow ET_DYN executables as well as ET_EXEC executables.
 2) Ignore unrecognised ELF program headers such as PT_DYNAMIC.
 3) Support objects with a zero start address and load them at 0x20000.

The alternative to extending sel_ldr is to construct a ld.so that looks just like a regular statically-linked 
executable from sel_ldr's point of view, so:
 a) It is marked as ET_EXEC.
 b) Any non-PT_LOAD headers have been stripped.
 c) Its first PT_LOAD has a load address of 0x20000 rather than 0.

In the absence of linker changes, (a) and (b) need to be done with a post-link rewrite step which munges the ELF 
headers.  (c) can be done just with linker script changes.

However, there is a problem with (a).  If we change ld.so to set e_type=ET_EXEC, the linker will refuse to link 
other libraries and executables against it, because they no longer regard it as a library.

There are some ways we could address this:

 i) Change the linker to treat an ET_EXEC object as a library when linking against it.  This could be complicated, 
and have unforeseen consequences.

 ii) Maintain two versions of ld.so: one that can be run under sel_ldr, and one that can be linked against.  If it 
only needs to be linked against during the glibc build, this might be OK.  There is already a notion of having 
different libraries to run and to build against: there is a difference between /lib/libc.so.6 and /usr/lib/libc.so.  
/lib/ld-linux.so.2 is not in the library search path anyway.

 iii) Change sel_ldr to accept ET_DYN executables without relocating them, i.e. (1) but not (3).  This is a tiny 
change to sel_ldr.  However, it does raise the question of what an ELF loader should do if given an ET_DYN object 
whose first PT_LOAD address is non-zero.  Linux 2.6.24 treats such an address as an absolute address to load the 
object at, rather than relocating the object.
</ns0:content><ns0:updated>2010-05-26T11:03:13.000Z</ns0:updated><ns0:published>2010-05-26T11:03:13.000Z</ns0:published><ns2:updates /><ns0:title>Comment 5 by mseaborn@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=156#c5" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/156/comments/full/5" rel="self" type="application/atom+xml" /></ns0:entry>