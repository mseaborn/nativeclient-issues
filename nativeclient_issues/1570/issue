<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;DkEHRn47eCl7ImA9WhdUEEg.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/1570</ns0:id><ns0:author>
			<ns0:name>b...@google.com</ns0:name><ns0:uri>/u/105821748722532785568/</ns0:uri></ns0:author><ns0:content type="html">if we loop:

create thread A, with a large stack
create thread B, with a small stack
thread A exits, freeing up its stack
thread B exits, freeing up its stack

the free list of thread stacks will always have a small stack at its head.  thus the check in nc_thread.c for an available stack will fail, since the free stack list is not sorted by size etc, and the nc_allocate_memory_block_mu code only examines the head of the STAILQ, and cause a new allocation to occur.  the creation of thread B will reuse the small stack at the head, so at least iteration we will add one large stack to the stack free list, leading to unnecessary memory exhaustion.

we need:

(1) a regression test to verify the analysis / reproduce this behavior
(2) a fix, probably just to get rid of the special free lists for tdb and stacks and just rely on malloc directly.</ns0:content><ns0:updated>2011-09-26T16:30:37.000Z</ns0:updated><ns0:published>2011-03-23T18:50:24.000Z</ns0:published><ns2:status>Assigned</ns2:status><ns2:owner>
			<ns2:uri>/u/109286297231979736865/</ns2:uri><ns2:username>mcgra...@chromium.org</ns2:username></ns2:owner><ns2:cc>
			<ns2:uri>/u/mseaborn@chromium.org/</ns2:uri><ns2:username>mseaborn@chromium.org</ns2:username></ns2:cc><ns2:state>open</ns2:state><ns0:title>thread stack memory leak in untrusted code</ns0:title><ns2:label>Type-Defect</ns2:label><ns2:label>Pri-2</ns2:label><ns2:label>Component-Newlib</ns2:label><ns2:label>OS-All</ns2:label><ns2:label>Arch-All</ns2:label><ns2:label>CoreRuntime</ns2:label><ns2:label>Mstone-16</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/1570/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=1570" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/1570" rel="self" type="application/atom+xml" /><ns2:stars>1</ns2:stars><ns2:id>1570</ns2:id></ns0:entry>