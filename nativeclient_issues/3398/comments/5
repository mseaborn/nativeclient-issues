<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;D0cGRH47eCl7ImA9WhBVFE0.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/3398/comments/full/5</ns0:id><ns0:author>
			<ns0:name>mcgra...@chromium.org</ns0:name><ns0:uri>/u/109286297231979736865/</ns0:uri></ns0:author><ns0:content type="html">I see.  I think this could be a reasonable enough use case.  pthread_attr_getstack is the only pthread_attr_* function where POSIX specifies an "unspecified results" situation.  In all the others I think you can indeed fetch the value and if it hasn't been set, you should get the default--or at least, that's a reasonable reading of POSIX.  I don't think it is reliably true of all the glibc implementations, but those are reasonably considered bugs rather than a request for enhancement like the pthread_attr_getstack case.

However, if the only thing you are really concerned with is the default stack size, then there is a different approach that is much more straightforward.  We're considering an upstream addition of an interface that lets you set the process-wide defaults (what you'll get when passing no pthread_attr_t or one on which you haven't set the particular attribute).  The default stack size is the primary motivation for this.  It would be reasonable to backport that to nacl-glibc once this interface is settled upstream (and I'm the upstream reviewer it's blocked on now).</ns0:content><ns0:updated>2013-04-19T20:57:05.000Z</ns0:updated><ns0:published>2013-04-19T20:57:05.000Z</ns0:published><ns2:updates /><ns0:title>Comment 5 by mcgra...@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=3398#c5" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/3398/comments/full/5" rel="self" type="application/atom+xml" /></ns0:entry>