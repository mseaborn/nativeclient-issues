<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;C0cMRH47eCl7ImA9WhBVE08.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/3398/comments/full/2</ns0:id><ns0:author>
			<ns0:name>mcgra...@chromium.org</ns0:name><ns0:uri>/u/109286297231979736865/</ns0:uri></ns0:author><ns0:content type="html">This is a non-bug as far as POSIX is concerned: "If the pthread_attr_getstack() function is called before the stackaddr attribute has been set, the behavior is unspecified."  That is, the program is invalid if it calls pthread_attr_getstack when it never called pthread_attr_setstack and cares at all what values it gets (or if the call succeeds or not).  We might make a change upstream to have pthread_attr_getstack fail (return EINVAL) in this case, but no program ought to rely on something like that.  If you haven't called pthread_attr_setstack but have only called pthread_attr_setstacksize, then you can use pthread_attr_getstacksize instead to retrieve the value previously set.

What's the rationale for the claim that pthread_attr_getstack should do anything useful at all when called in this invalid situation?</ns0:content><ns0:updated>2013-04-18T21:38:05.000Z</ns0:updated><ns0:published>2013-04-18T21:38:05.000Z</ns0:published><ns2:updates /><ns0:title>Comment 2 by mcgra...@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=3398#c2" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/3398/comments/full/2" rel="self" type="application/atom+xml" /></ns0:entry>