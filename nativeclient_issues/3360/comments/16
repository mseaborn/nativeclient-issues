<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;DUIMR347eCl7ImA9WhBaGUs.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/3360/comments/full/16</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">This is done: the conversion pass and ABI check are enabled.

Note that there are some cases where the pass doesn't work.  It fails on this input:

define void @foo() {
  %v = icmp eq i9* null, null
  ret void
}

with the error:
Value: i9* null
LLVM ERROR: Unexpected constant value

We should really fix that.  The pass would be simpler and more robust if it didn't try to modify pointer types, since these will be stripped out by the later ReplacePtrsWithInts pass anyway.</ns0:content><ns0:updated>2013-05-31T02:33:06.000Z</ns0:updated><ns0:published>2013-05-31T02:33:06.000Z</ns0:published><ns2:updates>
			<ns2:status>Fixed</ns2:status></ns2:updates><ns0:title>Comment 16 by mseaborn@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=3360#c16" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/3360/comments/full/16" rel="self" type="application/atom+xml" /></ns0:entry>