<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;DkUFSX47eCl7ImA9Wx5bE00.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/720/comments/full/13</ns0:id><ns0:author>
			<ns0:name>robe...@google.com</ns0:name><ns0:uri>/u/108771824208521698652/</ns0:uri></ns0:author><ns0:content type="html">all our unwind tests work now for both x86-32 and x86-64
r3585 enables the tests to guard against regressions.

Most problems encountered were due to slot size vs pointer size confusion.
One nasty issue was caused by the llvm-gcc x86-64 frontend assuming a pointer size of 8. This frontend is only used to compile libgcc/eh so we could just live with it 
but at the very least we should make the struct _Unwind_Exception platform neutral
and eyeball the rest of the unwind code for similar problems.

I will likely close this bug and file a separate to track progress on ARM. </ns0:content><ns0:updated>2010-10-28T22:16:58.000Z</ns0:updated><ns0:published>2010-10-28T22:16:58.000Z</ns0:published><ns2:updates /><ns0:title>Comment 13 by robe...@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=720#c13" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/720/comments/full/13" rel="self" type="application/atom+xml" /></ns0:entry>