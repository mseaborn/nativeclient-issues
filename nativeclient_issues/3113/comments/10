<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CUQGQn47eCl7ImA9WhBWF0U.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/3113/comments/full/10</ns0:id><ns0:author>
			<ns0:name>eli...@chromium.org</ns0:name><ns0:uri>/u/112264824292994369940/</ns0:uri></ns0:author><ns0:content type="html">An alternative would be to combine compile time with run-time initialization of such globals (globals with non-trivial initialization semantics). The idea is to have a a flat array of i8 or i32 exactly as presented above, generated instead of the complex initializer. However, to handle things that are only known at load-time (addresses of globals), instead of relocations we can add custom code that runs during global program initialization (e.g. registered in __init_array_start/end).

Advantages vs. approach proposed above:

* No new bitcode concept of relocations is required. We can get by without adding new features to the bitcode.
* No need to re-construct constexprs after reading the bitcode. This means that the translator can keep rejecting contexprs without special-casing these ones.

Things to consider / potential disadvantages:

* Read-only (const) globals. Generating code that has to update them requires them to become non-RO. Is this really a problem? Is 'const' an actual guarantee that data gets into RO memory? In any case, we can use IRT's memory protection API to set this data to RO after updating it.

* Performance implications? Applying relocations requires O(N) effort as well, though. While the constant factors involved may be different, it's unlikely that a large amount of relocations will actually be needed in realistic programs. We can always benchmark.





</ns0:content><ns0:updated>2013-04-12T16:15:23.000Z</ns0:updated><ns0:published>2013-04-12T16:15:23.000Z</ns0:published><ns2:updates /><ns0:title>Comment 10 by eli...@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=3113#c10" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/3113/comments/full/10" rel="self" type="application/atom+xml" /></ns0:entry>