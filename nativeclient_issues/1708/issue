<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;DEUFR347eCl7ImA9WhdUEEg.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/1708</ns0:id><ns0:author>
			<ns0:name>euge...@google.com</ns0:name><ns0:uri>/u/101600367715055138223/</ns0:uri></ns0:author><ns0:content type="html">==20603== 10,240,000 bytes in 10,000 blocks are definitely lost in loss record 5,789 of 5,789
==20603==    at 0xB00026178: _malloc_r /mnt/data/build/slave/hardy32-toolchain_x86/build/native_client/src/untrusted/valgrind/valgrind_interceptors.c:171
==20603==    by 0xB0003D75F: __smakebuf_r (in scons-out/nacl-x86-64/obj/tests/memcheck_test/leak_test.nexe)
==20603==    by 0xB0003767F: __swsetup_r (in scons-out/nacl-x86-64/obj/tests/memcheck_test/leak_test.nexe)
==20603==    by 0xB0003B53F: __sfvwrite_r (in scons-out/nacl-x86-64/obj/tests/memcheck_test/leak_test.nexe)
==20603==    by 0xB0002959F: _puts_r (in scons-out/nacl-x86-64/obj/tests/memcheck_test/leak_test.nexe)
==20603==    by 0xB000203BF: ThreadFunc leak_test.c:6
==20603==    by 0xB0002253F: nc_thread_starter /mnt/data/build/slave/hardy32-toolchain_x86/build/native_client/src/untrusted/pthread/nc_thread.c:126
==20603==    by 0xB00025B7F: nc_thread_starter /mnt/data/build/slave/hardy32-toolchain_x86/build/native_client/src/untrusted/valgrind/valgrind_interceptors.c:334

#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;pthread.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;

void* ThreadFunc(void* data) {
  printf(&amp;quot;ThreadFunc\n&amp;quot;);
  return NULL;
}

int main(void) {
  const int N = 10000;
  pthread_t t;

  for (int i = 0; i &amp;lt; N; ++i) {
    pthread_create(&amp;amp;t, 0, ThreadFunc, NULL);
    pthread_join(t, 0);
    printf(&amp;quot;%d\n&amp;quot;, i);
  }
  return 0;
}
</ns0:content><ns0:updated>2011-09-26T16:56:56.000Z</ns0:updated><ns0:published>2011-04-21T15:36:53.000Z</ns0:published><ns2:status>Available</ns2:status><ns2:cc>
			<ns2:uri>/u/101628056640429344673/</ns2:uri><ns2:username>pa...@google.com</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/112873510090665368075/</ns2:uri><ns2:username>k...@google.com</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/109286297231979736865/</ns2:uri><ns2:username>mcgra...@chromium.org</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/mseaborn@chromium.org/</ns2:uri><ns2:username>mseaborn@chromium.org</ns2:username></ns2:cc><ns2:state>open</ns2:state><ns0:title>Memory leak in newlib printf()</ns0:title><ns2:label>Type-Defect</ns2:label><ns2:label>Pri-2</ns2:label><ns2:label>OS-Linux</ns2:label><ns2:label>Arch-x86-64</ns2:label><ns2:label>Component-Newlib</ns2:label><ns2:label>Mstone-16</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/1708/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=1708" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/1708" rel="self" type="application/atom+xml" /><ns2:stars>1</ns2:stars><ns2:id>1708</ns2:id></ns0:entry>