<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;DkAHRX47eCl7ImA9Wx5QEkg.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/860/comments/full/3</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">Actually it turns out that a dependency on libgcc_s is not unusual.
It happens with a regular glibc toolchain if you use g++ to link
instead of gcc:

$ gcc hellow.c -o hellow
$ objdump -x hellow | grep NEEDED
  NEEDED      libc.so.6
$ g++ hellow.c -o hellow
$ objdump -x hellow | grep NEEDED
  NEEDED      libstdc++.so.6
  NEEDED      libm.so.6
  NEEDED      libgcc_s.so.1
  NEEDED      libc.so.6
$ g++ hellow.c -o hellow -Wl,--as-needed
$ objdump -x hellow | grep NEEDED
  NEEDED      libstdc++.so.6
  NEEDED      libc.so.6

So the first priority is to ensure that libgcc_s works, rather than to
worry about the excess dependency.</ns0:content><ns0:updated>2010-08-31T11:38:54.000Z</ns0:updated><ns0:published>2010-08-31T11:38:54.000Z</ns0:published><ns2:updates /><ns0:title>Comment 3 by mseaborn@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=860#c3" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/860/comments/full/3" rel="self" type="application/atom+xml" /></ns0:entry>