<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CUAASX47eCl7ImA9WhNTFE0.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/2812/comments/full/5</ns0:id><ns0:author>
			<ns0:name>s...@google.com</ns0:name><ns0:uri>/u/108394971971967673680/</ns0:uri></ns0:author><ns0:content type="html">I have investigated and confirmed that the local dataflow technique used by the pass is sound, comparing it against MachineOperand based use-def and getting the same set of differences.

After some more tracking down, I have identified that the live variables information stored on machine basic blocks is completely unreliable at the time NaClRewritePass runs.  CPSR is not typically alive across basic blocks throughout most of the optimizer.  It is marked as live in to the exit block as part of a phase that labels all the floating point "global" registers as live in preparation for register allocation.  The liveness information is then garbled, to the best of my knowledge, byt the phase that does probabilistic block layout.  We run after that phase, it seems.  I attempted several versions of weakening the requirements, including exempting exit blocks from the assertion, and was unable to limit the set of blocks for which liveness is inaccurate.  Moreover, I was able to find cases where there were errors in both directions (both spurious liveness and missing liveness).</ns0:content><ns0:updated>2012-10-16T16:09:08.000Z</ns0:updated><ns0:published>2012-10-16T16:09:08.000Z</ns0:published><ns2:updates /><ns0:title>Comment 5 by s...@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2812#c5" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/2812/comments/full/5" rel="self" type="application/atom+xml" /></ns0:entry>