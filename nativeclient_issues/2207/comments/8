<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;D0YESX47eCl7ImA9WhdXFks.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/2207/comments/full/8</ns0:id><ns0:author>
			<ns0:name>krasin@google.com</ns0:name><ns0:uri>/u/krasin@google.com/</ns0:uri></ns0:author><ns0:content type="html">&gt; byval implies a certain method of argument passing.
This is probably what I miss. I'm based on the LLVM language reference and the definition of byval does not look target specific.

http://llvm.org/docs/LangRef.html#paramattrs
byval

    This indicates that the pointer parameter should really be passed by value to the function. The attribute implies that a hidden copy of the pointee is made between the caller and the callee, so the callee is unable to modify the value in the callee. This attribute is only valid on LLVM pointer arguments. It is generally used to pass structs and arrays by value, but is also valid on pointers to scalars. The copy is considered to belong to the caller not the callee (for example, readonly functions should not write to byval parameters). This is not a valid attribute for return values.</ns0:content><ns0:updated>2011-08-30T00:45:08.000Z</ns0:updated><ns0:published>2011-08-30T00:45:08.000Z</ns0:published><ns2:updates /><ns0:title>Comment 8 by krasin@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2207#c8" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/2207/comments/full/8" rel="self" type="application/atom+xml" /></ns0:entry>