<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;DUAMSX47eCl7ImA9WhdXFks.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/2207/comments/full/10</ns0:id><ns0:author>
			<ns0:name>pdox%goo...@gtempaccount.com</ns0:name><ns0:uri>/u/104735739662288482898/</ns0:uri></ns0:author><ns0:content type="html">"byval" implies that the structure is going to be passed on the stack, and that we can therefore reference a pointer (to the stack location) that contains this value.

On X86-64, whether or not a structure is passed on the stack or in registers is determined by an annoyingly complex ABI. This is currently implemented in the front-ends (clang and llvm-gcc), but needs to be implemented in the backends. The "byval" is a hint attribute that should go away, since that is communicating ABI information from the front-end to the backend.

I think we need to merge this bug with http://code.google.com/p/nativeclient/issues/detail?id=1902, since this all fits under the same umbrella. Basically, the LLVM type system needs a major reworking to be able to produce portable bitcode without having these ABI-specific hints all over the place.</ns0:content><ns0:updated>2011-08-30T01:29:48.000Z</ns0:updated><ns0:published>2011-08-30T01:29:48.000Z</ns0:published><ns2:updates /><ns0:title>Comment 10 by pdox%goo...@gtempaccount.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2207#c10" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/2207/comments/full/10" rel="self" type="application/atom+xml" /></ns0:entry>