<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;DkICRH47eCl7ImA9WhRaEk4.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/2574</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">The x86-64 validator allows &amp;quot;f6 /0&amp;quot; and &amp;quot;f6 /1&amp;quot; encodings of the TEST instruction.  From ncdis decodings:

  f6 45 00 00    test [%rbp], 0x0
  f6 4d 00 00    test [%rbp], 0x0

In AMD's docs, only &amp;quot;/0&amp;quot; is listed on the page for TEST.  However, TEST is shown as spanning two columns (&amp;quot;/0&amp;quot; and &amp;quot;/1&amp;quot;) of Group 3 in Table A-6.


I found this redundant encoding is mentioned explicitly in a PhD thesis:

&amp;quot;Intel x86 instruction set has some redundancy w.r.t. the assembly representation of each instruction. Redundancy exists at the opcode level: consider for example the assembly code test byte [eax], 0x0. This instruction can be specified with two different opcodes f6/0 and f6/1, resulting in the encodings: f6 00 00 and f6 08 00. It is worth noting the latter representation is undocumented in Intel's manuals while Amd manuals report it.&amp;quot;
-- &amp;quot;Threats on Real, Emulated and Virtualized Intel x86 Machine Code Execution&amp;quot;, Giampaolo Fresi Roglia
(http://security.dsi.unimi.it/~gianz/pubs/phd_dissertation_giampaolo_fresi_roglia.pdf)


In comparison:

* objdump only allows the &amp;quot;/0&amp;quot; encoding.  It outputs:

   200e0:	f6 45 00 00          	testb  $0x0,0x0(%rbp)
   200e4:	f6                   	(bad)  
   200e5:	4d 00 00             	rex.WRB add %r8b,(%r8)

* The x86-32 validator only allows the &amp;quot;/0&amp;quot; encoding.

* QEMU only allows the &amp;quot;/0&amp;quot; encoding.  qemu-x86_64 in Ubuntu Lucid (version 0.12.3+noroms-0ubuntu9.17) produces an illegal instruction fault on the &amp;quot;/1&amp;quot; encoding.

I see no reason for NaCl to allow the &amp;quot;/1&amp;quot; encoding so I'd suggest removing it on the grounds of minimalism.

The code that allows both is in ncdecode_onebyte.c:

  NaClDefine(&amp;quot;f6/0: Test $Eb, $Ib&amp;quot;, NACLi_386, st, Compare);
  NaClDefine(&amp;quot;f6/1: Test $Eb, $Ib&amp;quot;, NACLi_386, st, Compare);

This code should at least have a comment about the redundancy.
</ns0:content><ns0:updated>2012-02-14T15:49:25.000Z</ns0:updated><ns0:published>2012-02-04T06:14:28.000Z</ns0:published><ns2:status>Fixed</ns2:status><ns2:cc>
			<ns2:uri>/u/108470876877739532758/</ns2:uri><ns2:username>kschi...@google.com</ns2:username></ns2:cc><ns2:state>closed</ns2:state><ns0:title>x86-64 validator allows an alias encoding of the 'test' instruction</ns0:title><ns2:label>Type-Defect</ns2:label><ns2:label>Pri-2</ns2:label><ns2:label>Component-TCB-Validator</ns2:label><ns2:label>OS-All</ns2:label><ns2:label>Arch-x86-64</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/2574/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2574" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/2574" rel="self" type="application/atom+xml" /><ns2:stars>1</ns2:stars><ns2:closedDate>2012-02-14T15:49:25.000Z</ns2:closedDate><ns2:id>2574</ns2:id></ns0:entry>