<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;D0AMQn47eCl7ImA9WhVVFUU.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/446</ns0:id><ns0:author>
			<ns0:name>cbiffle@google.com</ns0:name><ns0:uri>/u/cbiffle@google.com/</ns0:uri></ns0:author><ns0:content type="html">- Background

The ARM SFI system needs two unique instructions that force execution to stop (which for the 
purposes of this writeup I'm calling &amp;quot;roadblocks&amp;quot;).  First, we need a &amp;quot;halt&amp;quot; instruction to mark 
unreachable code, and to replace unsupported instructions.  Second, we need a &amp;quot;data bundle 
marker&amp;quot; to prevent indirect branches from entering inline literal pools.

(These two instructions must be distinct so the validator can recognize them, because they 
trigger slightly different behavior.  This is a decision we may wish to revisit at some point.)

We currently use BKPT for the data bundle marker, and &amp;quot;mov pc, #0&amp;quot; for halt.

- Why This Is Bad

To a sufficiently paranoid observer, both these choices have problems.

BKPT can be resumed, either deliberately by a debugger, or accidentally by an otherwise well-
meaning kernel change.  After spending some time working with the Prefetch Abort interrupt 
handler (which services BKPT as well) in the Linux Kernel, I no longer feel like this scenario is 
unlikely.

mov pc, #0 relies on an unmapped page at zero to do its magic.

Ideally, both &amp;quot;roadblock&amp;quot; instructions would be unambiguous, un-restartable &amp;quot;halts.&amp;quot;  No change 
in software outside of our control should be able to subvert them (short of a truly pathological 
environment).

- Possibilities

For the data-bundle marker, it would actually be useful to use a forward branch to the next 
bundle.  This would simplify placing literal pools inside functions.  However, I'm not sure the 
current validator can unambiguously recognize this, so I'm shelving it for now.

That leaves two main possibilities:
  - Illegal instructions
  - Deliberate misalignment

ARMv7 specifies a &amp;quot;permanently undefined&amp;quot; space we could choose illegal instructions from.  Such 
instructions appear guaranteed to cause an illegal instruction trap on all ARM processors.  There 
is a small risk that a future environment will decide to silently skip these, but it seems unlikely.

Alternatively, and slightly more subtly, we could alter the current halt instruction to deliberately 
misalign the instruction stream.  All ARM processors require that their instructions be naturally 
aligned, so sequences of the form
  mov pc, #2
  mov pc, #4
will trap, independent of the memory map.  (Note that the LSB must be clear, or we enter Thumb 
mode.)  ARM processors have relaxed data alignment restrictions over time, so there's a (very) 
small risk that a future processor might allow unaligned instructions.

- Sketch of a Work Plan

To make this change with minimal disruption, I suggest this order:
1. If desired, write a PQ test to ensure that our halts halt.  (I'm not sure this is necessary for either 
of the above approaches, unless we discover errata.)
2. Alter the ARM validator to accept these instructions in addition to the current ones.
3. Change the hand-assembled ARM validator tests to use the new sequences.
4. Change the toolchain to generate the new sequences.  Allow new SDK to propagate.
5. Recompile all checked-in ARM binaries.
6. Remove support for the old sequences from the validator.</ns0:content><ns0:updated>2012-05-09T17:49:43.000Z</ns0:updated><ns0:published>2010-04-21T16:52:18.000Z</ns0:published><ns2:status>Assigned</ns2:status><ns2:owner>
			<ns2:uri>/u/108470876877739532758/</ns2:uri><ns2:username>kschi...@google.com</ns2:username></ns2:owner><ns2:state>open</ns2:state><ns0:title>ARM sandbox needs to use different "roadblock" instructions</ns0:title><ns2:label>Type-Defect</ns2:label><ns2:label>Pri-1</ns2:label><ns2:label>OS-All</ns2:label><ns2:label>Arch-ARM</ns2:label><ns2:label>Security</ns2:label><ns2:label>Component-TCB</ns2:label><ns2:label>Component-PNaCl</ns2:label><ns2:label>Mstone-X</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/446/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=446" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/446" rel="self" type="application/atom+xml" /><ns2:stars>4</ns2:stars><ns2:blocking>
			<ns2:id>135</ns2:id></ns2:blocking><ns2:id>446</ns2:id></ns0:entry>