<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;C0cDQH47eCl7ImA9WhBXEUo.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/3344</ns0:id><ns0:author>
			<ns0:name>b...@google.com</ns0:name><ns0:uri>/u/105821748722532785568/</ns0:uri></ns0:author><ns0:content type="html">since the assumption that there is only one command channel will no longer be true once the subprocess spawning interfaces become exposed / enabled / available, the command channel operations need mutual exclusion lock to prevent simultaneous command channel RPCs from causing data races.  some operations, e.g., load_module or load_irt, cannot hold the nap-&amp;gt;mu lock because the underlying functions that they call need to take the lock.  we could refactor the underlying code to have a simple lock-taking interface which calls the implementation which assumes that the appropriate lock is held, but it's unclear whether this is always reasonable, since it extends the duration over which the lock is held.

a perhaps simpler solution is to just introduce a command-channel lock, and have the command channel RPC handlers take the command-channel lock before doing any real operations.</ns0:content><ns0:updated>2013-03-25T00:24:31.000Z</ns0:updated><ns0:published>2013-03-19T03:42:07.000Z</ns0:published><ns2:status>Assigned</ns2:status><ns2:owner>
			<ns2:uri>/u/105821748722532785568/</ns2:uri><ns2:username>b...@google.com</ns2:username></ns2:owner><ns2:state>open</ns2:state><ns0:title>command channel operations need exclusion lock</ns0:title><ns2:label>Type-Defect</ns2:label><ns2:label>Mstone-28</ns2:label><ns2:label>Pri-2</ns2:label><ns2:label>Component-TCB</ns2:label><ns2:label>OS-All</ns2:label><ns2:label>Arch-All</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/3344/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=3344" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/3344" rel="self" type="application/atom+xml" /><ns2:stars>1</ns2:stars><ns2:id>3344</ns2:id></ns0:entry>