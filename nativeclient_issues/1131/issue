<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CEQERX47eCl7ImA9WhdTEEs.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/1131</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">The standard ABI for invoking the entry point of an ELF executable is
that argv/envp are passed on the stack, like this:

x86-32:
  0(%esp)   argc
  4(%esp)   argv[0]
  8(%esp)   argv[1]
  ...

This does not follow the platform's normal calling conventions, and so
these arguments normally have to be retrieved using assembly code.

However, there is no particular reason for this to not use normal
calling conventions.  If we changed this ABI for NaCl, our crt1.o
could be implemented in C instead of assembly.


This ABI is not only used between sel_ldr and the initial (static)
executable.  It is also used between ld.so and a dynamically-linked
executable.

This means we need assembly code in three places:
 * ld.so's entry point
 * The point where ld.so transfers control to the dynamic executable's
   entry point.  (This involves some assembly code trickery to ensure
   that the original argv/envp is reused.)
 * The dynamic executable's entry point

Note that ELF also specifies a finaliser function to be passed in
%edx/%rdx, but sel_ldr does not follow this, and leaves this register
undefined at startup.  So we are already departing from the standard ELF
ABI a little.


As an aside, it's just about possible to retrieve the arguments in C
on x86-32, using the hack of taking the address of an argument, e.g.:

void _start(char *argv0) {
  char **argv = &amp;amp;argv0;
  int argc = *(int *) (argv - 1);
  ...
}

However, this only works because on x86-32 arguments are always passed
on the stack.  This doesn't work on x86-64 where the first arguments
are passed in registers.</ns0:content><ns0:updated>2011-07-07T18:11:44.000Z</ns0:updated><ns0:published>2010-11-01T12:44:32.000Z</ns0:published><ns2:status>Fixed</ns2:status><ns2:owner>
			<ns2:uri>/u/109286297231979736865/</ns2:uri><ns2:username>mcgra...@chromium.org</ns2:username></ns2:owner><ns2:cc>
			<ns2:uri>/u/105821748722532785568/</ns2:uri><ns2:username>b...@google.com</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/108394971971967673680/</ns2:uri><ns2:username>s...@google.com</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/113511172007743761909/</ns2:uri><ns2:username>cstefan...@google.com</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/hbridge@google.com/</ns2:uri><ns2:username>hbridge@google.com</ns2:username></ns2:cc><ns2:state>closed</ns2:state><ns0:title>ELF entry point ABI requires assembly code; consider changing the ABI</ns0:title><ns2:label>Type-Enhancement</ns2:label><ns2:label>OS-All</ns2:label><ns2:label>Component-GLibC</ns2:label><ns2:label>Component-GCC</ns2:label><ns2:label>Component-TCB</ns2:label><ns2:label>Arch-All</ns2:label><ns2:label>Mstone-14</ns2:label><ns2:label>Pri-1</ns2:label><ns2:label>ProcessArgsInit</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/1131/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=1131" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/1131" rel="self" type="application/atom+xml" /><ns2:stars>1</ns2:stars><ns2:closedDate>2011-07-07T18:11:44.000Z</ns2:closedDate><ns2:id>1131</ns2:id></ns0:entry>