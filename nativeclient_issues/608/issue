<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;DUQCQH47eCl7ImA9WhZbFko.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/608</ns0:id><ns0:author>
			<ns0:name>espind...@google.com</ns0:name><ns0:uri>/u/101432766050863658364/</ns0:uri></ns0:author><ns0:content type="html">The llvm-gcc that we have compiles
int CompareAndSwap(volatile int* ptr, int old_value, int new_value) {
  return __sync_val_compare_and_swap(ptr, old_value, new_value);
}

into a call to __sync_val_compare_and_swap_4.

Both clang and llvm-gcc at trunk produce

CompareAndSwap:
.Leh_func_begin0:
        movl    %esi, %eax
        lock
        cmpxchgl        %edx, (%rdi)
        ret


This bug is a reminder to check this once we upgrade.</ns0:content><ns0:updated>2011-06-21T17:29:21.000Z</ns0:updated><ns0:published>2010-06-17T04:40:25.000Z</ns0:published><ns2:status>Fixed</ns2:status><ns2:state>closed</ns2:state><ns0:title>Bad code for compare and swap</ns0:title><ns2:label>Type-Enhancement</ns2:label><ns2:label>Pri-1</ns2:label><ns2:label>Arch-PNaCl</ns2:label><ns2:label>Component-PNaCl</ns2:label><ns2:label>Milestone-Caviar</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/608/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=608" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/608" rel="self" type="application/atom+xml" /><ns2:stars>1</ns2:stars><ns2:closedDate>2011-06-21T17:29:21.000Z</ns2:closedDate><ns2:id>608</ns2:id></ns0:entry>