<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;DkEFRH47eCl7ImA9WhBVF0U.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/3372/comments/full/10</ns0:id><ns0:author>
			<ns0:name>kinuko@chromium.org</ns0:name><ns0:uri>/u/kinuko@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">Thanks, as for the filesystem option:

- In general if we need external quota enforcement (like the current tempfs option) and/or need to take care of filename normalization (i.e. user code or filename result in arbitrary cache file names) we'll probably need sandboxed FS support similar to current tempfs (reusing the existing sandbox code, but with a special FS type only for this purpose)

- Otherwise we can maybe simply create a directory in the profile dir, make an isolated file system, grant raw write permission only while compilation is happening and make it read-only (or revoke) afterwards, or just take extra care not to expose the filesystem's ID to user code.  We could combine some lightweight cache-size check mechanism (and eviction maybe?) with this option too.

In either way (with some coding overhead) I imagine the resulting file system should be able to be manipulated using public/existing APIs.</ns0:content><ns0:updated>2013-04-24T06:23:35.000Z</ns0:updated><ns0:published>2013-04-24T06:23:35.000Z</ns0:published><ns2:updates /><ns0:title>Comment 10 by kinuko@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=3372#c10" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/3372/comments/full/10" rel="self" type="application/atom+xml" /></ns0:entry>