<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;A0YMQ347eCl7ImA9WhBVF04.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/3372/comments/full/8</ns0:id><ns0:author>
			<ns0:name>erik...@chromium.org</ns0:name><ns0:uri>/u/104389777848534510881/</ns0:uri></ns0:author><ns0:content type="html">@jvoung
- I think filesystem is still the best approach, but with a special filesystem object that has write restrictions.  I don't think the current cache systems are really designed with our access patterns in mind.  Web cache is lots of small files that come and go frequently, media cache is larger streamed data.  We want to map large files.

@kinuko
- the generated code should have the same read protection as HTML code from the origin
- the cache could become quite large, large applications could easily be 10s of MBs.  However, I'm not sure whether it would be an effective "fill disk" attack since the data needs to have effectively been served by the origin itself (not exactly since the code gets translated, but it should be the same order of magnitude)
- the balancing act with cache eviction is that it's moderately expensive to generate the code, so we want to be careful with evicting too aggressively
- an isolated filesystem sounds good.  I'm assuming that we can make it so that the data is read-only from the perspective of the origin?
</ns0:content><ns0:updated>2013-04-23T17:46:22.000Z</ns0:updated><ns0:published>2013-04-23T17:46:22.000Z</ns0:published><ns2:updates /><ns0:title>Comment 8 by erik...@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=3372#c8" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/3372/comments/full/8" rel="self" type="application/atom+xml" /></ns0:entry>