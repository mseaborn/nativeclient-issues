<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CkQGQ347eCl7ImA9WxFXEUw.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/469/comments/full/6</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">Gregory D wrote:
&gt; We discussed the question of dependencies with the Chrome team
&gt; several times, starting with the first integration CL, and the
&gt; conclusion was always the same: files from the chrome directory
&gt; should not be included outside of that directory. So a policy does
&gt; exist. Do you think there are any benefits in changing that policy?

It sounds OK to me, and it's slightly different from what I thought
you were suggesting.  Let's document this.  I've added a section to
http://code.google.com/p/nativeclient/wiki/ChromiumIntegration.

So, the policy is specifically about the "chrome" directory, and
dependencies on other directories could be OK?  Is the dependency I
added on base's GetUrandomFD() OK?  If that's the case, we can move
chrome/renderer/renderer_sandbox_support_linux.h out of the "chrome"
dir -- and rename/rework it in the process so that it's usable on Mac
OS X too.

&gt; As for register functions, we already have one such function:
&gt; RegisterInternalNaClPlugin in
&gt; src/trusted/plugin/nacl_entry_points.cc. We can probably enhance it
&gt; to use the mechanism you suggest in (b), if we don't hit any design
&gt; problems in the process.

If the policy is more about forbidding dependencies on "chrome" than
about forbidding cross-repo dependencies, we could use link-time
dependency injection instead of run-time dependency injection.

&gt; By the way, the Windows sandbox is pretty separate from Chrome and
&gt; can be found in the sandbox directory. Unfortunately, it seems that
&gt; the situation for Linux and Mac is different.

Most sandboxing systems taketh away authority and giveth it back
through some other mechanism.  That's the case with the Linux/Mac
sandboxes.  The parts that take away authority are general purpose and
in "sandbox/linux".  Some of the parts that grant authority back are
more Chromium-specific (e.g. related to fonts) which is why they're
not in "sandbox".
</ns0:content><ns0:updated>2010-05-17T15:32:02.000Z</ns0:updated><ns0:published>2010-05-17T15:32:02.000Z</ns0:published><ns2:updates /><ns0:title>Comment 6 by mseaborn@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=469#c6" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/469/comments/full/6" rel="self" type="application/atom+xml" /></ns0:entry>