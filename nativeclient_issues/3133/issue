<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;DUMFRn47eCl7ImA9WhNRE08.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/3133</ns0:id><ns0:author>
			<ns0:name>eli...@chromium.org</ns0:name><ns0:uri>/u/112264824292994369940/</ns0:uri></ns0:author><ns0:content type="html">We currently emit our SFI guards as &amp;quot;pseudo-instructions&amp;quot; from CodeGen, which then get expanded to actual instructions in the MC level. This has a number of problems:

* Layering violation (MC is not supposed to be smart about expanding pseudo-instructions)
* Testability (it makes it harder to test CodeGen's and MC's functions separately)
* Possibly performance: by adding our guards after the CodeGen is done with the code we may be missing some optimization opportunities (for example see issue #2812)</ns0:content><ns0:updated>2012-11-07T22:30:17.000Z</ns0:updated><ns0:published>2012-11-07T22:29:10.000Z</ns0:published><ns2:status>New</ns2:status><ns2:cc>
			<ns2:uri>/u/110547710856190289770/</ns2:uri><ns2:username>s...@chromium.org</ns2:username></ns2:cc><ns2:state>open</ns2:state><ns0:title>Change the stage where our LLVM emits SFI guards for sandboxing instructions</ns0:title><ns2:label>Type-Enhancement</ns2:label><ns2:label>Pri-2</ns2:label><ns2:label>Component-PNaCl</ns2:label><ns2:label>OS-All</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/3133/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=3133" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/3133" rel="self" type="application/atom+xml" /><ns2:stars>2</ns2:stars><ns2:id>3133</ns2:id></ns0:entry>