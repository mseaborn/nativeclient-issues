<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;C04NQ347eCl7ImA9WhBQE00.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/3321</ns0:id><ns0:author>
			<ns0:name>jvo...@google.com</ns0:name><ns0:uri>/u/102292187274959663599/</ns0:uri></ns0:author><ns0:content type="html">&lt;b&gt;- Where are we today?&lt;/b&gt;

We build a target-specific translator, but at a coarse level.  We build one ARM specific LLVM translator, and we build one shared i686 + x86_64 LLVM translator.

The translator is also generic in that it could handle Darwin, Windows, Linux, etc.  It's not specialized to NaCl.


&lt;b&gt;- Why is this a problem?&lt;/b&gt;

For ARM at least, JF noticed that the table-generated ARMGetFastISel.inc code has lots of checks that should be false for NaCl.

E.g., you might see a pattern like:


unsigned FastEmit_ARMISD_SRA_FLAG_MVT_i32_r(MVT RetVT, unsigned Op0, bool Op0IsKill) {
  if (RetVT.SimpleTy != MVT::i32)
    return 0;
  if ((!Subtarget-&amp;gt;isThumb())) {
    return FastEmitInst_r(ARM::MOVsra_flag, &amp;amp;ARM::GPRRegClass, Op0, Op0IsKill);
  }
  if ((Subtarget-&amp;gt;isThumb2())) {
    return FastEmitInst_r(ARM::t2MOVsra_flag, &amp;amp;ARM::rGPRRegClass, Op0, Op0IsKill);
  }
  return 0;
}


Where it is choosing between a t2${OP} or ${OP}.  NaCl does not support the sandbox for Thumb right now, so only the type check is relevant.

There are likely more of such checks in the non-table-generated code.

====

For X86 FastISel, the usefulness is not as clear.  For X86, there aren't a lot of checks for 32-bit vs 64-bit (roughly, this is only checked for calls and indirect branches).  Most of the checks are for features like hasAVX().  We may not be able to assume much about that.

However, perhaps things like register classes could be specialized more.  For example, you don't need the GR64 bits on the x86-32 build...

Perhaps things like isLittleEndian() can be specialized more too.  That affects low-level bits like OutputBuffer and AsmStreamers.


&lt;b&gt;- The proposed enhancement:&lt;/b&gt;

Find a way to specialize the builds further.


&lt;b&gt;- Exit criteria:&lt;/b&gt;

Translator is smaller and faster.

=====

May want to get some estimates on impact too...</ns0:content><ns0:updated>2013-03-14T22:59:52.000Z</ns0:updated><ns0:published>2013-02-28T00:17:33.000Z</ns0:published><ns2:status>New</ns2:status><ns2:cc>
			<ns2:uri>/u/109636895838879576326/</ns2:uri><ns2:username>j...@chromium.org</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/dschuff@chromium.org/</ns2:uri><ns2:username>dschuff@chromium.org</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/112264824292994369940/</ns2:uri><ns2:username>eli...@chromium.org</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/115553580108938459101/</ns2:uri><ns2:username>stich...@chromium.org</ns2:username></ns2:cc><ns2:state>open</ns2:state><ns0:title>Create a more target-specialized build of LLVM translator</ns0:title><ns2:label>Type-Enhancement</ns2:label><ns2:label>Pri-2</ns2:label><ns2:label>Component-PNaCl</ns2:label><ns2:label>OS-All</ns2:label><ns2:label>Mstone-28</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/3321/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=3321" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/3321" rel="self" type="application/atom+xml" /><ns2:stars>1</ns2:stars><ns2:id>3321</ns2:id></ns0:entry>