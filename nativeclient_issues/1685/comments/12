<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;Ak4CQX47eCl7ImA9WhZQEUg.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/1685/comments/full/12</ns0:id><ns0:author>
			<ns0:name>k...@google.com</ns0:name><ns0:uri>/u/112873510090665368075/</ns0:uri></ns0:author><ns0:content type="html">Sorry to be bring the bad news, but the whole goal (static linker optimization) is useless and pointless for us. We CAN NOT use these sequences on some platform (AKA Windows x64). Reason is simple: all models use %fs on x86-64 - the only exception is General Dynamic model. We will know if we can use %fs only at runtime - and this is when we can/should rewrite these sequences.

Nonetheless all such rewrites operate on local pieces of code: in the place where we are doing rewrites we are starting from RELOCATION. The appropriate code recognizes well-known sequences near relocation.

Take GD-&gt;IE rewrite:

.byte 0x66
leaq x@tlsgd(%rip),%rdi // 7 bytes
.byte 0x66
&lt;-- offset 9 is here --&gt;
.byte 0x66
rex64
call __tls_get_addr@plt

movq %fs:0,%rax // 9 bytes
addq x@gottpoff(%rip),%rax // 7 bytes

Note how rewrite took one prefix from lea and another from call (two other prefixes from call go to second rewrite). This means we should generate something like this:

   0:	66 48 8d 3d 00 00 00 	lea    0x0(%rip),%rdi        # 8 &lt;_Z3foov+0x8&gt;
   7:	00 
   8:	66 90             	xchg   %ax,%ax
   a:	66 66 66 66 66 66 2e 	nopw   %cs:0x0(%rax,%rax,1)
  11:	0f 1f 84 00 00 00 00 
  18:	00 
  1a:	66 48 e8 00 00 00 00   	rex.W callq  20 &lt;_Z3foov+0x20&gt;

Right? Wrong. We are using ILP32 model so we need "leal x@tlsgd(%rip),%edi", not "leaq x@tlsgd(%rip),%edi"! But this sequence is shorter (6 bytes, not 7) and, more importantly, it'll be changed if we'll add 0x66 to it (it'll be "leaw x@tlsgd(%rip),%di" - not even close to what we want).

That's why before we'll go and add sequences to validator we should take a look on x32, adjust it's sequences for our needs and only after that decide what we should validate and what we should not validate.

IMNSHO right now we should just disable all models except GD, disable all rewrites and remove all redundant prefixes (it'll make code validatable and correct).

Later we may decide what to do with these rewrites...

P.S. Actually it's possible that we'll be able to use different models on Windows too: %fs points to TIB there and this structure contains a lot of 20 bytes of space "reserved for user application": http://en.wikipedia.org/wiki/Win32_Thread_Information_Block. If this block exist on Win64 too (we need to check) then we'll be able to allow such rewrites... but in dynamic linker when TCB will concede 4 bytes in %gs:xxx area. Note: %gs (not %fs as in Linux). It's all possible and probably desirable, but... this is NOT something we want to pursue this week.
</ns0:content><ns0:updated>2011-04-18T20:36:00.000Z</ns0:updated><ns0:published>2011-04-18T20:36:00.000Z</ns0:published><ns2:updates /><ns0:title>Comment 12 by k...@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=1685#c12" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/1685/comments/full/12" rel="self" type="application/atom+xml" /></ns0:entry>