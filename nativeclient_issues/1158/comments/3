<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CU8CQX47eCl7ImA9Wx5aFUU.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/1158/comments/full/3</ns0:id><ns0:author>
			<ns0:name>aba...@chromium.org</ns0:name><ns0:uri>/u/117420925389613150407/</ns0:uri></ns0:author><ns0:content type="html">&gt; With the newlib-based toolchain, you need to link with "-lnosys" to get unlink().  libnosys defines various no-op functions.

Great.  We'll try that.

&gt; In the newer glibc-based toolchain, unlink() will be part of libc, and you won't have to use "-lnosys".

How do we use the glibc-based toolchain?  We're working from these instructions:

http://code.google.com/p/nativeclient-sdk/wiki/HowTo_GetStarted

We're just extending the "hello world" example to build and link the Chromium IPC library.

&gt; What is the intention behind the "ChromiumIPCBringup" label?

We're trying to get the Chromium IPC library (and its dependencies) running in NaCl.  This is a prerequisite for using NaCl for a number of internal purposes in Chrome.  For example, if we want to run the utility process in NaCl, we'll need to have Base and IPC because those are at the bottom of the dependency chain for almost all Chromium code.

The label is just an easy way for us to track the bugs we run into.  If the label disrupts your workflow, we can use another mechanism to track this set of bugs.</ns0:content><ns0:updated>2010-11-12T17:44:20.000Z</ns0:updated><ns0:published>2010-11-12T17:44:20.000Z</ns0:published><ns2:updates /><ns0:title>Comment 3 by aba...@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=1158#c3" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/1158/comments/full/3" rel="self" type="application/atom+xml" /></ns0:entry>