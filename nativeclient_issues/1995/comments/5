<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;D0EFSX47eCl7ImA9WhdTE0Q.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/1995/comments/full/5</ns0:id><ns0:author>
			<ns0:name>robertm@google.com</ns0:name><ns0:uri>/u/robertm@google.com/</ns0:uri></ns0:author><ns0:content type="html">Pdox,

I'll  add the intrinsic you suggested so we can play with it but I do not think it is appropriate for the  ehsupport scenario as it will limit our options.

If any of our bitcode contains a switch statement of the form:

int GetArchSpecificValue() {
  switch (pnacl_intrinsic_get_arch()) {
    case ARM:
             return value_appropriate_form_arm;
   case X86_32:
              return value_appropriate_form_x86_32
.      ...
  }
}

we cannot ship this in a pexe as it will break for unknown archs.

On the other hand, if the same function is an intrinsic, new archs can be supported
by adding support for this intrinsic to the llc backend.


</ns0:content><ns0:updated>2011-07-11T14:46:58.000Z</ns0:updated><ns0:published>2011-07-11T14:46:58.000Z</ns0:published><ns2:updates /><ns0:title>Comment 5 by robertm@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=1995#c5" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/1995/comments/full/5" rel="self" type="application/atom+xml" /></ns0:entry>