<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;DEYMRX47eCl7ImA9WhdTE0Q.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/1995/comments/full/6</ns0:id><ns0:author>
			<ns0:name>pdox%goo...@gtempaccount.com</ns0:name><ns0:uri>/u/104735739662288482898/</ns0:uri></ns0:author><ns0:content type="html">As I mentioned on the meeting, I don't think we should ever ship libgcc and libgcc_eh as bitcode. Especially not to be compiled inside a pexe.

The purpose of libgcc and libgcc_eh is to provide intrinsics to match what the compiler expects for a platform ABI. In this case, the compiler is llc. Thus, libgcc/eh and llc should be version-locked and shipped together.

Bitcode files should never directly invoke libgcc/eh functions, so this doesn't affect bitcode linking at all.

If we were to ship libgcc/eh as bitcode inside a pexe, then we couldn't guard against needing new intrinsics in the future (because of changes to LLVM). Also, future support for new architectures might require hacking libgcc/eh in a way which is not just as simple as changing the constants and the initialization function. An old version of libgcc/eh cannot be forward compatible.</ns0:content><ns0:updated>2011-07-11T14:56:24.000Z</ns0:updated><ns0:published>2011-07-11T14:56:24.000Z</ns0:published><ns2:updates /><ns0:title>Comment 6 by pdox%goo...@gtempaccount.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=1995#c6" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/1995/comments/full/6" rel="self" type="application/atom+xml" /></ns0:entry>