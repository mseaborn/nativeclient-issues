<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;A04ARn47eCl7ImA9WhVUGEU.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/2786/comments/full/9</ns0:id><ns0:author>
			<ns0:name>jvo...@google.com</ns0:name><ns0:uri>/u/102292187274959663599/</ns0:uri></ns0:author><ns0:content type="html">Okay, I might have to go with a work around for now.

Fixing the underlying problem might take a little while longer and reducing the input is pretty painful too.  This only trips an assert while llvm is shutting down (see stack the trace in the original report), so hopefully the workaround doesn't have much impact...


Some other details:

We can reproduce the problem in many different ways.  I think the problem is that the bitcode linking and unique'ing of metadata nodes isn't fully unique'ing things.  This messes up some invariants in some metadata list nodes.


Some example invariants on some lists:
(1) The list is actually supposed to be a set.  Unfortunately, there isn't anything that enforces this earlier.

(2) If an item is in the list, that should be the only list containing that item.  This is similar to the above, except that the multiple references come from multiple lists instead of just one.

(3) ???

In some cases, the bitcode linker may be sharing items between lists, violating (2), or it may contain duplicate items after unique'ing, violating (1).

Example of (1):

;; An enum list, referenced from a DW_TAG_compile unit.  Note the duplicates of !1373

!1366 = metadata !{metadata !3, metadata !1367, metadata !1373, metadata !1373, ...}

This alone doesn't seem to trigger the assert.


Another example of (1):

The list of DW_TAG_subprograms referenced from a DW_TAG_compile_unit might have duplicates.  Having a single duplicate like this could definitely trigger the assertion.  I got this from the bugpoint'ed version of the bitcode file, but the original bitcode file did not actually have this particular problem.


Example of (2):


;; The list of members, methods, etc. referenced by a DW_TAG_class_type, may share members.
;; In the following lists, !766 is used here as well as in other member/method lists.

!4669 = metadata !{metadata !4670, metadata !766, metadata !4715, ...}

;; !766 is also referenced from another list:

!716 = metadata !{metadata !717, metadata !766, metadata !767, ...}

This makes the structure more DAG-like that tree-like.

Actually, they both come from the DW_TAG_class_type for "_Sp_counted_base&lt;1&gt;", but there are multiple versions of these instead of just one version.  Possibly, they both should have been uniqued to the same thing, but that didn't happen.

------

I tried manually fixing the invariants (1) and (2), but the assert can still trigger.  There must be some other invariants that we are breaking.  Attached is a support script that I used to help identify these broken invariants, and garbage collect unused metadata nodes, etc...

</ns0:content><ns0:updated>2012-05-24T20:05:47.000Z</ns0:updated><ns0:published>2012-05-24T20:05:47.000Z</ns0:published><ns2:updates /><ns0:title>Comment 9 by jvo...@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2786#c9" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/2786/comments/full/9" rel="self" type="application/atom+xml" /></ns0:entry>