<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CE8DSX47eCl7ImA9WhVRE0U.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/2349</ns0:id><ns0:author>
			<ns0:name>b...@google.com</ns0:name><ns0:uri>/u/105821748722532785568/</ns0:uri></ns0:author><ns0:content type="html">to eliminate the need for volatile declarations in many syscall handler functions, consider moving to an explicit and centralized copyin / copyout interface.  (NB: the presence of such an interface would not preclude direct untrusted memory references, so it wouldn't preclude no-volatile induced TOCvTOU bugs.)  using a centralized copyin / copyout interface may facilitate adding locks on memory regions that prevent mmap/munmap operations from causing I/O related windows mmap security races.</ns0:content><ns0:updated>2012-03-22T02:21:18.000Z</ns0:updated><ns0:published>2011-10-10T18:41:12.000Z</ns0:published><ns2:status>Fixed</ns2:status><ns2:state>closed</ns2:state><ns0:title>convert to using copyin/copyout style interface</ns0:title><ns2:label>Type-Defect</ns2:label><ns2:label>Mstone-X</ns2:label><ns2:label>Pri-2</ns2:label><ns2:label>Component-TCB</ns2:label><ns2:label>OS-All</ns2:label><ns2:label>Arch-All</ns2:label><ns2:label>CoreRuntime</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/2349/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2349" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/2349" rel="self" type="application/atom+xml" /><ns2:stars>2</ns2:stars><ns2:blocking>
			<ns2:id>2619</ns2:id></ns2:blocking><ns2:closedDate>2012-03-22T02:21:18.000Z</ns2:closedDate><ns2:id>2349</ns2:id></ns0:entry>