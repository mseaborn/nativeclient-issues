<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CEYMRX47eCl7ImA9WxFUGEk.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/639/comments/full/11</ns0:id><ns0:author>
			<ns0:name>espind...@google.com</ns0:name><ns0:uri>/u/101432766050863658364/</ns0:uri></ns0:author><ns0:content type="html">I investigated this a bit more and I think we can cut down the dependencies a lot.

* First, the cases that llvm can produce calls to libc. We should be fine if we don't run simplify libcalls in the device (we shouldn't anyway) and expand any memory copies inline. Shouldn't be hard to check.

* The dependencies that libgcc has are

"r0" and "sp". Both in libunwind.o. Looks like a bug, I cannot find in by dissembling the file.
abort. This is used by the trapping math functions.
raise. This is used by __div0 to raise FPE
memcpy. This is used in Used in unwind_phase2_forced.

There is only one call to memcpy, just inline it.
It looks like the calls to raise and abot currently do nothing. Even it they should do something, we can just implement the correct nacl calls in libgcc.

libgcc_eh initially looks harder, since it has calls to malloc and free, but all of those call are in tls emulation, and we don't need that.
</ns0:content><ns0:updated>2010-06-29T20:09:44.000Z</ns0:updated><ns0:published>2010-06-29T20:09:44.000Z</ns0:published><ns2:updates /><ns0:title>Comment 11 by espind...@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=639#c11" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/639/comments/full/11" rel="self" type="application/atom+xml" /></ns0:entry>