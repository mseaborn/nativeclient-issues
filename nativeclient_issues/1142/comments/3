<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;Dk8NQ347eCl7ImA9Wx9TFEs.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/1142/comments/full/3</ns0:id><ns0:author>
			<ns0:name>b...@google.com</ns0:name><ns0:uri>/u/105821748722532785568/</ns0:uri></ns0:author><ns0:content type="html">i know this is a late reply, but i have a comment/suggestion about this.

1K is large.  in extreme cases, e.g., user-level threads being multiplexed on top of native threads, jmp_buf is often used to hold thread state, and in such an environment where lots of light-weight threads are used (possibly including the Go runtime), the overhead might be unacceptable.

perhaps we should provide a hard upper bound such as this 1K limit for an easy-to-use but simple interface, but also provide, via a sysconf-like interface or a compiler intrinsic, the actual size needed for the platform, so that a portable program can more intelligently adapt to the actual hardware/ABI needs, rather than a maximal common denominator size?</ns0:content><ns0:updated>2010-11-22T22:28:12.000Z</ns0:updated><ns0:published>2010-11-22T22:28:12.000Z</ns0:published><ns2:updates /><ns0:title>Comment 3 by b...@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=1142#c3" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/1142/comments/full/3" rel="self" type="application/atom+xml" /></ns0:entry>