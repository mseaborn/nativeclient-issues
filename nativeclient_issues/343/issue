<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;DkUAR347eCl7ImA9WxBbFkQ.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/343</ns0:id><ns0:author>
			<ns0:name>bradc...@google.com</ns0:name><ns0:uri>/u/110304265766688778552/</ns0:uri></ns0:author><ns0:content type="html">1. Shared Memory Information Leak

File: trusted/plugin/srpc/shared_memory.cc
Function: SharedMemory::RpcWrite()
Problem Type: Information Leak
Compromise Type: Varies
Severity: Medium

This function will read bytes from a UTF-8 string into a shared memory
buffer from a Javascript string. However, if UTF8 bytes are present in the
string, the 
loop that reads data from it incorrectly checks to see if the bytes being
read are within the bounds of the supplied string. Specifically, the
variable i is 
checked against utf_bytes, but i is only incremented once each iteration of
the loop, but the pointer to str might be incremented twice in the case of
UTF8 
sequences.

2. SPRC Buffer Overflow

File: src/trusted/plugin/srpc/method_map.h
Function: SrpcParams::FillVec()
Problem Type: Illegal Memory Access
Compromise Type: Remote Compromis
Severity: High

This function has an off-by-one error if the input string length is exactly
NACL_SRPC_MAX_ARGS + 1 bytes in length. In this situation, a NULL DWORD
will be 
written one element past the ends of the ins or outs array being filled in
memory.

3. SPRC Type Confusion Vulnerability

File: src/trusted/plugin/srpc/scriptable_handle.h
Function: ScriptableHandle::MarshallInputs()
Problem Type: Illegal Memory Access
Compromise Type: Remote compromise
Severity: High 

When a NaCl module takes a handle as input, an object is marshalled from
the input parameters and cast to a ScriptableHandleBase. There is a
potential type 
confusion problem here, since the NPObject received as a parameter may not
be an object created by NaCl, and so is not necessarily a ScriptableHandleBase 
pointer. Supplying other types of objects will lead to invalid memory
accesses when calling get_handle(), thus potentially resulting in arbitrary
execution.</ns0:content><ns0:updated>2010-03-15T23:04:06.000Z</ns0:updated><ns0:published>2010-03-09T15:51:45.000Z</ns0:published><ns2:status>Fixed</ns2:status><ns2:owner>
			<ns2:uri>/u/108394971971967673680/</ns2:uri><ns2:username>s...@google.com</ns2:username></ns2:owner><ns2:cc>
			<ns2:uri>/u/105821748722532785568/</ns2:uri><ns2:username>b...@google.com</ns2:username></ns2:cc><ns2:state>closed</ns2:state><ns0:title>[MD audit] SRPC defects</ns0:title><ns2:label>Type-Defect</ns2:label><ns2:label>Pri-0</ns2:label><ns2:label>Milestone-Chromium-5</ns2:label><ns2:label>Security</ns2:label><ns2:label>OS-All</ns2:label><ns2:label>Component-TrustedRT</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/343/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=343" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/343" rel="self" type="application/atom+xml" /><ns2:stars>1</ns2:stars><ns2:closedDate>2010-03-15T23:04:06.000Z</ns2:closedDate><ns2:id>343</ns2:id></ns0:entry>