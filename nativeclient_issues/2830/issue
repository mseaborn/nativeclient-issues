<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CEUCQX47eCl7ImA9WhBWFEs.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/2830</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">For issue 2758, for the debug stub, I implemented getting a register snapshot for an untrusted thread that has been suspended (https://src.chromium.org/viewvc/native_client?view=rev&amp;amp;revision=8718).

This functionality works if the thread was suspended while running untrusted code or while inside a NaCl syscall, but it doesn't work if the suspension kicked in during the transition between the two.  The interruption can occur when %eip/%rip/pc points to trusted code, while the thread's suspend_state is still NACL_APP_THREAD_UNTRUSTED.

The main problem is with entering a NaCl syscall.  %eip/%rip/pc might point inside the trampoline code or nacl_syscall_*.S.  This code saves a subset of registers into NaClAppThread.user.  Once &amp;quot;user&amp;quot; is filled out, the debug stub can return that.  However, nacl_syscall_*.S can be interrupted while registers (such as %rsp) have been modified but not yet saved.

There are two ways we might deal with this:

 1) We could implement some stack unwinding logic that looks at %eip/%rip to manually unwind the effects of register saving in nacl_syscall_*.S.

 2) If we notice that %eip/%rip points to trusted code, we can resume the thread and let it suspend itself via NaClAppThreadSetSuspendState().  This will be cheaper to do on Linux where we're using signals for thread suspension.  On Windows this would involve more bouncing between threads using SuspendThread()/ResumeThread().

There are a couple of other cases to consider:

 a) Switching from trusted to untrusted code (nacl_switch_*.S; either for returning from a syscall or starting a new thread).  This differs from syscall entry in that, in principle, it is restartable if interrupted, because we're restoring previously-saved registers and not saving any registers.

 b) Switching to trusted code to enter a signal handler such as for SIGSEGV or SIGTRAP.  One way to get around this would be to mask SIGUSR1 while the signal handling is running (though this isn't a good solution if the signal handler is going to block).

Furthermore, we might want to allow setting the registers of a suspended thread.  The approach we use above might depend on whether we want to allow setting registers for a thread that is suspended in a NaCl syscall.
</ns0:content><ns0:updated>2013-04-08T23:04:20.000Z</ns0:updated><ns0:published>2012-06-02T17:48:30.000Z</ns0:published><ns2:status>Assigned</ns2:status><ns2:owner>
			<ns2:uri>/u/mseaborn@chromium.org/</ns2:uri><ns2:username>mseaborn@chromium.org</ns2:username></ns2:owner><ns2:cc>
			<ns2:uri>/u/103360015124260446450/</ns2:uri><ns2:username>eaelt...@google.com</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/112856509894568708731/</ns2:uri><ns2:username>halya...@google.com</ns2:username></ns2:cc><ns2:state>open</ns2:state><ns0:title>Thread suspension: Capture coherent untrusted register state in context switches</ns0:title><ns2:label>Type-Enhancement</ns2:label><ns2:label>Pri-2</ns2:label><ns2:label>OS-All</ns2:label><ns2:label>Debugging</ns2:label><ns2:label>Component-DebugStub</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/2830/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2830" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/2830" rel="self" type="application/atom+xml" /><ns2:stars>3</ns2:stars><ns2:blocking>
			<ns2:id>3245</ns2:id><ns2:project>nativeclient</ns2:project></ns2:blocking><ns2:id>2830</ns2:id></ns0:entry>