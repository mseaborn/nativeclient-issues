<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;C04FRH47eCl7ImA9WhVaFUU.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/2830/comments/full/2</ns0:id><ns0:author>
			<ns0:name>eaelt...@google.com</ns0:name><ns0:uri>/u/103360015124260446450/</ns0:uri></ns0:author><ns0:content type="html">There is another way to consider: we could introduce a global (global, not per-thread) "lock" to guard switching states from suspension.

Either thread suspension is holding the lock, which means any thread might get a suspend signal, thus it should not perform any state switches. Or state switching is holding the lock, meaning any number of threads might be doing state switch and thread suspension should not send suspend signals.
</ns0:content><ns0:updated>2012-06-13T10:05:15.000Z</ns0:updated><ns0:published>2012-06-13T10:05:15.000Z</ns0:published><ns2:updates /><ns0:title>Comment 2 by eaelt...@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2830#c2" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/2830/comments/full/2" rel="self" type="application/atom+xml" /></ns0:entry>