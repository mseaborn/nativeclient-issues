<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;DkUNQH47eCl7ImA9WhVaFk0.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/2830/comments/full/4</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">@ comment 2:  While we probably could, in principle, hold a global lock while saving NaClAppThread::user, it's not a high-quality thing to do.  Firstly it would have to be a spinlock, because we can't do host-OS library calls until we have restored the trusted stack.  Secondly it would add overhead to the context switch (including cache line ping-ponging between cores), and it would make the context switch code more complicated.  I don't see a reason to do this when approaches (1) or (2) above would work.</ns0:content><ns0:updated>2012-06-13T16:18:11.000Z</ns0:updated><ns0:published>2012-06-13T16:18:11.000Z</ns0:published><ns2:updates /><ns0:title>Comment 4 by mseaborn@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2830#c4" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/2830/comments/full/4" rel="self" type="application/atom+xml" /></ns0:entry>