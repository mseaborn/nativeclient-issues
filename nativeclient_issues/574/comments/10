<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;C0cBR347eCl7ImA9Wx9aEEk.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/574/comments/full/10</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">The conditional compilation using NACL_TARGET_SUBARCH in the x86 validator make it tricky to link both the x86-32 and x86-64 validators into the same executable.

Possible options to address this:

 1) Pass the architecture around as an argument at run time.  This could have a performance impact, which is not good because the validator is performance critical.  *However*, many of the conflicts appear to be in code that sets up tables.  Because this is done only once, it is not performance critical.  Furthermore, I suspect a lot of this is not used for the x86-32 validator anyway, even if it does have a 32-bit code path.

 2) Link each validator with "ld --relocatable" and use "objcopy" to hide the symbils that would conflict.  Requires logic in the build system that may not be easy to port to Windows or Gyp.

 3) Build each validator as a single .c file (with #includes) and declare the symbols as static.

 4) Append "_32" or "_64" to each symbol.

   a) Use a macro to do this, e.g.
      #define VALIDATOR_SYM(sym) sym##_##NACL_SUBARCH
      void VALIDATOR_SYM(NaClBuildExpVector)(struct NaClInstState* state) {
        ...
      }

   b) Use a big file of #defines to do this, e.g.
      #define NaClBuildExpVector NaClBuildExpVector_64

 5) Switch to C++ for the validators and use templates to parameterise the functions for 32-bit and 64-bit.  The ARM validator is already in C++.  Using C++ across all the validators would make it easier for them to share code; templates would help keep this efficient.

    Example:

    template &lt;class Arch&gt;
    Bool NaClConsumeAndCheckOperandSize(NaClInstState* state) {
      state-&gt;operand_size = NaClExtractOpSize&lt;Arch&gt;(state);
      ...
    }
</ns0:content><ns0:updated>2011-03-02T04:44:16.000Z</ns0:updated><ns0:published>2011-03-02T04:44:16.000Z</ns0:published><ns2:updates>
			<ns2:ccUpdate>kschi...@google.com</ns2:ccUpdate></ns2:updates><ns0:title>Comment 10 by mseaborn@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=574#c10" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/574/comments/full/10" rel="self" type="application/atom+xml" /></ns0:entry>