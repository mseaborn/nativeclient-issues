<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;DkUHR347eCl7ImA9Wx9RE0g.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/1253/comments/full/3</ns0:id><ns0:author>
			<ns0:name>b...@google.com</ns0:name><ns0:uri>/u/105821748722532785568/</ns0:uri></ns0:author><ns0:content type="html">we already have an off64_t, used in lseek, so we can seek around in large files, just not reliable get its size.  Hrrm.  we should definitely change the stat definition for st_size.

as for nanosecond fields, i'm not sure that i see the use cases -- especially since not all platforms support sub-second time resolution, and this will just become another platform difference.

making time_t be 64 bits -- and/or preallocate space and provide shape-compatible accessors for legacy code -- makes sense to me.

i think bumping ABI suffices, pre-Arctic-Sea.
</ns0:content><ns0:updated>2010-12-14T19:17:16.000Z</ns0:updated><ns0:published>2010-12-14T19:17:16.000Z</ns0:published><ns2:updates /><ns0:title>Comment 3 by b...@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=1253#c3" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/1253/comments/full/3" rel="self" type="application/atom+xml" /></ns0:entry>