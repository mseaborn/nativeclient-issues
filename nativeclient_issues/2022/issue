<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;AkQHRH47eCl7ImA9WhdSGEQ.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/2022</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">On 32-bit Windows, the kernel will not deliver a fault to the userland handler KiUserExceptionDispatcher (in NTDLL) if %ss was set to a non-default value at the time the fault occurred.  Changing other segment registers (%cs, %ds, %gs etc.) does not prevent the exception delivery: the kernel just resets these.

We rely on the exception being blocked for security in NaCl.  This prevents the exception being delivered if untrusted code faults.  If the kernel reset %ss but not %esp, there would be a security hole similar to issue 1633.  Our existing signal_handler_test would not necessarily catch such a change in kernel behaviour.

Ideally we should add a test to check and document this assumption.
</ns0:content><ns0:updated>2011-07-29T00:12:15.000Z</ns0:updated><ns0:published>2011-07-13T21:45:15.000Z</ns0:published><ns2:status>New</ns2:status><ns2:state>open</ns2:state><ns0:title>Add test to check safety of untrusted faults on x86-32 Windows</ns0:title><ns2:label>Type-Enhancement</ns2:label><ns2:label>Pri-2</ns2:label><ns2:label>Component-TCB</ns2:label><ns2:label>OS-Windows</ns2:label><ns2:label>Arch-x86-32</ns2:label><ns2:label>TestNeeded</ns2:label><ns2:label>Mstone-X</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/2022/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2022" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/2022" rel="self" type="application/atom+xml" /><ns2:stars>1</ns2:stars><ns2:id>2022</ns2:id></ns0:entry>