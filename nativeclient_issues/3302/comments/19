<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;A0AASH47eCl7ImA9WhBSGU8.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/3302/comments/full/19</ns0:id><ns0:author>
			<ns0:name>dschuff@chromium.org</ns0:name><ns0:uri>/u/dschuff@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">IR and asm output from #13 attached.
Basically what is happening is that we are getting negative values in the index registers for addressing (which is the case where problems arise in mixing 32 and 64 bit address calculations)
This is happening in 2 places: first is in the %eax operand 2nd lea instruction, and also in %eax in the last movl in the first basic block.  We try to prevent this situation in general in LegalizeAddressingModeForNaCl in X86ISelDAGToDAG.cpp, (see also the comment there) but this case is more general than the ones we check for there, and I don't know if there is a way to check for it in the most general case. 
A couple more notes:
For LEAs we can actually make it work by using the  0x67 address-size prefix to force the address calculations there to be 32 bit. LLVM can't actually generate it currently but it shouldn't be hard to add. However the validator for some reason doesn't accept it currently.
The other note is that this example is full of Undefined Behavior in the form of signed overflow,  I'm not sure whether this form of the problem can happen without that (especially since the truncation is not an issue in that case). It may be possible to make the address matcher or the address legalization rewrite smarter, but it would probably come at a cost in code quality.</ns0:content><ns0:updated>2013-02-27T01:49:09.000Z</ns0:updated><ns0:published>2013-02-27T01:49:09.000Z</ns0:published><ns2:updates /><ns0:title>Comment 19 by dschuff@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=3302#c19" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/3302/comments/full/19" rel="self" type="application/atom+xml" /></ns0:entry>