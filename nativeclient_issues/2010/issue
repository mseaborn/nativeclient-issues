<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;C0MGQH47eCl7ImA9WhdTF0k.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/2010</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">The x86-64 validator allows the following instruction sequence:

  bsf %ebx, %eax
  mov %rdx, (%r15, %rax)

This is unsafe because this BSF instruction does not write to %rax if %ebx is zero, at least on Intel processors.

This allows untrusted code to write to arbitrary locations in memory and hence escape the sandbox.

I came across this from reading the &amp;quot;Differences between AMD64 and Intel 64&amp;quot; section in http://en.wikipedia.org/wiki/X86-64, which says:  &amp;quot;Intel 64's BSF and BSR instructions act differently when the source is 0 and the operand size is 32 bits. The processor sets the zero flag and leaves the upper 32 bits of the destination undefined.&amp;quot;

In the short term, I would recommend allowing only MOVs as memory address masks, until the other cases can be audited more carefully.  nacl-gcc is currently not sophisticated enough to use instructions other than MOVs as masks, as far as I know.

I would recommend disallowing BSF/BSR if they behave differently on Intel and AMD processors.

Attached is example code which escapes from the x86-64 sandbox and executes a Linux syscall.
</ns0:content><ns0:updated>2011-07-15T14:50:21.000Z</ns0:updated><ns0:published>2011-07-13T01:38:16.000Z</ns0:published><ns2:status>Fixed</ns2:status><ns2:owner>
			<ns2:uri>/u/108470876877739532758/</ns2:uri><ns2:username>kschi...@google.com</ns2:username></ns2:owner><ns2:cc>
			<ns2:uri>/u/108470876877739532758/</ns2:uri><ns2:username>kschi...@google.com</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/mseaborn@chromium.org/</ns2:uri><ns2:username>mseaborn@chromium.org</ns2:username></ns2:cc><ns2:state>closed</ns2:state><ns0:title>Escape from x86-64 inner sandbox using BSF instruction</ns0:title><ns2:label>Security</ns2:label><ns2:label>Pri-0</ns2:label><ns2:label>OS-All</ns2:label><ns2:label>Arch-x86-64</ns2:label><ns2:label>Component-TCB-Validator</ns2:label><ns2:label>Mstone-14</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/2010/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2010" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/2010" rel="self" type="application/atom+xml" /><ns2:stars>1</ns2:stars><ns2:closedDate>2011-07-13T22:05:19.000Z</ns2:closedDate><ns2:id>2010</ns2:id></ns0:entry>