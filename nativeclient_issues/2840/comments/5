<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;D0ENRX47eCl7ImA9WhVaF0w.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/2840/comments/full/5</ns0:id><ns0:author>
			<ns0:name>jvo...@google.com</ns0:name><ns0:uri>/u/102292187274959663599/</ns0:uri></ns0:author><ns0:content type="html">Even the ld-new.strip-debug image crashes the sandboxed LLC, so it is not the debug metadata that is the problem.  It is the symbol names in the pexe that is the problem.  Updating this issue description.


The llvm::Value::setName() call that happens last is one for a Twine that is:

"for.cond1.preheader.for.cond1.preheader_crit_edge.i.for.cond1.preheader.for.cond1.preheader_crit_edge.i_crit_edge.i.for.cond1.preheader.for.cond1.preheader_crit_edge.i....really-long..."

So maybe there is some incredibly-long loop label in Gold that overflows a buffer in the llc.nexe?

There is indeed a function in the pexe "(anonymous namespace)::Stub_table&lt;false&gt;::find_reloc_stub((anonymous namespace)::Reloc_stub::Key const&amp;) const", where this is the case.

</ns0:content><ns0:updated>2012-06-14T23:14:54.000Z</ns0:updated><ns0:published>2012-06-14T23:14:54.000Z</ns0:published><ns2:updates>
			<ns2:summary>pnacl: sandboxed llc on x86-64 seems to crash when processing ld-gold.pexe with symbol information</ns2:summary></ns2:updates><ns0:title>Comment 5 by jvo...@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2840#c5" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/2840/comments/full/5" rel="self" type="application/atom+xml" /></ns0:entry>