<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;C08BRX47eCl7ImA9WxBaGUo.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/358</ns0:id><ns0:author>
			<ns0:name>bradc...@google.com</ns0:name><ns0:uri>/u/110304265766688778552/</ns0:uri></ns0:author><ns0:content type="html">
1. Untrusted NPIdentifier Usage

File: src/shared/npruntime/npmodule_rpc_impl.cc
Function: NPModuleRpcServer::NPN_UTF8FromIdentifier()
Problem Type: Illegal Memory Access 
Compromise Type: Varies
Severity: Medium

The ::NPN_UTF8FromIdentifier() function takes an untrusted NPIdentifier 
value and looks up the relevant string value. Internally in webkit code, 
this results in a call to _NPN_UTF8FromIdentifier(), which simply casts the 
NPIdentifier from an integer to a PrivateIdentifier pointer value. Since 
the WireFormatToNPIdentifier class does nothing to the untrusted integer 
received from the wire, a compromised NACL host could use this RPC function 
to provide a raw pointer to the more privileged plugin process, thus 
allowing a potential privilege escalation situation.

2. RPCArg Request Integer Overflow

File: src/shared/npruntime/nprpc.h
Function: RpcArgBuffer::Request()
Problem Type: Illegal Memory Access 
Compromise Type: Varies
Severity: Medium

If an arbitrarily large size parameter is passed to the Request() function, 
an integer overflow can occur since base_ + size can potentially wrap, thus 
potentially returning success incorrectly. This can occur when 
deserializing NPVariant strings in the RpcArg::GetVariant() function.

3. RPCArg Consume Integer Overflow

File: src/shared/npruntime/nprpc.h
Function: RpcArgBuffer::Consume()
Problem Type: Illegal Memory Access 
Compromise Type: Varies
Severity: Medium

This has the same problem as the Request() function. 

4. RPCArg RoundSize Integer Overflow

File: src/shared/npruntime/nprpc.h
Function: RpcArgBuffer::Consume()
Problem Type: Illegal Memory Access 
Compromise Type: Varies
Severity: Medium

RoundSize() rounds up a requested size to the next alignment boundary 
without checking for integer overflow. This function is used in Request() 
and Consume(), and creates an additional opportunity for integer overflows. 

5. RPCArg GetVariant Integer Overflow

File: src/shared/npruntime/nprpc.cc
Function: RpcArgBuffer::Consume()
Problem Type: Illegal Memory Access 
Compromise Type: Varies
Severity: Medium

The untrusted UTF8Length value read from the NPVariant in the case of a 
string value is used to allocate memory with NPN_MemAlloc(). Since it has 
not been checked before 1 is added to it, a possible integer overflow can 
occur during allocation. Triggering this overflow will result in memory 
corruption due to a large memmove() operation. Note that this is only 
possible due to integer problems in RPCArgBuffer functions that have been 
previously noted.

6. RPCArg GetCapability Arbitrary Pointer Usage

File: src/shared/npruntime/nprpc.cc
Function: RpcArgBuffer::GetCapability()
Problem Type: Illegal Memory Access 
Compromise Type: Varies
Severity: Medium

The GetCapability() function is used to deseralize an NPCapability 
structure from the data stream. This structure includes an object pointer 
(the object_ member), which is later case to an NPObject * and used to 
access memory and call functions. The ability to specify an arbitrary 
object pointer here could lead to illegal memory access and potentially 
result in arbitrary execution.
</ns0:content><ns0:updated>2010-03-30T17:57:34.000Z</ns0:updated><ns0:published>2010-03-17T17:22:29.000Z</ns0:published><ns2:status>Fixed</ns2:status><ns2:owner>
			<ns2:uri>/u/108394971971967673680/</ns2:uri><ns2:username>s...@google.com</ns2:username></ns2:owner><ns2:cc>
			<ns2:uri>/u/105821748722532785568/</ns2:uri><ns2:username>b...@google.com</ns2:username></ns2:cc><ns2:state>closed</ns2:state><ns0:title>[MD Audit] SRPC security issues</ns0:title><ns2:label>Type-Defect</ns2:label><ns2:label>Pri-0</ns2:label><ns2:label>OS-All</ns2:label><ns2:label>Milestone-Chromium-5</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/358/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=358" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/358" rel="self" type="application/atom+xml" /><ns2:stars>1</ns2:stars><ns2:closedDate>2010-03-30T17:57:34.000Z</ns2:closedDate><ns2:id>358</ns2:id></ns0:entry>