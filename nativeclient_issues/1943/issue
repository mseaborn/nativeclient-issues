<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CEUMSX47eCl7ImA9WhdXEk0.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/1943</ns0:id><ns0:author>
			<ns0:name>jvo...@google.com</ns0:name><ns0:uri>/u/102292187274959663599/</ns0:uri></ns0:author><ns0:content type="html">CL http://codereview.chromium.org/7217002/ implements a few TLS intrinsics to match the interface specified in src/untrusted/nacl/tls_params.h

The CL does this at the instruction selection DAG-level (vs low-level assembly), which allows basic constant folding. For example:

128 + __builtin_nacl_tp_alignment()

can turn into 192 for x86, or 4224 for arm.

However, this does not optimize away dead branches. As an example, src/untrusted/nacl/tls.c has the following code:

  ptrdiff_t tdboff = __nacl_tp_tdb_offset(tdb_size);
  if (tdboff &amp;lt; 0) {
    // ARM case
  } else {
    // X86 case
  }
</ns0:content><ns0:updated>2011-08-24T16:11:28.000Z</ns0:updated><ns0:published>2011-06-22T17:16:41.000Z</ns0:published><ns2:status>Assigned</ns2:status><ns2:owner>
			<ns2:uri>/u/102292187274959663599/</ns2:uri><ns2:username>jvo...@google.com</ns2:username></ns2:owner><ns2:state>open</ns2:state><ns0:title>Clean up llvm TLS-related intrinsics (e.g., to optimize more)</ns0:title><ns2:label>Type-Enhancement</ns2:label><ns2:label>Pri-2</ns2:label><ns2:label>Component-PNaCl</ns2:label><ns2:label>OS-All</ns2:label><ns2:label>Mstone-X</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/1943/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=1943" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/1943" rel="self" type="application/atom+xml" /><ns2:stars>1</ns2:stars><ns2:id>1943</ns2:id></ns0:entry>