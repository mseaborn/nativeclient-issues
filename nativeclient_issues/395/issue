<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CkIEQX47eCl7ImA9WxFTEUk.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/395</ns0:id><ns0:author>
			<ns0:name>bradc...@google.com</ns0:name><ns0:uri>/u/110304265766688778552/</ns0:uri></ns0:author><ns0:content type="html">7. Store Segmentation Validation Vulnerability

File: trusted/validator_x86/nc_store_protect.c
Function: NaClStoreValidator()
Problem Type: Illegal Memory Access (Write)
Compromise Type: NaCL sandbox compromise
Severity: High

When trusted base registers aren't used as a target for a store operation,
the only way the store will be considered valid is if it is a segmented address
that meets certain constraints (therefore allowing the movs and stos
instructions, which store data at es:rdi implicitly). The constraints that
need to be
satisfied are the following:

  a. The store operation must be immediately preceded by an lea instruction.
  b. The LEA instruction's target operand must be the same as the offset
register used in the store operation following it.
  c. The LEA source operand must be an effective address that is safe (ie.
has a base register RBP, RSP, R15, or RIP, and a valid index/offset register
conforming to the rules of regular store operations).

If the address-size override prefix is used on both the LEA and the
subsequent store operation, then conditions (b) and (c) can both be
satisfied, and a
32-bit offset register will be used instead of a 64-bit one, thus
truncating the calculated address from the LEA instruction. This allows an
application to
write data to arbitrary memory in the first 4G of the process address space.

...

I misspoke in the explanation part here. No prefixes are required for the
lea instruction. You just need to make the destination a 32-bit register.
The vulnerable sequence is as follows:

mov eax, $VALUE
mov edi, $ADDRESS
lea edi, [ rbp + rdi ]
addr32                      ; this is the 0x67 prefix
stosd
</ns0:content><ns0:updated>2010-04-01T16:48:20.000Z</ns0:updated><ns0:published>2010-03-31T23:44:40.000Z</ns0:published><ns2:status>Fixed</ns2:status><ns2:owner>
			<ns2:uri>/u/108470876877739532758/</ns2:uri><ns2:username>kschi...@google.com</ns2:username></ns2:owner><ns2:state>closed</ns2:state><ns0:title>[MD audit] seventh 64-bit validator defect</ns0:title><ns2:label>Type-Defect</ns2:label><ns2:label>Pri-0</ns2:label><ns2:label>Milestone-Chromium-5</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/395/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=395" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/395" rel="self" type="application/atom+xml" /><ns2:stars>1</ns2:stars><ns2:closedDate>2010-04-01T16:48:20.000Z</ns2:closedDate><ns2:id>395</ns2:id></ns0:entry>