<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;AkYMSH47eCl7ImA9Wx9aEU8.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/1492/comments/full/1</ns0:id><ns0:author>
			<ns0:name>jamesfen...@gmail.com</ns0:name><ns0:uri>/u/105008541472586726939/</ns0:uri></ns0:author><ns0:content type="html">Here is the fixed version:

_GLIBCXX_BEGIN_NAMESPACE(std)

  /// @brief  Base class for ctype.
  struct ctype_base
  {
    // Non-standard typedefs.
    typedef const int*          __to_type;

    // NB: Offsets into ctype&lt;char&gt;::_M_table force a particular size
    // on the mask type. Because of this, we don't use an enum.
    typedef char                mask;
    static const mask upper     = _ISupper;
    static const mask lower     = _ISlower;
    static const mask alpha     = _ISalpha;
    static const mask digit     = _ISdigit;
    static const mask xdigit    = _ISxdigit;
    static const mask space     = _ISspace;
    static const mask print     = _ISprint;
    static const mask graph     = _ISgraph;
    static const mask cntrl     = _IScntrl;
    static const mask punct     = _ISpunct;
    static const mask alnum     = _ISalnum;
  };

_GLIBCXX_END_NAMESPACE
</ns0:content><ns0:updated>2011-03-03T04:56:29.000Z</ns0:updated><ns0:published>2011-03-03T04:56:29.000Z</ns0:published><ns2:updates /><ns0:title>Comment 1 by jamesfen...@gmail.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=1492#c1" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/1492/comments/full/1" rel="self" type="application/atom+xml" /></ns0:entry>