<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;D0cMQX47eCl7ImA9WhVQFE8.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/2627</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">In order to switch NaCl from using the SRPC+IMC-based PPAPI proxy to the Chrome-IPC-based PPAPI proxy (issue chromium:116317), we want to make Chrome IPC channels usable by NaCl untrusted code.  This means there should be a NaCl descriptor type for Chrome IPC channels and system calls for sending and receiving raw messages.

More generally, we would like a way for an embedder of Native Client to provide new types of NaClDesc and operations on those descriptors.

There are a couple of ways we might do this:


Option A: Reuse the existing imc_sendmsg() and imc_recvmsg() syscalls.

This is a little tricky because these syscalls are currently IMC-specific.  They call directly to NaClImcSendTypedMessage() and NaClImcRecvTypedMessage() in nrd_xfer.c, which implements IMC's marshalling of NaClDescs, which is the part we would want to replace.

We would want to make those implementations overridable.

Here is a prototype change for doing that:
http://codereview.chromium.org/9471005/

That moves NaClImcSendTypedMessage() to being an overridable method in NaClDesc's vtable.  NaClImcRecvTypedMessage() is trickier because it recently gained a NaClDescQuotaInterface argument.


Option B: Provide a new, more general-purpose NaCl syscall and NaClDesc method.

Here is a prototype change for doing that:
http://codereview.chromium.org/9545004/

This provides a simple &amp;quot;ncall&amp;quot; operation on NaClDescs where:
 * &amp;quot;ncall&amp;quot; takes a message as an argument, and returns a message as a result.
 * Messages consist of an array of bytes and an array of descriptors.
 * You can use this for sending or receiving messages, or both.
 * It is agnostic on whether the operation is blocking or non-blocking.

The interface the embedder (Chromium) would use for creating a custom descriptor could look something like this:

// A message consists of an array of bytes and an array of NaClDescs:
struct NaClNcallArgs {
  uint8_t *data;
  size_t data_size;
  struct NaClDesc *descs;
  size_t descs_size;
};

struct NaClDesc *MakeDesc(
    void *handle,
    void (*CallFunc)(void *handle,
                     const struct NaClNcallArgs *input,
                     struct NaClNcallArgs *result),
    void (*DestroyFunc)(void *handle));
</ns0:content><ns0:updated>2012-04-03T03:51:20.000Z</ns0:updated><ns0:published>2012-02-29T23:01:03.000Z</ns0:published><ns2:status>Started</ns2:status><ns2:owner>
			<ns2:uri>/u/mseaborn@chromium.org/</ns2:uri><ns2:username>mseaborn@chromium.org</ns2:username></ns2:owner><ns2:cc>
			<ns2:uri>/u/106710594185928520364/</ns2:uri><ns2:username>bbu...@google.com</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/brettw@chromium.org/</ns2:uri><ns2:username>brettw@chromium.org</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/105821748722532785568/</ns2:uri><ns2:username>b...@google.com</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/108394971971967673680/</ns2:uri><ns2:username>s...@google.com</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/110304265766688778552/</ns2:uri><ns2:username>bradc...@google.com</ns2:username></ns2:cc><ns2:cc>
			<ns2:uri>/u/100032148147647801554/</ns2:uri><ns2:username>ncb...@google.com</ns2:username></ns2:cc><ns2:state>open</ns2:state><ns0:title>Allow Chromium to expose Chrome IPC channels to untrusted code</ns0:title><ns2:label>Type-Enhancement</ns2:label><ns2:label>Pri-2</ns2:label><ns2:label>Component-TCB</ns2:label><ns2:label>OS-All</ns2:label><ns2:label>Arch-All</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/2627/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2627" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/2627" rel="self" type="application/atom+xml" /><ns2:stars>1</ns2:stars><ns2:id>2627</ns2:id></ns0:entry>