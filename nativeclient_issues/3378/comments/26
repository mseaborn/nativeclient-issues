<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;DEQGQn47eCl7ImA9WhFSF0o.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/3378/comments/full/26</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">prefetch -- No objections to this, because it's just a hint that will have no observable effects apart from timing.

stackrestore, stacksave -- I am OK with these because they're so simple.  If LLVM were likely to remove them, that might be an argument to disallow them on maintenance grounds, but I don't think that's likely.  The VLA+alloca interaction has the same behaviour on GCC, and I think this is unavoidable and somewhat expected (I've added a comment to http://llvm.org/bugs/show_bug.cgi?id=16099).

nacl_target_arch -- I think we should disallow this.  There shouldn't be a supported way for a program to take different code paths according to which architecture it's running on.

ctlz, cttz, ctpop -- No objections as long as we have tests to cover them on all architectures.  llvm_bitmanip_intrinsics.c covers these for i32 and i64, but not i8 or i16.</ns0:content><ns0:updated>2013-06-21T00:58:43.000Z</ns0:updated><ns0:published>2013-06-21T00:58:43.000Z</ns0:published><ns2:updates /><ns0:title>Comment 26 by mseaborn@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=3378#c26" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/3378/comments/full/26" rel="self" type="application/atom+xml" /></ns0:entry>