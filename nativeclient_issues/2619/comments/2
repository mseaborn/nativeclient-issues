<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;A0YDQH47eCl7ImA9WhVSFko.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/2619/comments/full/2</ns0:id><ns0:author>
			<ns0:name>b...@google.com</ns0:name><ns0:uri>/u/105821748722532785568/</ns0:uri></ns0:author><ns0:content type="html">another possibility that might be more performant is to add fine grained locking for address space ranges.  if one thread is doing I/O on a memory range and another thread tries to mmap over or munmap it, then we block the second thread until the I/O is complete.  or maybe even generate an error.  while this is different from unix behavior, this is an application level race that wouldn't occur in normal/correct code.  this is also something we could implement (the checking etc) in a cross platform manner, so that we'd get consistent error reporting.</ns0:content><ns0:updated>2012-03-13T22:52:51.000Z</ns0:updated><ns0:published>2012-03-13T22:52:51.000Z</ns0:published><ns2:updates /><ns0:title>Comment 2 by b...@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2619#c2" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/2619/comments/full/2" rel="self" type="application/atom+xml" /></ns0:entry>