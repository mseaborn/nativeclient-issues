<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;DkEBSX47eCl7ImA9WhVXGEU.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/2619</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">I'm splitting this out from issue 140.  For issue 140, we changed NaCl so that, on Windows, untrusted threads are suspended while we open up a mmap hole in untrusted address space.  This is to prevent them writing into the mapping hole.

However, NaCl syscalls can still write into holes in the untrusted address space, on behalf of untrusted code, as Bennet pointed out in http://codereview.chromium.org/7744044#msg2.

There are two cases we would want to fix:

 1) Direct memory writes, done through a pointer in NaCl's trusted code.  These are easily fixed by putting a mutex into mmap()/munmap() and around the syscalls' memory writes.

 2) Memory writes done by the host OS on our behalf for read() or imc_recvmsg().  These are trickier because these host syscalls are usually blocking, so we can't just put a mutex around them.  We could address this, at the expense of performance, by doing a second copy, i.e.:

     NaClSysRead(fd, untrusted_buf) {
       char tmp_buf[];
       read(fd, tmp_buf);
       copy_safely_to_untrusted_code(tmp_buf, untrusted_buf);
     }
</ns0:content><ns0:updated>2012-04-20T01:17:38.000Z</ns0:updated><ns0:published>2012-02-28T17:01:21.000Z</ns0:published><ns2:status>Fixed</ns2:status><ns2:owner>
			<ns2:uri>/u/105821748722532785568/</ns2:uri><ns2:username>b...@google.com</ns2:username></ns2:owner><ns2:state>closed</ns2:state><ns0:title>Windows: Syscalls shouldn't write to untrusted memory while mmap holes are open</ns0:title><ns2:label>Type-Defect</ns2:label><ns2:label>Pri-2</ns2:label><ns2:label>Component-TCB</ns2:label><ns2:label>OS-Windows</ns2:label><ns2:label>Arch-All</ns2:label><ns2:label>Security</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/2619/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2619" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/2619" rel="self" type="application/atom+xml" /><ns2:stars>1</ns2:stars><ns2:blockedOn>
			<ns2:id>2349</ns2:id><ns2:project>nativeclient</ns2:project></ns2:blockedOn><ns2:closedDate>2012-04-20T01:17:38.000Z</ns2:closedDate><ns2:id>2619</ns2:id></ns0:entry>