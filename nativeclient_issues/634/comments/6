<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;D0UFRH47eCl7ImA9Wx5UEUU.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/634/comments/full/6</ns0:id><ns0:author>
			<ns0:name>b...@google.com</ns0:name><ns0:uri>/u/105821748722532785568/</ns0:uri></ns0:author><ns0:content type="html">Modularization, and when feasible, separate address spaces / fault domains is a fine goal.  However, from the "security POV" it is not obvious to me that the total amount of trusted code is actually reduced.  We must use/trust the SRPC code in more contexts -- whereas before, trusted file server code might not get messages that are interpreted as RPCs from untrusted code.  The total amount of code that deals with the file abstraction is likely to be similar -- it just got shuffled around, from inside the service runtime part of the TCB to other trusted components (custom launchers providing file access, which is also part of the TCB for its use case).  It is only the case where the other side of the file API is largely/completely implemented by untrusted code where this argument is clear.

The other aspect of the debug-only interface is its usefulness when we bring up a new sandbox model for a new architecture.  The point that cbiffle raised about not requiring IMC/SPRC similarly applies if we ever wanted to port to another OS family, especially one where the IMC abstractions might be hard to support.  While it's unclear when/if we'll tackle the next ISA or another OS (!), we should keep these use cases in mind as well.</ns0:content><ns0:updated>2010-10-15T23:26:55.000Z</ns0:updated><ns0:published>2010-10-15T23:26:55.000Z</ns0:published><ns2:updates /><ns0:title>Comment 6 by b...@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=634#c6" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/634/comments/full/6" rel="self" type="application/atom+xml" /></ns0:entry>