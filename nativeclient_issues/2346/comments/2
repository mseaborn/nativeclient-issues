<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;AkEHR347eCl7ImA9WhdbEE8.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/2346/comments/full/2</ns0:id><ns0:author>
			<ns0:name>dsch...@google.com</ns0:name><ns0:uri>/u/104270846665912603141/</ns0:uri></ns0:author><ns0:content type="html">Maybe the best way to proceed for now is the variant mentioned above: Accept up to regparm(2) and reject regparm(3) in the frontend. This is a trivial 1-line patch to clang, and requires no change to LLVM (which will accept the 2 inreg parameters like normal) or to glibc (which only exposes regparm(1) and only uses regparm(2)). If we want a little more diagnostic we can throw an error if we see more than 2 inreg parameters in a function (either in a bitcode verifier or in llc/lli itself)</ns0:content><ns0:updated>2011-10-07T23:03:56.000Z</ns0:updated><ns0:published>2011-10-07T23:03:56.000Z</ns0:published><ns2:updates /><ns0:title>Comment 2 by dsch...@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2346#c2" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/2346/comments/full/2" rel="self" type="application/atom+xml" /></ns0:entry>