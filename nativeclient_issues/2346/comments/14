<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;DUMNQ347eCl7ImA9WhFTEE8.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/2346/comments/full/14</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">My intention for the first release is that we strip the "fastcc" attribute and don't try to add it back in the translator, so the backend will be using the standard pass-via-stack calling conventions on x86-32.  I'd guess this would have a performance impact on x86-32.  We can see how it affects Spec2k on the bots.

As an optimisation later, we can have translator add "fastcc" to all functions and calls before doing code generation.  However, this will require some work to change the IRT to use fastcc calling conventions with PNaCl.  We'd have to ensure that the PPAPI shims are built with the PNaCl toolchain and use appropriate "fastcc" attributes.  We'd have to add shims to other parts of the IRT too.  This can wait until after a first ABI-stable release.

Basically, I don't want to have pexes containing multiple calling conventions (default and "fastcc"), because if the pexe uses them incorrectly it will be non-portable: you'll have a pexe that works on x86-64 but not on x86-32.  I've already seen this happen when I've written buggy IR passes that preserve "fastcc" on functions but not on calls.  (BTW, this is an easy mistake to make because Function has a copyAttributesFrom() helper method but CallInst doesn't.)
</ns0:content><ns0:updated>2013-05-31T19:11:32.000Z</ns0:updated><ns0:published>2013-05-31T19:11:32.000Z</ns0:published><ns2:updates /><ns0:title>Comment 14 by mseaborn@chromium.org</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2346#c14" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/2346/comments/full/14" rel="self" type="application/atom+xml" /></ns0:entry>