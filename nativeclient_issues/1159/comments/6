<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CUAMQ347eCl7ImA9Wx5aFUQ.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/1159/comments/full/6</ns0:id><ns0:author>
			<ns0:name>k...@google.com</ns0:name><ns0:uri>/u/112873510090665368075/</ns0:uri></ns0:author><ns0:content type="html">Actually the problem here with glibc, not with newlib. NaCl only offers one kind of clock - and it maps to CLOCK_REALTIME. In fact we'll have problems with glibc: it defines CLOCK_MONOTONIC where it should not be defined.

Alternatively we can investigate if we can extend NaCl syscalls to support CLOCK_MONOTONIC - but this is serious work: on Windows we should probably use GetTickCount64 (but it's only available in Vista+ so we'll probably need some kind of GetTickCount-based fallback for XP), on MacOS you can do this on Mach level, but not on POSIX level (there are no clock_gettime on MacOS). Then we'll need unittests, regression tests, etc.

Still looks like "minor fix" to you?
</ns0:content><ns0:updated>2010-11-12T20:29:42.000Z</ns0:updated><ns0:published>2010-11-12T20:29:42.000Z</ns0:published><ns2:updates /><ns0:title>Comment 6 by k...@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=1159#c6" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/1159/comments/full/6" rel="self" type="application/atom+xml" /></ns0:entry>