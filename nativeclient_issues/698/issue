<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;CUIFRH47eCl7ImA9WhdQFkQ.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/698</ns0:id><ns0:author>
			<ns0:name>espind...@google.com</ns0:name><ns0:uri>/u/101432766050863658364/</ns0:uri></ns0:author><ns0:content type="html">Just a reminder to look again at how we avoid having negative registers in registers on x86-64. The current code lets the matches progress as normal and then patches the result. Things to look for

*) Is that covering all cases? It might, but the matching code is fairly large and we might be missing something.
*) Is this the best way to do it? Currently all produced matches are valid, and are just optimized after being produced. For NaCl we just have a smaller set of valid matches, maybe the best way to implement this is to change the matcher itself.
</ns0:content><ns0:updated>2011-08-18T18:51:55.000Z</ns0:updated><ns0:published>2010-07-15T14:32:39.000Z</ns0:published><ns2:status>WontFix</ns2:status><ns2:owner>
			<ns2:uri>/u/102292187274959663599/</ns2:uri><ns2:username>jvo...@google.com</ns2:username></ns2:owner><ns2:cc>
			<ns2:uri>/u/108394971971967673680/</ns2:uri><ns2:username>s...@google.com</ns2:username></ns2:cc><ns2:state>closed</ns2:state><ns0:title>Revisit how we avoid negative register on memory access</ns0:title><ns2:label>Type-Enhancement</ns2:label><ns2:label>Pri-3</ns2:label><ns2:label>Component-PNaCl</ns2:label><ns2:label>Mstone-15</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/698/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=698" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/698" rel="self" type="application/atom+xml" /><ns2:stars>1</ns2:stars><ns2:closedDate>2011-08-18T18:51:55.000Z</ns2:closedDate><ns2:id>698</ns2:id></ns0:entry>