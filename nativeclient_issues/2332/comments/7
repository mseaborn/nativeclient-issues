<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;D0EDRH47eCl7ImA9WhdaEk4.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/2332/comments/full/7</ns0:id><ns0:author>
			<ns0:name>robertm@google.com</ns0:name><ns0:uri>/u/robertm@google.com/</ns0:uri></ns0:author><ns0:content type="html">the  latest lead is that something is wrong with the STL string library.
When building just the libstdc++ with clang I can make llc fail during the dumping
of a basic block.

Concretely it crashes while triming an attribute string in
hg/upstream/llvm/lib/VMCore/Attributes.cpp

std::string Attribute::getAsString(Attributes Attrs) {
...
  dbgs() &lt;&lt; "@@@ result " &lt;&lt; Result &lt;&lt; "\n";
  // Trim the trailing space.
  assert(!Result.empty() &amp;&amp; "Unknown attribute!");
  dbgs() &lt;&lt; "@@@ erase\n";
  Result.erase(Result.end()-1);
  dbgs() &lt;&lt; "@@@ return\n";
  return Result;
....
we never get to the print statement before the return:
@@@ result nounwind 
@@@ erase
[SRPC:HOST:26624,4147332832:18:14:52.187855]

there could be buffered output, though - will look into this next week
</ns0:content><ns0:updated>2011-10-21T22:21:15.000Z</ns0:updated><ns0:published>2011-10-21T22:21:15.000Z</ns0:published><ns2:updates /><ns0:title>Comment 7 by robertm@google.com</ns0:title><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=2332#c7" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/2332/comments/full/7" rel="self" type="application/atom+xml" /></ns0:entry>