<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom" xmlns:ns1="http://schemas.google.com/g/2005" xmlns:ns2="http://schemas.google.com/projecthosting/issues/2009" ns1:etag="W/&quot;C08NRn47eCl7ImA9WhdTFUQ.&quot;">
		<ns0:id>http://code.google.com/feeds/issues/p/nativeclient/issues/full/1545</ns0:id><ns0:author>
			<ns0:name>mseaborn@chromium.org</ns0:name><ns0:uri>/u/mseaborn@chromium.org/</ns0:uri></ns0:author><ns0:content type="html">The fault handler on 64-bit Windows runs on the untrusted stack -- i.e. it uses the untrusted code's value of %rsp.  (I am told that there is no equivalent of Unix's sigaltstack() on Windows.)

This is dangerous because the memory could be modified while the trusted fault handler is running, allowing untrusted code to cause the fault handler to jump to an arbitrary address.

Even if Windows suspends the process's other threads when the fault handler is run (and I am not sure whether that happens), %rsp might point to shared memory.  It is possible to set up shared mappings using the NaCl plugin today, using the SRPC-from-Javascript interface.  Even if this interface is disabled, it seems brittle to rely on this.

Luckily %rsp is supposed to be constrained to point within untrusted address space.  If %rsp were not constrained this way, it would be easier to exploit:  untrusted code could cause the fault handler to overwrite memory locations in trusted address space.


Below is a patch that demonstrates this problem.  It triggers an error on 64-bit Windows but not on Linux (where we do not have this problem).

This sanity check was present in the original version of the x86-64 signal handler that I wrote, but it was taken out in r3432.

--- a/src/native_client/src/trusted/service_runtime/nacl_signal_common.c
+++ b/src/native_client/src/trusted/service_runtime/nacl_signal_common.c
@@ -86,6 +86,13 @@ int NaClSignalContextIsUntrusted(const struct NaClSignalContext *sigCtx) {
     return 0;
   } else {
     struct NaClAppThread *thread = nacl_thread[current_thread_index];
+
+    if (NaClIsUserAddr(thread-&amp;gt;nap, (uintptr_t) &amp;amp;thread)) {
+      NaClSignalErrorMessage(&amp;quot;Danger: Trusted code is using stack &amp;quot;
+                             &amp;quot;in untrusted memory\n&amp;quot;);
+      _exit(1);
+    }
+
     return NaClIsUserAddr(thread-&amp;gt;nap, sigCtx-&amp;gt;prog_ctr);
   }
 #elif NACL_ARCH(NACL_BUILD_ARCH) == NACL_arm
</ns0:content><ns0:updated>2011-07-13T21:18:17.000Z</ns0:updated><ns0:published>2011-03-17T19:25:38.000Z</ns0:published><ns2:status>Obsolete</ns2:status><ns2:owner>
			<ns2:uri>/u/mseaborn@chromium.org/</ns2:uri><ns2:username>mseaborn@chromium.org</ns2:username></ns2:owner><ns2:state>closed</ns2:state><ns0:title>Win64 fault handler runs on untrusted stack - Breakpad could be vulnerable</ns0:title><ns2:label>Type-Defect</ns2:label><ns2:label>Pri-0</ns2:label><ns2:label>Component-TCB</ns2:label><ns2:label>OS-Windows</ns2:label><ns2:label>Arch-x86-64</ns2:label><ns2:label>FaultHandler</ns2:label><ns2:label>Security</ns2:label><ns2:label>Mstone-14</ns2:label><ns0:link href="http://code.google.com/feeds/issues/p/nativeclient/issues/1545/comments/full" rel="replies" type="application/atom+xml" /><ns0:link href="http://code.google.com/p/nativeclient/issues/detail?id=1545" rel="alternate" type="text/html" /><ns0:link href="https://code.google.com/feeds/issues/p/nativeclient/issues/full/1545" rel="self" type="application/atom+xml" /><ns2:stars>1</ns2:stars><ns2:closedDate>2011-07-13T21:18:17.000Z</ns2:closedDate><ns2:id>1545</ns2:id></ns0:entry>